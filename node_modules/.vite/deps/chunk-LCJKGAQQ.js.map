{
  "version": 3,
  "sources": ["../../ol/net.js"],
  "sourcesContent": ["/**\r\n * @module ol/net\r\n */\r\nimport {getUid} from './util.js';\r\n\r\n/**\r\n * Simple JSONP helper. Supports error callbacks and a custom callback param.\r\n * The error callback will be called when no JSONP is executed after 10 seconds.\r\n *\r\n * @param {string} url Request url. A 'callback' query parameter will be\r\n *     appended.\r\n * @param {Function} callback Callback on success.\r\n * @param {Function} [errback] Callback on error.\r\n * @param {string} [callbackParam] Custom query parameter for the JSONP\r\n *     callback. Default is 'callback'.\r\n */\r\nexport function jsonp(url, callback, errback, callbackParam) {\r\n  const script = document.createElement('script');\r\n  const key = 'olc_' + getUid(callback);\r\n  function cleanup() {\r\n    delete window[key];\r\n    script.parentNode.removeChild(script);\r\n  }\r\n  script.async = true;\r\n  script.src =\r\n    url +\r\n    (url.includes('?') ? '&' : '?') +\r\n    (callbackParam || 'callback') +\r\n    '=' +\r\n    key;\r\n  const timer = setTimeout(function () {\r\n    cleanup();\r\n    if (errback) {\r\n      errback();\r\n    }\r\n  }, 10000);\r\n  window[key] = function (data) {\r\n    clearTimeout(timer);\r\n    cleanup();\r\n    callback(data);\r\n  };\r\n  document.head.appendChild(script);\r\n}\r\n\r\nexport class ResponseError extends Error {\r\n  /**\r\n   * @param {XMLHttpRequest} response The XHR object.\r\n   */\r\n  constructor(response) {\r\n    const message = 'Unexpected response status: ' + response.status;\r\n    super(message);\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    this.name = 'ResponseError';\r\n\r\n    /**\r\n     * @type {XMLHttpRequest}\r\n     */\r\n    this.response = response;\r\n  }\r\n}\r\n\r\nexport class ClientError extends Error {\r\n  /**\r\n   * @param {XMLHttpRequest} client The XHR object.\r\n   */\r\n  constructor(client) {\r\n    super('Failed to issue request');\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    this.name = 'ClientError';\r\n\r\n    /**\r\n     * @type {XMLHttpRequest}\r\n     */\r\n    this.client = client;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} url The URL.\r\n * @return {Promise<Object>} A promise that resolves to the JSON response.\r\n */\r\nexport function getJSON(url) {\r\n  return new Promise(function (resolve, reject) {\r\n    /**\r\n     * @param {ProgressEvent<XMLHttpRequest>} event The load event.\r\n     */\r\n    function onLoad(event) {\r\n      const client = event.target;\r\n      // status will be 0 for file:// urls\r\n      if (!client.status || (client.status >= 200 && client.status < 300)) {\r\n        let data;\r\n        try {\r\n          data = JSON.parse(client.responseText);\r\n        } catch (err) {\r\n          const message = 'Error parsing response text as JSON: ' + err.message;\r\n          reject(new Error(message));\r\n          return;\r\n        }\r\n        resolve(data);\r\n        return;\r\n      }\r\n\r\n      reject(new ResponseError(client));\r\n    }\r\n\r\n    /**\r\n     * @param {ProgressEvent<XMLHttpRequest>} event The error event.\r\n     */\r\n    function onError(event) {\r\n      reject(new ClientError(event.target));\r\n    }\r\n\r\n    const client = new XMLHttpRequest();\r\n    client.addEventListener('load', onLoad);\r\n    client.addEventListener('error', onError);\r\n    client.open('GET', url);\r\n    client.setRequestHeader('Accept', 'application/json');\r\n    client.send();\r\n  });\r\n}\r\n\r\n/**\r\n * @param {string} base The base URL.\r\n * @param {string} url The potentially relative URL.\r\n * @return {string} The full URL.\r\n */\r\nexport function resolveUrl(base, url) {\r\n  if (url.includes('://')) {\r\n    return url;\r\n  }\r\n  return new URL(url, base).href;\r\n}\r\n\r\nlet originalXHR;\r\nexport function overrideXHR(xhr) {\r\n  if (typeof XMLHttpRequest !== 'undefined') {\r\n    originalXHR = XMLHttpRequest;\r\n  }\r\n  global.XMLHttpRequest = xhr;\r\n}\r\n\r\nexport function restoreXHR() {\r\n  global.XMLHttpRequest = originalXHR;\r\n}\r\n"],
  "mappings": ";;;;;AAgBO,SAAS,MAAM,KAAK,UAAU,SAAS,eAAe;AAC3D,QAAM,SAAS,SAAS,cAAc,QAAQ;AAC9C,QAAM,MAAM,SAAS,OAAO,QAAQ;AACpC,WAAS,UAAU;AACjB,WAAO,OAAO;AACd,WAAO,WAAW,YAAY,MAAM;AAAA,EACtC;AACA,SAAO,QAAQ;AACf,SAAO,MACL,OACC,IAAI,SAAS,GAAG,IAAI,MAAM,QAC1B,iBAAiB,cAClB,MACA;AACF,QAAM,QAAQ,WAAW,WAAY;AACnC,YAAQ;AACR,QAAI,SAAS;AACX,cAAQ;AAAA,IACV;AAAA,EACF,GAAG,GAAK;AACR,SAAO,OAAO,SAAU,MAAM;AAC5B,iBAAa,KAAK;AAClB,YAAQ;AACR,aAAS,IAAI;AAAA,EACf;AACA,WAAS,KAAK,YAAY,MAAM;AAClC;",
  "names": []
}
