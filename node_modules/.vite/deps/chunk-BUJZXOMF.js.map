{
  "version": 3,
  "sources": ["../../ol/source/TileDebug.js"],
  "sourcesContent": ["/**\r\n * @module ol/source/TileDebug\r\n */\r\n\r\nimport XYZ from './XYZ.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport {toSize} from '../size.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Optional projection.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Set to `1` when debugging `VectorTile` sources with a default configuration.\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n * @property {string} [template='z:{z} x:{x} y:{y}'] Template for labeling the tiles.\r\n * Should include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A pseudo tile source, which does not fetch tiles from a server, but renders\r\n * a grid outline for the tile grid/projection along with the coordinates for\r\n * each tile. See examples/canvas-tiles for an example.\r\n * @api\r\n */\r\nclass TileDebug extends XYZ {\r\n  /**\r\n   * @param {Options} [options] Debug tile options.\r\n   */\r\n  constructor(options) {\r\n    /**\r\n     * @type {Options}\r\n     */\r\n    options = options || {};\r\n\r\n    super({\r\n      opaque: false,\r\n      projection: options.projection,\r\n      tileGrid: options.tileGrid,\r\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\r\n      zDirection: options.zDirection,\r\n      url: options.template || 'z:{z} x:{x} y:{y}',\r\n      tileLoadFunction: (tile, text) => {\r\n        const z = tile.getTileCoord()[0];\r\n        const tileSize = toSize(this.tileGrid.getTileSize(z));\r\n        const context = createCanvasContext2D(tileSize[0], tileSize[1]);\r\n\r\n        context.strokeStyle = 'grey';\r\n        context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);\r\n\r\n        context.fillStyle = 'grey';\r\n        context.strokeStyle = 'white';\r\n        context.textAlign = 'center';\r\n        context.textBaseline = 'middle';\r\n        context.font = '24px sans-serif';\r\n        context.lineWidth = 4;\r\n        context.strokeText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\r\n        context.fillText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\r\n\r\n        /** @type {import(\"../ImageTile.js\").default} */ (tile).setImage(\r\n          context.canvas\r\n        );\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default TileDebug;\r\n"],
  "mappings": ";;;;;;;;;;;AA4BA,IAAM,YAAN,cAAwB,YAAI;AAAA,EAI1B,YAAY,SAAS;AAInB,cAAU,WAAW,CAAC;AAEtB,UAAM;AAAA,MACJ,QAAQ;AAAA,MACR,YAAY,QAAQ;AAAA,MACpB,UAAU,QAAQ;AAAA,MAClB,OAAO,QAAQ,UAAU,SAAY,QAAQ,QAAQ;AAAA,MACrD,YAAY,QAAQ;AAAA,MACpB,KAAK,QAAQ,YAAY;AAAA,MACzB,kBAAkB,CAAC,MAAM,SAAS;AAChC,cAAM,IAAI,KAAK,aAAa,EAAE;AAC9B,cAAM,WAAW,OAAO,KAAK,SAAS,YAAY,CAAC,CAAC;AACpD,cAAM,UAAU,sBAAsB,SAAS,IAAI,SAAS,EAAE;AAE9D,gBAAQ,cAAc;AACtB,gBAAQ,WAAW,KAAK,KAAK,SAAS,KAAK,KAAK,SAAS,KAAK,GAAG;AAEjE,gBAAQ,YAAY;AACpB,gBAAQ,cAAc;AACtB,gBAAQ,YAAY;AACpB,gBAAQ,eAAe;AACvB,gBAAQ,OAAO;AACf,gBAAQ,YAAY;AACpB,gBAAQ,WAAW,MAAM,SAAS,KAAK,GAAG,SAAS,KAAK,GAAG,SAAS,EAAE;AACtE,gBAAQ,SAAS,MAAM,SAAS,KAAK,GAAG,SAAS,KAAK,GAAG,SAAS,EAAE;AAEnB,QAAC,KAAM;AAAA,UACtD,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AACF;AAEA,IAAO,oBAAQ;",
  "names": []
}
