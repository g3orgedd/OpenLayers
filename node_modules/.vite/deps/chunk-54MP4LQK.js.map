{
  "version": 3,
  "sources": ["../../ol/control/MousePosition.js"],
  "sourcesContent": ["/**\r\n * @module ol/control/MousePosition\r\n */\r\n\r\nimport Control from './Control.js';\r\nimport EventType from '../pointer/EventType.js';\r\nimport {\r\n  get as getProjection,\r\n  getTransformFromProjections,\r\n  getUserProjection,\r\n  identityTransform,\r\n} from '../proj.js';\r\nimport {listen} from '../events.js';\r\n\r\n/**\r\n * @type {string}\r\n */\r\nconst PROJECTION = 'projection';\r\n\r\n/**\r\n * @type {string}\r\n */\r\nconst COORDINATE_FORMAT = 'coordinateFormat';\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\r\n *     'change:coordinateFormat'|'change:projection', import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\r\n *     'change:coordinateFormat'|'change:projection', Return>} MousePositionOnSignature\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-mouse-position'] CSS class name.\r\n * @property {import(\"../coordinate.js\").CoordinateFormat} [coordinateFormat] Coordinate format.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the\r\n * control should be re-rendered. This is called in a `requestAnimationFrame`\r\n * callback.\r\n * @property {HTMLElement|string} [target] Specify a target if you want the\r\n * control to be rendered outside of the map's viewport.\r\n * @property {string} [placeholder] Markup to show when the mouse position is not\r\n * available (e.g. when the pointer leaves the map viewport).  By default, a non-breaking space is rendered\r\n * initially and the last position is retained when the mouse leaves the viewport.\r\n * When a string is provided (e.g. `'no position'` or `''` for an empty string) it is used as a\r\n * placeholder.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A control to show the 2D coordinates of the mouse cursor. By default, these\r\n * are in the view projection, but can be in any supported projection.\r\n * By default the control is shown in the top right corner of the map, but this\r\n * can be changed by using the css selector `.ol-mouse-position`.\r\n *\r\n * On touch devices, which usually do not have a mouse cursor, the coordinates\r\n * of the currently touched position are shown.\r\n *\r\n * @api\r\n */\r\nclass MousePosition extends Control {\r\n  /**\r\n   * @param {Options} [options] Mouse position options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    const element = document.createElement('div');\r\n    element.className =\r\n      options.className !== undefined ? options.className : 'ol-mouse-position';\r\n\r\n    super({\r\n      element: element,\r\n      render: options.render,\r\n      target: options.target,\r\n    });\r\n\r\n    /***\r\n     * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {MousePositionOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    this.addChangeListener(PROJECTION, this.handleProjectionChanged_);\r\n\r\n    if (options.coordinateFormat) {\r\n      this.setCoordinateFormat(options.coordinateFormat);\r\n    }\r\n    if (options.projection) {\r\n      this.setProjection(options.projection);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.renderOnMouseOut_ = options.placeholder !== undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.placeholder_ = this.renderOnMouseOut_ ? options.placeholder : '&#160;';\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.renderedHTML_ = element.innerHTML;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../proj/Projection.js\").default}\r\n     */\r\n    this.mapProjection_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../proj.js\").TransformFunction}\r\n     */\r\n    this.transform_ = null;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleProjectionChanged_() {\r\n    this.transform_ = null;\r\n  }\r\n\r\n  /**\r\n   * Return the coordinate format type used to render the current position or\r\n   * undefined.\r\n   * @return {import(\"../coordinate.js\").CoordinateFormat|undefined} The format to render the current\r\n   *     position in.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getCoordinateFormat() {\r\n    return /** @type {import(\"../coordinate.js\").CoordinateFormat|undefined} */ (\r\n      this.get(COORDINATE_FORMAT)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the projection that is used to report the mouse position.\r\n   * @return {import(\"../proj/Projection.js\").default|undefined} The projection to report mouse\r\n   *     position in.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getProjection() {\r\n    return /** @type {import(\"../proj/Projection.js\").default|undefined} */ (\r\n      this.get(PROJECTION)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} event Browser event.\r\n   * @protected\r\n   */\r\n  handleMouseMove(event) {\r\n    const map = this.getMap();\r\n    this.updateHTML_(map.getEventPixel(event));\r\n  }\r\n\r\n  /**\r\n   * @param {Event} event Browser event.\r\n   * @protected\r\n   */\r\n  handleMouseOut(event) {\r\n    this.updateHTML_(null);\r\n  }\r\n\r\n  /**\r\n   * Remove the control from its current map and attach it to the new map.\r\n   * Pass `null` to just remove the control from the current map.\r\n   * Subclasses may set up event handlers to get notified about changes to\r\n   * the map here.\r\n   * @param {import(\"../Map.js\").default|null} map Map.\r\n   * @api\r\n   */\r\n  setMap(map) {\r\n    super.setMap(map);\r\n    if (map) {\r\n      const viewport = map.getViewport();\r\n      this.listenerKeys.push(\r\n        listen(viewport, EventType.POINTERMOVE, this.handleMouseMove, this)\r\n      );\r\n      if (this.renderOnMouseOut_) {\r\n        this.listenerKeys.push(\r\n          listen(viewport, EventType.POINTEROUT, this.handleMouseOut, this)\r\n        );\r\n      }\r\n      this.updateHTML_(null);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the coordinate format type used to render the current position.\r\n   * @param {import(\"../coordinate.js\").CoordinateFormat} format The format to render the current\r\n   *     position in.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setCoordinateFormat(format) {\r\n    this.set(COORDINATE_FORMAT, format);\r\n  }\r\n\r\n  /**\r\n   * Set the projection that is used to report the mouse position.\r\n   * @param {import(\"../proj.js\").ProjectionLike} projection The projection to report mouse\r\n   *     position in.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setProjection(projection) {\r\n    this.set(PROJECTION, getProjection(projection));\r\n  }\r\n\r\n  /**\r\n   * @param {?import(\"../pixel.js\").Pixel} pixel Pixel.\r\n   * @private\r\n   */\r\n  updateHTML_(pixel) {\r\n    let html = this.placeholder_;\r\n    if (pixel && this.mapProjection_) {\r\n      if (!this.transform_) {\r\n        const projection = this.getProjection();\r\n        if (projection) {\r\n          this.transform_ = getTransformFromProjections(\r\n            this.mapProjection_,\r\n            projection\r\n          );\r\n        } else {\r\n          this.transform_ = identityTransform;\r\n        }\r\n      }\r\n      const map = this.getMap();\r\n      const coordinate = map.getCoordinateFromPixelInternal(pixel);\r\n      if (coordinate) {\r\n        const userProjection = getUserProjection();\r\n        if (userProjection) {\r\n          this.transform_ = getTransformFromProjections(\r\n            this.mapProjection_,\r\n            userProjection\r\n          );\r\n        }\r\n        this.transform_(coordinate, coordinate);\r\n        const coordinateFormat = this.getCoordinateFormat();\r\n        if (coordinateFormat) {\r\n          html = coordinateFormat(coordinate);\r\n        } else {\r\n          html = coordinate.toString();\r\n        }\r\n      }\r\n    }\r\n    if (!this.renderedHTML_ || html !== this.renderedHTML_) {\r\n      this.element.innerHTML = html;\r\n      this.renderedHTML_ = html;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the projection. Rendering of the coordinates is done in\r\n   * `handleMouseMove` and `handleMouseUp`.\r\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\r\n   * @override\r\n   */\r\n  render(mapEvent) {\r\n    const frameState = mapEvent.frameState;\r\n    if (!frameState) {\r\n      this.mapProjection_ = null;\r\n    } else {\r\n      if (this.mapProjection_ != frameState.viewState.projection) {\r\n        this.mapProjection_ = frameState.viewState.projection;\r\n        this.transform_ = null;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default MousePosition;\r\n"],
  "mappings": "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",
  "names": []
}
