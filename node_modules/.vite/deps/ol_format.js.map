{
  "version": 3,
  "sources": ["../../ol/format/EsriJSON.js", "../../ol/xml.js", "../../ol/format/XMLFeature.js", "../../ol/format/GMLBase.js", "../../ol/format/xsd.js", "../../ol/format/GML2.js", "../../ol/format/GML3.js", "../../ol/format/GML.js", "../../ol/format/GPX.js", "../../ol/format/TextFeature.js", "../../ol/format/IGC.js", "../../ol/format/KML.js", "../../ol/format/XML.js", "../../ol/format/xlink.js", "../../ol/format/OWS.js", "../../ol/geom/flat/flip.js", "../../ol/format/Polyline.js", "../../ol/format/TopoJSON.js", "../../ol/format/GML32.js", "../../ol/format/filter/Filter.js", "../../ol/format/filter/LogicalNary.js", "../../ol/format/filter/And.js", "../../ol/format/filter/Bbox.js", "../../ol/format/filter.js", "../../ol/format/WFS.js", "../../ol/format/WKB.js", "../../ol/format/WKT.js", "../../ol/format/WMSCapabilities.js", "../../ol/format/WMSGetFeatureInfo.js", "../../ol/format/WMTSCapabilities.js"],
  "sourcesContent": ["/**\r\n * @module ol/format/EsriJSON\r\n */\r\nimport Feature from '../Feature.js';\r\nimport JSONFeature from './JSONFeature.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport LinearRing from '../geom/LinearRing.js';\r\nimport MultiLineString from '../geom/MultiLineString.js';\r\nimport MultiPoint from '../geom/MultiPoint.js';\r\nimport MultiPolygon from '../geom/MultiPolygon.js';\r\nimport Point from '../geom/Point.js';\r\nimport Polygon from '../geom/Polygon.js';\r\nimport {assert} from '../asserts.js';\r\nimport {containsExtent} from '../extent.js';\r\nimport {deflateCoordinates} from '../geom/flat/deflate.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {isEmpty} from '../obj.js';\r\nimport {linearRingIsClockwise} from '../geom/flat/orient.js';\r\nimport {transformGeometryWithOptions} from './Feature.js';\r\n\r\n/**\r\n * @typedef {import(\"arcgis-rest-api\").Feature} EsriJSONFeature\r\n * @typedef {import(\"arcgis-rest-api\").FeatureSet} EsriJSONFeatureSet\r\n * @typedef {import(\"arcgis-rest-api\").Geometry} EsriJSONGeometry\r\n * @typedef {import(\"arcgis-rest-api\").Point} EsriJSONPoint\r\n * @typedef {import(\"arcgis-rest-api\").Polyline} EsriJSONPolyline\r\n * @typedef {import(\"arcgis-rest-api\").Polygon} EsriJSONPolygon\r\n * @typedef {import(\"arcgis-rest-api\").Multipoint} EsriJSONMultipoint\r\n * @typedef {import(\"arcgis-rest-api\").HasZM} EsriJSONHasZM\r\n * @typedef {import(\"arcgis-rest-api\").Position} EsriJSONPosition\r\n * @typedef {import(\"arcgis-rest-api\").SpatialReferenceWkid} EsriJSONSpatialReferenceWkid\r\n */\r\n\r\n/**\r\n * @typedef {Object} EsriJSONMultiPolygon\r\n * @property {Array<Array<Array<Array<number>>>>} rings Rings for the MultiPolygon.\r\n * @property {boolean} [hasM] If the polygon coordinates have an M value.\r\n * @property {boolean} [hasZ] If the polygon coordinates have a Z value.\r\n * @property {EsriJSONSpatialReferenceWkid} [spatialReference] The coordinate reference system.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {Object<import(\"../geom/Geometry.js\").Type, function(EsriJSONGeometry): import(\"../geom/Geometry.js\").default>}\r\n */\r\nconst GEOMETRY_READERS = {\r\n  Point: readPointGeometry,\r\n  LineString: readLineStringGeometry,\r\n  Polygon: readPolygonGeometry,\r\n  MultiPoint: readMultiPointGeometry,\r\n  MultiLineString: readMultiLineStringGeometry,\r\n  MultiPolygon: readMultiPolygonGeometry,\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<import(\"../geom/Geometry.js\").Type, function(import(\"../geom/Geometry.js\").default, import(\"./Feature.js\").WriteOptions=): (EsriJSONGeometry)>}\r\n */\r\nconst GEOMETRY_WRITERS = {\r\n  Point: writePointGeometry,\r\n  LineString: writeLineStringGeometry,\r\n  Polygon: writePolygonGeometry,\r\n  MultiPoint: writeMultiPointGeometry,\r\n  MultiLineString: writeMultiLineStringGeometry,\r\n  MultiPolygon: writeMultiPolygonGeometry,\r\n};\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [geometryName] Geometry name to use when creating features.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading and writing data in the EsriJSON format.\r\n *\r\n * @api\r\n */\r\nclass EsriJSON extends JSONFeature {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super();\r\n\r\n    /**\r\n     * Name of the geometry attribute for features.\r\n     * @type {string|undefined}\r\n     * @private\r\n     */\r\n    this.geometryName_ = options.geometryName;\r\n  }\r\n\r\n  /**\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @param {string} [idField] Name of the field where to get the id from.\r\n   * @protected\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   */\r\n  readFeatureFromObject(object, options, idField) {\r\n    const esriJSONFeature = /** @type {EsriJSONFeature} */ (object);\r\n    const geometry = readGeometry(esriJSONFeature.geometry, options);\r\n    const feature = new Feature();\r\n    if (this.geometryName_) {\r\n      feature.setGeometryName(this.geometryName_);\r\n    }\r\n    feature.setGeometry(geometry);\r\n    if (esriJSONFeature.attributes) {\r\n      feature.setProperties(esriJSONFeature.attributes, true);\r\n      const id = esriJSONFeature.attributes[idField];\r\n      if (id !== undefined) {\r\n        feature.setId(/** @type {number} */ (id));\r\n      }\r\n    }\r\n    return feature;\r\n  }\r\n\r\n  /**\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<Feature>} Features.\r\n   */\r\n  readFeaturesFromObject(object, options) {\r\n    options = options ? options : {};\r\n    if (object['features']) {\r\n      const esriJSONFeatureSet = /** @type {EsriJSONFeatureSet} */ (object);\r\n      /** @type {Array<import(\"../Feature.js\").default>} */\r\n      const features = [];\r\n      const esriJSONFeatures = esriJSONFeatureSet.features;\r\n      for (let i = 0, ii = esriJSONFeatures.length; i < ii; ++i) {\r\n        features.push(\r\n          this.readFeatureFromObject(\r\n            esriJSONFeatures[i],\r\n            options,\r\n            object.objectIdFieldName\r\n          )\r\n        );\r\n      }\r\n      return features;\r\n    } else {\r\n      return [this.readFeatureFromObject(object, options)];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {EsriJSONGeometry} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometryFromObject(object, options) {\r\n    return readGeometry(object, options);\r\n  }\r\n\r\n  /**\r\n   * @param {Object} object Object.\r\n   * @protected\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   */\r\n  readProjectionFromObject(object) {\r\n    if (\r\n      object['spatialReference'] &&\r\n      object['spatialReference']['wkid'] !== undefined\r\n    ) {\r\n      const spatialReference = /** @type {EsriJSONSpatialReferenceWkid} */ (\r\n        object['spatialReference']\r\n      );\r\n      const crs = spatialReference.wkid;\r\n      return getProjection('EPSG:' + crs);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Encode a geometry as a EsriJSON object.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {EsriJSONGeometry} Object.\r\n   * @api\r\n   */\r\n  writeGeometryObject(geometry, options) {\r\n    return writeGeometry(geometry, this.adaptOptions(options));\r\n  }\r\n\r\n  /**\r\n   * Encode a feature as a esriJSON Feature object.\r\n   *\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {Object} Object.\r\n   * @api\r\n   */\r\n  writeFeatureObject(feature, options) {\r\n    options = this.adaptOptions(options);\r\n    const object = {};\r\n    if (!feature.hasProperties()) {\r\n      object['attributes'] = {};\r\n      return object;\r\n    }\r\n    const properties = feature.getProperties();\r\n    const geometry = feature.getGeometry();\r\n    if (geometry) {\r\n      object['geometry'] = writeGeometry(geometry, options);\r\n      const projection =\r\n        options && (options.dataProjection || options.featureProjection);\r\n      if (projection) {\r\n        object['geometry']['spatialReference'] =\r\n          /** @type {EsriJSONSpatialReferenceWkid} */ ({\r\n            wkid: Number(getProjection(projection).getCode().split(':').pop()),\r\n          });\r\n      }\r\n      delete properties[feature.getGeometryName()];\r\n    }\r\n    if (!isEmpty(properties)) {\r\n      object['attributes'] = properties;\r\n    } else {\r\n      object['attributes'] = {};\r\n    }\r\n    return object;\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features as a EsriJSON object.\r\n   *\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {EsriJSONFeatureSet} EsriJSON Object.\r\n   * @api\r\n   */\r\n  writeFeaturesObject(features, options) {\r\n    options = this.adaptOptions(options);\r\n    const objects = [];\r\n    for (let i = 0, ii = features.length; i < ii; ++i) {\r\n      objects.push(this.writeFeatureObject(features[i], options));\r\n    }\r\n    return {\r\n      'features': objects,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * @param {EsriJSONGeometry} object Object.\r\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n */\r\nfunction readGeometry(object, options) {\r\n  if (!object) {\r\n    return null;\r\n  }\r\n  /** @type {import(\"../geom/Geometry.js\").Type} */\r\n  let type;\r\n  if (typeof object['x'] === 'number' && typeof object['y'] === 'number') {\r\n    type = 'Point';\r\n  } else if (object['points']) {\r\n    type = 'MultiPoint';\r\n  } else if (object['paths']) {\r\n    const esriJSONPolyline = /** @type {EsriJSONPolyline} */ (object);\r\n    if (esriJSONPolyline.paths.length === 1) {\r\n      type = 'LineString';\r\n    } else {\r\n      type = 'MultiLineString';\r\n    }\r\n  } else if (object['rings']) {\r\n    const esriJSONPolygon = /** @type {EsriJSONPolygon} */ (object);\r\n    const layout = getGeometryLayout(esriJSONPolygon);\r\n    const rings = convertRings(esriJSONPolygon.rings, layout);\r\n    if (rings.length === 1) {\r\n      type = 'Polygon';\r\n      object = Object.assign({}, object, {['rings']: rings[0]});\r\n    } else {\r\n      type = 'MultiPolygon';\r\n      object = Object.assign({}, object, {['rings']: rings});\r\n    }\r\n  }\r\n  const geometryReader = GEOMETRY_READERS[type];\r\n  return transformGeometryWithOptions(geometryReader(object), false, options);\r\n}\r\n\r\n/**\r\n * Determines inner and outer rings.\r\n * Checks if any polygons in this array contain any other polygons in this\r\n * array. It is used for checking for holes.\r\n * Logic inspired by: https://github.com/Esri/terraformer-arcgis-parser\r\n * @param {Array<!Array<!Array<number>>>} rings Rings.\r\n * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout Geometry layout.\r\n * @return {Array<!Array<!Array<!Array<number>>>>} Transformed rings.\r\n */\r\nfunction convertRings(rings, layout) {\r\n  const flatRing = [];\r\n  const outerRings = [];\r\n  const holes = [];\r\n  let i, ii;\r\n  for (i = 0, ii = rings.length; i < ii; ++i) {\r\n    flatRing.length = 0;\r\n    deflateCoordinates(flatRing, 0, rings[i], layout.length);\r\n    // is this ring an outer ring? is it clockwise?\r\n    const clockwise = linearRingIsClockwise(\r\n      flatRing,\r\n      0,\r\n      flatRing.length,\r\n      layout.length\r\n    );\r\n    if (clockwise) {\r\n      outerRings.push([rings[i]]);\r\n    } else {\r\n      holes.push(rings[i]);\r\n    }\r\n  }\r\n  while (holes.length) {\r\n    const hole = holes.shift();\r\n    let matched = false;\r\n    // loop over all outer rings and see if they contain our hole.\r\n    for (i = outerRings.length - 1; i >= 0; i--) {\r\n      const outerRing = outerRings[i][0];\r\n      const containsHole = containsExtent(\r\n        new LinearRing(outerRing).getExtent(),\r\n        new LinearRing(hole).getExtent()\r\n      );\r\n      if (containsHole) {\r\n        // the hole is contained push it into our polygon\r\n        outerRings[i].push(hole);\r\n        matched = true;\r\n        break;\r\n      }\r\n    }\r\n    if (!matched) {\r\n      // no outer rings contain this hole turn it into and outer\r\n      // ring (reverse it)\r\n      outerRings.push([hole.reverse()]);\r\n    }\r\n  }\r\n  return outerRings;\r\n}\r\n\r\n/**\r\n * @param {EsriJSONPoint} object Object.\r\n * @return {import(\"../geom/Geometry.js\").default} Point.\r\n */\r\nfunction readPointGeometry(object) {\r\n  let point;\r\n  if (object.m !== undefined && object.z !== undefined) {\r\n    point = new Point([object.x, object.y, object.z, object.m], 'XYZM');\r\n  } else if (object.z !== undefined) {\r\n    point = new Point([object.x, object.y, object.z], 'XYZ');\r\n  } else if (object.m !== undefined) {\r\n    point = new Point([object.x, object.y, object.m], 'XYM');\r\n  } else {\r\n    point = new Point([object.x, object.y]);\r\n  }\r\n  return point;\r\n}\r\n\r\n/**\r\n * @param {EsriJSONPolyline} object Object.\r\n * @return {import(\"../geom/Geometry.js\").default} LineString.\r\n */\r\nfunction readLineStringGeometry(object) {\r\n  const layout = getGeometryLayout(object);\r\n  return new LineString(object.paths[0], layout);\r\n}\r\n\r\n/**\r\n * @param {EsriJSONPolyline} object Object.\r\n * @return {import(\"../geom/Geometry.js\").default} MultiLineString.\r\n */\r\nfunction readMultiLineStringGeometry(object) {\r\n  const layout = getGeometryLayout(object);\r\n  return new MultiLineString(object.paths, layout);\r\n}\r\n\r\n/**\r\n * @param {EsriJSONHasZM} object Object.\r\n * @return {import(\"../geom/Geometry.js\").GeometryLayout} The geometry layout to use.\r\n */\r\nfunction getGeometryLayout(object) {\r\n  /** @type {import(\"../geom/Geometry.js\").GeometryLayout} */\r\n  let layout = 'XY';\r\n  if (object.hasZ === true && object.hasM === true) {\r\n    layout = 'XYZM';\r\n  } else if (object.hasZ === true) {\r\n    layout = 'XYZ';\r\n  } else if (object.hasM === true) {\r\n    layout = 'XYM';\r\n  }\r\n  return layout;\r\n}\r\n\r\n/**\r\n * @param {EsriJSONMultipoint} object Object.\r\n * @return {import(\"../geom/Geometry.js\").default} MultiPoint.\r\n */\r\nfunction readMultiPointGeometry(object) {\r\n  const layout = getGeometryLayout(object);\r\n  return new MultiPoint(object.points, layout);\r\n}\r\n\r\n/**\r\n * @param {EsriJSONMultiPolygon} object Object.\r\n * @return {import(\"../geom/Geometry.js\").default} MultiPolygon.\r\n */\r\nfunction readMultiPolygonGeometry(object) {\r\n  const layout = getGeometryLayout(object);\r\n  return new MultiPolygon(object.rings, layout);\r\n}\r\n\r\n/**\r\n * @param {EsriJSONPolygon} object Object.\r\n * @return {import(\"../geom/Geometry.js\").default} Polygon.\r\n */\r\nfunction readPolygonGeometry(object) {\r\n  const layout = getGeometryLayout(object);\r\n  return new Polygon(object.rings, layout);\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/Point.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {EsriJSONPoint} EsriJSON geometry.\r\n */\r\nfunction writePointGeometry(geometry, options) {\r\n  const coordinates = geometry.getCoordinates();\r\n  /** @type {EsriJSONPoint} */\r\n  let esriJSON;\r\n  const layout = geometry.getLayout();\r\n  if (layout === 'XYZ') {\r\n    esriJSON = {\r\n      x: coordinates[0],\r\n      y: coordinates[1],\r\n      z: coordinates[2],\r\n    };\r\n  } else if (layout === 'XYM') {\r\n    esriJSON = {\r\n      x: coordinates[0],\r\n      y: coordinates[1],\r\n      m: coordinates[2],\r\n    };\r\n  } else if (layout === 'XYZM') {\r\n    esriJSON = {\r\n      x: coordinates[0],\r\n      y: coordinates[1],\r\n      z: coordinates[2],\r\n      m: coordinates[3],\r\n    };\r\n  } else if (layout === 'XY') {\r\n    esriJSON = {\r\n      x: coordinates[0],\r\n      y: coordinates[1],\r\n    };\r\n  } else {\r\n    assert(false, 34); // Invalid geometry layout\r\n  }\r\n  return esriJSON;\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n * @return {Object} Object with boolean hasZ and hasM keys.\r\n */\r\nfunction getHasZM(geometry) {\r\n  const layout = geometry.getLayout();\r\n  return {\r\n    hasZ: layout === 'XYZ' || layout === 'XYZM',\r\n    hasM: layout === 'XYM' || layout === 'XYZM',\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/LineString.js\").default} lineString Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {EsriJSONPolyline} EsriJSON geometry.\r\n */\r\nfunction writeLineStringGeometry(lineString, options) {\r\n  const hasZM = getHasZM(lineString);\r\n  return {\r\n    hasZ: hasZM.hasZ,\r\n    hasM: hasZM.hasM,\r\n    paths: [\r\n      /** @type {Array<EsriJSONPosition>} */ (lineString.getCoordinates()),\r\n    ],\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/Polygon.js\").default} polygon Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {EsriJSONPolygon} EsriJSON geometry.\r\n */\r\nfunction writePolygonGeometry(polygon, options) {\r\n  // Esri geometries use the left-hand rule\r\n  const hasZM = getHasZM(polygon);\r\n  return {\r\n    hasZ: hasZM.hasZ,\r\n    hasM: hasZM.hasM,\r\n    rings: /** @type {Array<Array<EsriJSONPosition>>} */ (\r\n      polygon.getCoordinates(false)\r\n    ),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/MultiLineString.js\").default} multiLineString Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {EsriJSONPolyline} EsriJSON geometry.\r\n */\r\nfunction writeMultiLineStringGeometry(multiLineString, options) {\r\n  const hasZM = getHasZM(multiLineString);\r\n  return {\r\n    hasZ: hasZM.hasZ,\r\n    hasM: hasZM.hasM,\r\n    paths: /** @type {Array<Array<EsriJSONPosition>>} */ (\r\n      multiLineString.getCoordinates()\r\n    ),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/MultiPoint.js\").default} multiPoint Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {EsriJSONMultipoint} EsriJSON geometry.\r\n */\r\nfunction writeMultiPointGeometry(multiPoint, options) {\r\n  const hasZM = getHasZM(multiPoint);\r\n  return {\r\n    hasZ: hasZM.hasZ,\r\n    hasM: hasZM.hasM,\r\n    points: /** @type {Array<EsriJSONPosition>} */ (\r\n      multiPoint.getCoordinates()\r\n    ),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {EsriJSONPolygon} EsriJSON geometry.\r\n */\r\nfunction writeMultiPolygonGeometry(geometry, options) {\r\n  const hasZM = getHasZM(geometry);\r\n  const coordinates = geometry.getCoordinates(false);\r\n  const output = [];\r\n  for (let i = 0; i < coordinates.length; i++) {\r\n    for (let x = coordinates[i].length - 1; x >= 0; x--) {\r\n      output.push(coordinates[i][x]);\r\n    }\r\n  }\r\n  return {\r\n    hasZ: hasZM.hasZ,\r\n    hasM: hasZM.hasM,\r\n    rings: /** @type {Array<Array<EsriJSONPosition>>} */ (output),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {EsriJSONGeometry} EsriJSON geometry.\r\n */\r\nfunction writeGeometry(geometry, options) {\r\n  const geometryWriter = GEOMETRY_WRITERS[geometry.getType()];\r\n  return geometryWriter(\r\n    transformGeometryWithOptions(geometry, true, options),\r\n    options\r\n  );\r\n}\r\n\r\nexport default EsriJSON;\r\n", "/**\r\n * @module ol/xml\r\n */\r\nimport {extend} from './array.js';\r\n\r\n/**\r\n * When using {@link module:ol/xml.makeChildAppender} or\r\n * {@link module:ol/xml.makeSimpleNodeFactory}, the top `objectStack` item needs\r\n * to have this structure.\r\n * @typedef {Object} NodeStackItem\r\n * @property {Element} node Node.\r\n */\r\n\r\n/**\r\n * @typedef {function(Element, Array<*>): void} Parser\r\n */\r\n\r\n/**\r\n * @typedef {function(Element, *, Array<*>): void} Serializer\r\n */\r\n\r\n/**\r\n * @type {string}\r\n */\r\nexport const XML_SCHEMA_INSTANCE_URI =\r\n  'http://www.w3.org/2001/XMLSchema-instance';\r\n\r\n/**\r\n * @param {string} namespaceURI Namespace URI.\r\n * @param {string} qualifiedName Qualified name.\r\n * @return {Element} Node.\r\n */\r\nexport function createElementNS(namespaceURI, qualifiedName) {\r\n  return getDocument().createElementNS(namespaceURI, qualifiedName);\r\n}\r\n\r\n/**\r\n * Recursively grab all text content of child nodes into a single string.\r\n * @param {Node} node Node.\r\n * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line\r\n * breaks.\r\n * @return {string} All text content.\r\n * @api\r\n */\r\nexport function getAllTextContent(node, normalizeWhitespace) {\r\n  return getAllTextContent_(node, normalizeWhitespace, []).join('');\r\n}\r\n\r\n/**\r\n * Recursively grab all text content of child nodes into a single string.\r\n * @param {Node} node Node.\r\n * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line\r\n * breaks.\r\n * @param {Array<string>} accumulator Accumulator.\r\n * @private\r\n * @return {Array<string>} Accumulator.\r\n */\r\nexport function getAllTextContent_(node, normalizeWhitespace, accumulator) {\r\n  if (\r\n    node.nodeType == Node.CDATA_SECTION_NODE ||\r\n    node.nodeType == Node.TEXT_NODE\r\n  ) {\r\n    if (normalizeWhitespace) {\r\n      accumulator.push(String(node.nodeValue).replace(/(\\r\\n|\\r|\\n)/g, ''));\r\n    } else {\r\n      accumulator.push(node.nodeValue);\r\n    }\r\n  } else {\r\n    let n;\r\n    for (n = node.firstChild; n; n = n.nextSibling) {\r\n      getAllTextContent_(n, normalizeWhitespace, accumulator);\r\n    }\r\n  }\r\n  return accumulator;\r\n}\r\n\r\n/**\r\n * @param {Object} object Object.\r\n * @return {boolean} Is a document.\r\n */\r\nexport function isDocument(object) {\r\n  return 'documentElement' in object;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {?string} namespaceURI Namespace URI.\r\n * @param {string} name Attribute name.\r\n * @return {string} Value\r\n */\r\nexport function getAttributeNS(node, namespaceURI, name) {\r\n  return node.getAttributeNS(namespaceURI, name) || '';\r\n}\r\n\r\n/**\r\n * Parse an XML string to an XML Document.\r\n * @param {string} xml XML.\r\n * @return {Document} Document.\r\n * @api\r\n */\r\nexport function parse(xml) {\r\n  return new DOMParser().parseFromString(xml, 'application/xml');\r\n}\r\n\r\n/**\r\n * Make an array extender function for extending the array at the top of the\r\n * object stack.\r\n * @param {function(this: T, Node, Array<*>): (Array<*>|undefined)} valueReader Value reader.\r\n * @param {T} [thisArg] The object to use as `this` in `valueReader`.\r\n * @return {Parser} Parser.\r\n * @template T\r\n */\r\nexport function makeArrayExtender(valueReader, thisArg) {\r\n  return (\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function (node, objectStack) {\r\n      const value = valueReader.call(\r\n        thisArg !== undefined ? thisArg : this,\r\n        node,\r\n        objectStack\r\n      );\r\n      if (value !== undefined) {\r\n        const array = /** @type {Array<*>} */ (\r\n          objectStack[objectStack.length - 1]\r\n        );\r\n        extend(array, value);\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * Make an array pusher function for pushing to the array at the top of the\r\n * object stack.\r\n * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.\r\n * @param {T} [thisArg] The object to use as `this` in `valueReader`.\r\n * @return {Parser} Parser.\r\n * @template T\r\n */\r\nexport function makeArrayPusher(valueReader, thisArg) {\r\n  return (\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function (node, objectStack) {\r\n      const value = valueReader.call(\r\n        thisArg !== undefined ? thisArg : this,\r\n        node,\r\n        objectStack\r\n      );\r\n      if (value !== undefined) {\r\n        const array = /** @type {Array<*>} */ (\r\n          objectStack[objectStack.length - 1]\r\n        );\r\n        array.push(value);\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * Make an object stack replacer function for replacing the object at the\r\n * top of the stack.\r\n * @param {function(this: T, Node, Array<*>): *} valueReader Value reader.\r\n * @param {T} [thisArg] The object to use as `this` in `valueReader`.\r\n * @return {Parser} Parser.\r\n * @template T\r\n */\r\nexport function makeReplacer(valueReader, thisArg) {\r\n  return (\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function (node, objectStack) {\r\n      const value = valueReader.call(\r\n        thisArg !== undefined ? thisArg : this,\r\n        node,\r\n        objectStack\r\n      );\r\n      if (value !== undefined) {\r\n        objectStack[objectStack.length - 1] = value;\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * Make an object property pusher function for adding a property to the\r\n * object at the top of the stack.\r\n * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.\r\n * @param {string} [property] Property.\r\n * @param {T} [thisArg] The object to use as `this` in `valueReader`.\r\n * @return {Parser} Parser.\r\n * @template T\r\n */\r\nexport function makeObjectPropertyPusher(valueReader, property, thisArg) {\r\n  return (\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function (node, objectStack) {\r\n      const value = valueReader.call(\r\n        thisArg !== undefined ? thisArg : this,\r\n        node,\r\n        objectStack\r\n      );\r\n      if (value !== undefined) {\r\n        const object = /** @type {!Object} */ (\r\n          objectStack[objectStack.length - 1]\r\n        );\r\n        const name = property !== undefined ? property : node.localName;\r\n        let array;\r\n        if (name in object) {\r\n          array = object[name];\r\n        } else {\r\n          array = [];\r\n          object[name] = array;\r\n        }\r\n        array.push(value);\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * Make an object property setter function.\r\n * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.\r\n * @param {string} [property] Property.\r\n * @param {T} [thisArg] The object to use as `this` in `valueReader`.\r\n * @return {Parser} Parser.\r\n * @template T\r\n */\r\nexport function makeObjectPropertySetter(valueReader, property, thisArg) {\r\n  return (\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function (node, objectStack) {\r\n      const value = valueReader.call(\r\n        thisArg !== undefined ? thisArg : this,\r\n        node,\r\n        objectStack\r\n      );\r\n      if (value !== undefined) {\r\n        const object = /** @type {!Object} */ (\r\n          objectStack[objectStack.length - 1]\r\n        );\r\n        const name = property !== undefined ? property : node.localName;\r\n        object[name] = value;\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * Create a serializer that appends nodes written by its `nodeWriter` to its\r\n * designated parent. The parent is the `node` of the\r\n * {@link module:ol/xml~NodeStackItem} at the top of the `objectStack`.\r\n * @param {function(this: T, Node, V, Array<*>): void} nodeWriter Node writer.\r\n * @param {T} [thisArg] The object to use as `this` in `nodeWriter`.\r\n * @return {Serializer} Serializer.\r\n * @template T, V\r\n */\r\nexport function makeChildAppender(nodeWriter, thisArg) {\r\n  return function (node, value, objectStack) {\r\n    nodeWriter.call(\r\n      thisArg !== undefined ? thisArg : this,\r\n      node,\r\n      value,\r\n      objectStack\r\n    );\r\n    const parent = /** @type {NodeStackItem} */ (\r\n      objectStack[objectStack.length - 1]\r\n    );\r\n    const parentNode = parent.node;\r\n    parentNode.appendChild(node);\r\n  };\r\n}\r\n\r\n/**\r\n * Create a serializer that calls the provided `nodeWriter` from\r\n * {@link module:ol/xml.serialize}. This can be used by the parent writer to have the\r\n * `nodeWriter` called with an array of values when the `nodeWriter` was\r\n * designed to serialize a single item. An example would be a LineString\r\n * geometry writer, which could be reused for writing MultiLineString\r\n * geometries.\r\n * @param {function(this: T, Element, V, Array<*>): void} nodeWriter Node writer.\r\n * @param {T} [thisArg] The object to use as `this` in `nodeWriter`.\r\n * @return {Serializer} Serializer.\r\n * @template T, V\r\n */\r\nexport function makeArraySerializer(nodeWriter, thisArg) {\r\n  let serializersNS, nodeFactory;\r\n  return function (node, value, objectStack) {\r\n    if (serializersNS === undefined) {\r\n      serializersNS = {};\r\n      const serializers = {};\r\n      serializers[node.localName] = nodeWriter;\r\n      serializersNS[node.namespaceURI] = serializers;\r\n      nodeFactory = makeSimpleNodeFactory(node.localName);\r\n    }\r\n    serialize(serializersNS, nodeFactory, value, objectStack);\r\n  };\r\n}\r\n\r\n/**\r\n * Create a node factory which can use the `keys` passed to\r\n * {@link module:ol/xml.serialize} or {@link module:ol/xml.pushSerializeAndPop} as node names,\r\n * or a fixed node name. The namespace of the created nodes can either be fixed,\r\n * or the parent namespace will be used.\r\n * @param {string} [fixedNodeName] Fixed node name which will be used for all\r\n *     created nodes. If not provided, the 3rd argument to the resulting node\r\n *     factory needs to be provided and will be the nodeName.\r\n * @param {string} [fixedNamespaceURI] Fixed namespace URI which will be used for\r\n *     all created nodes. If not provided, the namespace of the parent node will\r\n *     be used.\r\n * @return {function(*, Array<*>, string=): (Node|undefined)} Node factory.\r\n */\r\nexport function makeSimpleNodeFactory(fixedNodeName, fixedNamespaceURI) {\r\n  return (\r\n    /**\r\n     * @param {*} value Value.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @param {string} [newNodeName] Node name.\r\n     * @return {Node} Node.\r\n     */\r\n    function (value, objectStack, newNodeName) {\r\n      const context = /** @type {NodeStackItem} */ (\r\n        objectStack[objectStack.length - 1]\r\n      );\r\n      const node = context.node;\r\n      let nodeName = fixedNodeName;\r\n      if (nodeName === undefined) {\r\n        nodeName = newNodeName;\r\n      }\r\n\r\n      const namespaceURI =\r\n        fixedNamespaceURI !== undefined ? fixedNamespaceURI : node.namespaceURI;\r\n      return createElementNS(namespaceURI, /** @type {string} */ (nodeName));\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * A node factory that creates a node using the parent's `namespaceURI` and the\r\n * `nodeName` passed by {@link module:ol/xml.serialize} or\r\n * {@link module:ol/xml.pushSerializeAndPop} to the node factory.\r\n * @const\r\n * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n */\r\nexport const OBJECT_PROPERTY_NODE_FACTORY = makeSimpleNodeFactory();\r\n\r\n/**\r\n * Create an array of `values` to be used with {@link module:ol/xml.serialize} or\r\n * {@link module:ol/xml.pushSerializeAndPop}, where `orderedKeys` has to be provided as\r\n * `key` argument.\r\n * @param {Object<string, *>} object Key-value pairs for the sequence. Keys can\r\n *     be a subset of the `orderedKeys`.\r\n * @param {Array<string>} orderedKeys Keys in the order of the sequence.\r\n * @return {Array<*>} Values in the order of the sequence. The resulting array\r\n *     has the same length as the `orderedKeys` array. Values that are not\r\n *     present in `object` will be `undefined` in the resulting array.\r\n */\r\nexport function makeSequence(object, orderedKeys) {\r\n  const length = orderedKeys.length;\r\n  const sequence = new Array(length);\r\n  for (let i = 0; i < length; ++i) {\r\n    sequence[i] = object[orderedKeys[i]];\r\n  }\r\n  return sequence;\r\n}\r\n\r\n/**\r\n * Create a namespaced structure, using the same values for each namespace.\r\n * This can be used as a starting point for versioned parsers, when only a few\r\n * values are version specific.\r\n * @param {Array<string>} namespaceURIs Namespace URIs.\r\n * @param {T} structure Structure.\r\n * @param {Object<string, T>} [structureNS] Namespaced structure to add to.\r\n * @return {Object<string, T>} Namespaced structure.\r\n * @template T\r\n */\r\nexport function makeStructureNS(namespaceURIs, structure, structureNS) {\r\n  structureNS = structureNS !== undefined ? structureNS : {};\r\n  let i, ii;\r\n  for (i = 0, ii = namespaceURIs.length; i < ii; ++i) {\r\n    structureNS[namespaceURIs[i]] = structure;\r\n  }\r\n  return structureNS;\r\n}\r\n\r\n/**\r\n * Parse a node using the parsers and object stack.\r\n * @param {Object<string, Object<string, Parser>>} parsersNS\r\n *     Parsers by namespace.\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @param {*} [thisArg] The object to use as `this`.\r\n */\r\nexport function parseNode(parsersNS, node, objectStack, thisArg) {\r\n  let n;\r\n  for (n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n    const parsers = parsersNS[n.namespaceURI];\r\n    if (parsers !== undefined) {\r\n      const parser = parsers[n.localName];\r\n      if (parser !== undefined) {\r\n        parser.call(thisArg, n, objectStack);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Push an object on top of the stack, parse and return the popped object.\r\n * @param {T} object Object.\r\n * @param {Object<string, Object<string, Parser>>} parsersNS\r\n *     Parsers by namespace.\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @param {*} [thisArg] The object to use as `this`.\r\n * @return {T} Object.\r\n * @template T\r\n */\r\nexport function pushParseAndPop(object, parsersNS, node, objectStack, thisArg) {\r\n  objectStack.push(object);\r\n  parseNode(parsersNS, node, objectStack, thisArg);\r\n  return /** @type {T} */ (objectStack.pop());\r\n}\r\n\r\n/**\r\n * Walk through an array of `values` and call a serializer for each value.\r\n * @param {Object<string, Object<string, Serializer>>} serializersNS\r\n *     Namespaced serializers.\r\n * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory\r\n *     Node factory. The `nodeFactory` creates the node whose namespace and name\r\n *     will be used to choose a node writer from `serializersNS`. This\r\n *     separation allows us to decide what kind of node to create, depending on\r\n *     the value we want to serialize. An example for this would be different\r\n *     geometry writers based on the geometry type.\r\n * @param {Array<*>} values Values to serialize. An example would be an array\r\n *     of {@link module:ol/Feature~Feature} instances.\r\n * @param {Array<*>} objectStack Node stack.\r\n * @param {Array<string>} [keys] Keys of the `values`. Will be passed to the\r\n *     `nodeFactory`. This is used for serializing object literals where the\r\n *     node name relates to the property key. The array length of `keys` has\r\n *     to match the length of `values`. For serializing a sequence, `keys`\r\n *     determines the order of the sequence.\r\n * @param {T} [thisArg] The object to use as `this` for the node factory and\r\n *     serializers.\r\n * @template T\r\n */\r\nexport function serialize(\r\n  serializersNS,\r\n  nodeFactory,\r\n  values,\r\n  objectStack,\r\n  keys,\r\n  thisArg\r\n) {\r\n  const length = (keys !== undefined ? keys : values).length;\r\n  let value, node;\r\n  for (let i = 0; i < length; ++i) {\r\n    value = values[i];\r\n    if (value !== undefined) {\r\n      node = nodeFactory.call(\r\n        thisArg !== undefined ? thisArg : this,\r\n        value,\r\n        objectStack,\r\n        keys !== undefined ? keys[i] : undefined\r\n      );\r\n      if (node !== undefined) {\r\n        serializersNS[node.namespaceURI][node.localName].call(\r\n          thisArg,\r\n          node,\r\n          value,\r\n          objectStack\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {O} object Object.\r\n * @param {Object<string, Object<string, Serializer>>} serializersNS\r\n *     Namespaced serializers.\r\n * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory\r\n *     Node factory. The `nodeFactory` creates the node whose namespace and name\r\n *     will be used to choose a node writer from `serializersNS`. This\r\n *     separation allows us to decide what kind of node to create, depending on\r\n *     the value we want to serialize. An example for this would be different\r\n *     geometry writers based on the geometry type.\r\n * @param {Array<*>} values Values to serialize. An example would be an array\r\n *     of {@link module:ol/Feature~Feature} instances.\r\n * @param {Array<*>} objectStack Node stack.\r\n * @param {Array<string>} [keys] Keys of the `values`. Will be passed to the\r\n *     `nodeFactory`. This is used for serializing object literals where the\r\n *     node name relates to the property key. The array length of `keys` has\r\n *     to match the length of `values`. For serializing a sequence, `keys`\r\n *     determines the order of the sequence.\r\n * @param {T} [thisArg] The object to use as `this` for the node factory and\r\n *     serializers.\r\n * @return {O|undefined} Object.\r\n * @template O, T\r\n */\r\nexport function pushSerializeAndPop(\r\n  object,\r\n  serializersNS,\r\n  nodeFactory,\r\n  values,\r\n  objectStack,\r\n  keys,\r\n  thisArg\r\n) {\r\n  objectStack.push(object);\r\n  serialize(serializersNS, nodeFactory, values, objectStack, keys, thisArg);\r\n  return /** @type {O|undefined} */ (objectStack.pop());\r\n}\r\n\r\nlet xmlSerializer_ = undefined;\r\n\r\n/**\r\n * Register a XMLSerializer. Can be used  to inject a XMLSerializer\r\n * where there is no globally available implementation.\r\n *\r\n * @param {XMLSerializer} xmlSerializer A XMLSerializer.\r\n * @api\r\n */\r\nexport function registerXMLSerializer(xmlSerializer) {\r\n  xmlSerializer_ = xmlSerializer;\r\n}\r\n\r\n/**\r\n * @return {XMLSerializer} The XMLSerializer.\r\n */\r\nexport function getXMLSerializer() {\r\n  if (xmlSerializer_ === undefined && typeof XMLSerializer !== 'undefined') {\r\n    xmlSerializer_ = new XMLSerializer();\r\n  }\r\n  return xmlSerializer_;\r\n}\r\n\r\nlet document_ = undefined;\r\n\r\n/**\r\n * Register a Document to use when creating nodes for XML serializations. Can be used\r\n * to inject a Document where there is no globally available implementation.\r\n *\r\n * @param {Document} document A Document.\r\n * @api\r\n */\r\nexport function registerDocument(document) {\r\n  document_ = document;\r\n}\r\n\r\n/**\r\n * Get a document that should be used when creating nodes for XML serializations.\r\n * @return {Document} The document.\r\n */\r\nexport function getDocument() {\r\n  if (document_ === undefined && typeof document !== 'undefined') {\r\n    document_ = document.implementation.createDocument('', '', null);\r\n  }\r\n  return document_;\r\n}\r\n", "/**\r\n * @module ol/format/XMLFeature\r\n */\r\nimport FeatureFormat from '../format/Feature.js';\r\nimport {abstract} from '../util.js';\r\nimport {extend} from '../array.js';\r\nimport {getXMLSerializer, isDocument, parse} from '../xml.js';\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for XML feature formats.\r\n *\r\n * @abstract\r\n */\r\nclass XMLFeature extends FeatureFormat {\r\n  constructor() {\r\n    super();\r\n\r\n    /**\r\n     * @type {XMLSerializer}\r\n     * @private\r\n     */\r\n    this.xmlSerializer_ = getXMLSerializer();\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./Feature.js\").Type} Format.\r\n   */\r\n  getType() {\r\n    return 'xml';\r\n  }\r\n\r\n  /**\r\n   * Read a single feature.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   * @api\r\n   */\r\n  readFeature(source, options) {\r\n    if (!source) {\r\n      return null;\r\n    } else if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      return this.readFeatureFromDocument(doc, options);\r\n    } else if (isDocument(source)) {\r\n      return this.readFeatureFromDocument(\r\n        /** @type {Document} */ (source),\r\n        options\r\n      );\r\n    } else {\r\n      return this.readFeatureFromNode(/** @type {Element} */ (source), options);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   */\r\n  readFeatureFromDocument(doc, options) {\r\n    const features = this.readFeaturesFromDocument(doc, options);\r\n    if (features.length > 0) {\r\n      return features[0];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   */\r\n  readFeatureFromNode(node, options) {\r\n    return null; // not implemented\r\n  }\r\n\r\n  /**\r\n   * Read all features from a feature collection.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   * @api\r\n   */\r\n  readFeatures(source, options) {\r\n    if (!source) {\r\n      return [];\r\n    } else if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      return this.readFeaturesFromDocument(doc, options);\r\n    } else if (isDocument(source)) {\r\n      return this.readFeaturesFromDocument(\r\n        /** @type {Document} */ (source),\r\n        options\r\n      );\r\n    } else {\r\n      return this.readFeaturesFromNode(\r\n        /** @type {Element} */ (source),\r\n        options\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @protected\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   */\r\n  readFeaturesFromDocument(doc, options) {\r\n    /** @type {Array<import(\"../Feature.js\").default>} */\r\n    const features = [];\r\n    for (let n = doc.firstChild; n; n = n.nextSibling) {\r\n      if (n.nodeType == Node.ELEMENT_NODE) {\r\n        extend(\r\n          features,\r\n          this.readFeaturesFromNode(/** @type {Element} */ (n), options)\r\n        );\r\n      }\r\n    }\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @protected\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   */\r\n  readFeaturesFromNode(node, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read a single geometry from a source.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometry(source, options) {\r\n    if (!source) {\r\n      return null;\r\n    } else if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      return this.readGeometryFromDocument(doc, options);\r\n    } else if (isDocument(source)) {\r\n      return this.readGeometryFromDocument(\r\n        /** @type {Document} */ (source),\r\n        options\r\n      );\r\n    } else {\r\n      return this.readGeometryFromNode(\r\n        /** @type {Element} */ (source),\r\n        options\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometryFromDocument(doc, options) {\r\n    return null; // not implemented\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometryFromNode(node, options) {\r\n    return null; // not implemented\r\n  }\r\n\r\n  /**\r\n   * Read the projection from the source.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   * @api\r\n   */\r\n  readProjection(source) {\r\n    if (!source) {\r\n      return null;\r\n    } else if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      return this.readProjectionFromDocument(doc);\r\n    } else if (isDocument(source)) {\r\n      return this.readProjectionFromDocument(/** @type {Document} */ (source));\r\n    } else {\r\n      return this.readProjectionFromNode(/** @type {Element} */ (source));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @protected\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   */\r\n  readProjectionFromDocument(doc) {\r\n    return this.dataProjection;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @protected\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   */\r\n  readProjectionFromNode(node) {\r\n    return this.dataProjection;\r\n  }\r\n\r\n  /**\r\n   * Encode a feature as string.\r\n   *\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded feature.\r\n   */\r\n  writeFeature(feature, options) {\r\n    const node = this.writeFeatureNode(feature, options);\r\n    return this.xmlSerializer_.serializeToString(node);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\r\n   * @protected\r\n   * @return {Node} Node.\r\n   */\r\n  writeFeatureNode(feature, options) {\r\n    return null; // not implemented\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features as string.\r\n   *\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Result.\r\n   * @api\r\n   */\r\n  writeFeatures(features, options) {\r\n    const node = this.writeFeaturesNode(features, options);\r\n    return this.xmlSerializer_.serializeToString(node);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\r\n   * @return {Node} Node.\r\n   */\r\n  writeFeaturesNode(features, options) {\r\n    return null; // not implemented\r\n  }\r\n\r\n  /**\r\n   * Encode a geometry as string.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded geometry.\r\n   */\r\n  writeGeometry(geometry, options) {\r\n    const node = this.writeGeometryNode(geometry, options);\r\n    return this.xmlSerializer_.serializeToString(node);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\r\n   * @return {Node} Node.\r\n   */\r\n  writeGeometryNode(geometry, options) {\r\n    return null; // not implemented\r\n  }\r\n}\r\n\r\nexport default XMLFeature;\r\n", "/**\r\n * @module ol/format/GMLBase\r\n */\r\n// FIXME Envelopes should not be treated as geometries! readEnvelope_ is part\r\n// of GEOMETRY_PARSERS_ and methods using GEOMETRY_PARSERS_ do not expect\r\n// envelopes/extents, only geometries!\r\nimport Feature from '../Feature.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport LinearRing from '../geom/LinearRing.js';\r\nimport MultiLineString from '../geom/MultiLineString.js';\r\nimport MultiPoint from '../geom/MultiPoint.js';\r\nimport MultiPolygon from '../geom/MultiPolygon.js';\r\nimport Point from '../geom/Point.js';\r\nimport Polygon from '../geom/Polygon.js';\r\nimport XMLFeature from './XMLFeature.js';\r\nimport {extend} from '../array.js';\r\nimport {\r\n  getAllTextContent,\r\n  getAttributeNS,\r\n  makeArrayPusher,\r\n  makeReplacer,\r\n  parseNode,\r\n  pushParseAndPop,\r\n} from '../xml.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {\r\n  transformExtentWithOptions,\r\n  transformGeometryWithOptions,\r\n} from './Feature.js';\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nexport const GMLNS = 'http://www.opengis.net/gml';\r\n\r\n/**\r\n * A regular expression that matches if a string only contains whitespace\r\n * characters. It will e.g. match `''`, `' '`, `'\\n'` etc.\r\n *\r\n * @const\r\n * @type {RegExp}\r\n */\r\nconst ONLY_WHITESPACE_RE = /^\\s*$/;\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Object<string, string>|string} [featureNS] Feature\r\n * namespace. If not defined will be derived from GML. If multiple\r\n * feature types have been configured which come from different feature\r\n * namespaces, this will be an object with the keys being the prefixes used\r\n * in the entries of featureType array. The values of the object will be the\r\n * feature namespaces themselves. So for instance there might be a featureType\r\n * item `topp:states` in the `featureType` array and then there will be a key\r\n * `topp` in the featureNS object with value `http://www.openplans.org/topp`.\r\n * @property {Array<string>|string} [featureType] Feature type(s) to parse.\r\n * If multiple feature types need to be configured\r\n * which come from different feature namespaces, `featureNS` will be an object\r\n * with the keys being the prefixes used in the entries of featureType array.\r\n * The values of the object will be the feature namespaces themselves.\r\n * So for instance there might be a featureType item `topp:states` and then\r\n * there will be a key named `topp` in the featureNS object with value\r\n * `http://www.openplans.org/topp`.\r\n * @property {string} [srsName] srsName to use when writing geometries.\r\n * @property {boolean} [surface=false] Write gml:Surface instead of gml:Polygon\r\n * elements. This also affects the elements in multi-part geometries.\r\n * @property {boolean} [curve=false] Write gml:Curve instead of gml:LineString\r\n * elements. This also affects the elements in multi-part geometries.\r\n * @property {boolean} [multiCurve=true] Write gml:MultiCurve instead of gml:MultiLineString.\r\n * Since the latter is deprecated in GML 3.\r\n * @property {boolean} [multiSurface=true] Write gml:multiSurface instead of\r\n * gml:MultiPolygon. Since the latter is deprecated in GML 3.\r\n * @property {string} [schemaLocation] Optional schemaLocation to use when\r\n * writing out the GML, this will override the default provided.\r\n * @property {boolean} [hasZ=false] If coordinates have a Z value.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Feature base format for reading and writing data in the GML format.\r\n * This class cannot be instantiated, it contains only base content that\r\n * is shared with versioned format classes GML2 and GML3.\r\n *\r\n * @abstract\r\n * @api\r\n */\r\nclass GMLBase extends XMLFeature {\r\n  /**\r\n   * @param {Options} [options] Optional configuration object.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<string>|string|undefined}\r\n     */\r\n    this.featureType = options.featureType;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Object<string, string>|string|undefined}\r\n     */\r\n    this.featureNS = options.featureNS;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {string|undefined}\r\n     */\r\n    this.srsName = options.srsName;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {string}\r\n     */\r\n    this.schemaLocation = '';\r\n\r\n    /**\r\n     * @type {Object<string, Object<string, Object>>}\r\n     */\r\n    this.FEATURE_COLLECTION_PARSERS = {};\r\n    this.FEATURE_COLLECTION_PARSERS[this.namespace] = {\r\n      'featureMember': makeArrayPusher(this.readFeaturesInternal),\r\n      'featureMembers': makeReplacer(this.readFeaturesInternal),\r\n    };\r\n\r\n    this.supportedMediaTypes = ['application/gml+xml'];\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<Feature> | undefined} Features.\r\n   */\r\n  readFeaturesInternal(node, objectStack) {\r\n    const localName = node.localName;\r\n    let features = null;\r\n    if (localName == 'FeatureCollection') {\r\n      features = pushParseAndPop(\r\n        [],\r\n        this.FEATURE_COLLECTION_PARSERS,\r\n        node,\r\n        objectStack,\r\n        this\r\n      );\r\n    } else if (\r\n      localName == 'featureMembers' ||\r\n      localName == 'featureMember' ||\r\n      localName == 'member'\r\n    ) {\r\n      const context = objectStack[0];\r\n      let featureType = context['featureType'];\r\n      let featureNS = context['featureNS'];\r\n      const prefix = 'p';\r\n      const defaultPrefix = 'p0';\r\n      if (!featureType && node.childNodes) {\r\n        (featureType = []), (featureNS = {});\r\n        for (let i = 0, ii = node.childNodes.length; i < ii; ++i) {\r\n          const child = /** @type {Element} */ (node.childNodes[i]);\r\n          if (child.nodeType === 1) {\r\n            const ft = child.nodeName.split(':').pop();\r\n            if (!featureType.includes(ft)) {\r\n              let key = '';\r\n              let count = 0;\r\n              const uri = child.namespaceURI;\r\n              for (const candidate in featureNS) {\r\n                if (featureNS[candidate] === uri) {\r\n                  key = candidate;\r\n                  break;\r\n                }\r\n                ++count;\r\n              }\r\n              if (!key) {\r\n                key = prefix + count;\r\n                featureNS[key] = uri;\r\n              }\r\n              featureType.push(key + ':' + ft);\r\n            }\r\n          }\r\n        }\r\n        if (localName != 'featureMember') {\r\n          // recheck featureType for each featureMember\r\n          context['featureType'] = featureType;\r\n          context['featureNS'] = featureNS;\r\n        }\r\n      }\r\n      if (typeof featureNS === 'string') {\r\n        const ns = featureNS;\r\n        featureNS = {};\r\n        featureNS[defaultPrefix] = ns;\r\n      }\r\n      /** @type {Object<string, Object<string, import(\"../xml.js\").Parser>>} */\r\n      const parsersNS = {};\r\n      const featureTypes = Array.isArray(featureType)\r\n        ? featureType\r\n        : [featureType];\r\n      for (const p in featureNS) {\r\n        /** @type {Object<string, import(\"../xml.js\").Parser>} */\r\n        const parsers = {};\r\n        for (let i = 0, ii = featureTypes.length; i < ii; ++i) {\r\n          const featurePrefix = featureTypes[i].includes(':')\r\n            ? featureTypes[i].split(':')[0]\r\n            : defaultPrefix;\r\n          if (featurePrefix === p) {\r\n            parsers[featureTypes[i].split(':').pop()] =\r\n              localName == 'featureMembers'\r\n                ? makeArrayPusher(this.readFeatureElement, this)\r\n                : makeReplacer(this.readFeatureElement, this);\r\n          }\r\n        }\r\n        parsersNS[featureNS[p]] = parsers;\r\n      }\r\n      if (localName == 'featureMember' || localName == 'member') {\r\n        features = pushParseAndPop(undefined, parsersNS, node, objectStack);\r\n      } else {\r\n        features = pushParseAndPop([], parsersNS, node, objectStack);\r\n      }\r\n    }\r\n    if (features === null) {\r\n      features = [];\r\n    }\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent|undefined} Geometry.\r\n   */\r\n  readGeometryOrExtent(node, objectStack) {\r\n    const context = /** @type {Object} */ (objectStack[0]);\r\n    context['srsName'] = node.firstElementChild.getAttribute('srsName');\r\n    context['srsDimension'] =\r\n      node.firstElementChild.getAttribute('srsDimension');\r\n    return pushParseAndPop(\r\n      null,\r\n      this.GEOMETRY_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {import(\"../extent.js\").Extent|undefined} Geometry.\r\n   */\r\n  readExtentElement(node, objectStack) {\r\n    const context = /** @type {Object} */ (objectStack[0]);\r\n    const extent = /** @type {import(\"../extent.js\").Extent} */ (\r\n      this.readGeometryOrExtent(node, objectStack)\r\n    );\r\n    return extent ? transformExtentWithOptions(extent, context) : undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {import(\"../geom/Geometry.js\").default|undefined} Geometry.\r\n   */\r\n  readGeometryElement(node, objectStack) {\r\n    const context = /** @type {Object} */ (objectStack[0]);\r\n    const geometry = /** @type {import(\"../geom/Geometry.js\").default} */ (\r\n      this.readGeometryOrExtent(node, objectStack)\r\n    );\r\n    return geometry\r\n      ? transformGeometryWithOptions(geometry, false, context)\r\n      : undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @param {boolean} asFeature whether result should be wrapped as a feature.\r\n   * @return {Feature|Object} Feature\r\n   */\r\n  readFeatureElementInternal(node, objectStack, asFeature) {\r\n    let geometryName;\r\n    const values = {};\r\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n      let value;\r\n      const localName = n.localName;\r\n      // first, check if it is simple attribute\r\n      if (\r\n        n.childNodes.length === 0 ||\r\n        (n.childNodes.length === 1 &&\r\n          (n.firstChild.nodeType === 3 || n.firstChild.nodeType === 4))\r\n      ) {\r\n        value = getAllTextContent(n, false);\r\n        if (ONLY_WHITESPACE_RE.test(value)) {\r\n          value = undefined;\r\n        }\r\n      } else {\r\n        if (asFeature) {\r\n          //if feature, try it as a geometry or extent\r\n          value =\r\n            localName === 'boundedBy'\r\n              ? this.readExtentElement(n, objectStack)\r\n              : this.readGeometryElement(n, objectStack);\r\n        }\r\n        if (!value) {\r\n          //if not a geometry or not a feature, treat it as a complex attribute\r\n          value = this.readFeatureElementInternal(n, objectStack, false);\r\n        } else if (localName !== 'boundedBy') {\r\n          // boundedBy is an extent and must not be considered as a geometry\r\n          geometryName = localName;\r\n        }\r\n      }\r\n\r\n      const len = n.attributes.length;\r\n      if (len > 0) {\r\n        value = {_content_: value};\r\n        for (let i = 0; i < len; i++) {\r\n          const attName = n.attributes[i].name;\r\n          value[attName] = n.attributes[i].value;\r\n        }\r\n      }\r\n\r\n      if (values[localName]) {\r\n        if (!(values[localName] instanceof Array)) {\r\n          values[localName] = [values[localName]];\r\n        }\r\n        values[localName].push(value);\r\n      } else {\r\n        values[localName] = value;\r\n      }\r\n    }\r\n    if (!asFeature) {\r\n      return values;\r\n    } else {\r\n      const feature = new Feature(values);\r\n      if (geometryName) {\r\n        feature.setGeometryName(geometryName);\r\n      }\r\n      const fid =\r\n        node.getAttribute('fid') || getAttributeNS(node, this.namespace, 'id');\r\n      if (fid) {\r\n        feature.setId(fid);\r\n      }\r\n      return feature;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Feature} Feature.\r\n   */\r\n  readFeatureElement(node, objectStack) {\r\n    return this.readFeatureElementInternal(node, objectStack, true);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Point|undefined} Point.\r\n   */\r\n  readPoint(node, objectStack) {\r\n    const flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);\r\n    if (flatCoordinates) {\r\n      return new Point(flatCoordinates, 'XYZ');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {MultiPoint|undefined} MultiPoint.\r\n   */\r\n  readMultiPoint(node, objectStack) {\r\n    /** @type {Array<Array<number>>} */\r\n    const coordinates = pushParseAndPop(\r\n      [],\r\n      this.MULTIPOINT_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (coordinates) {\r\n      return new MultiPoint(coordinates);\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {MultiLineString|undefined} MultiLineString.\r\n   */\r\n  readMultiLineString(node, objectStack) {\r\n    /** @type {Array<LineString>} */\r\n    const lineStrings = pushParseAndPop(\r\n      [],\r\n      this.MULTILINESTRING_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (lineStrings) {\r\n      return new MultiLineString(lineStrings);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {MultiPolygon|undefined} MultiPolygon.\r\n   */\r\n  readMultiPolygon(node, objectStack) {\r\n    /** @type {Array<Polygon>} */\r\n    const polygons = pushParseAndPop(\r\n      [],\r\n      this.MULTIPOLYGON_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (polygons) {\r\n      return new MultiPolygon(polygons);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   */\r\n  pointMemberParser(node, objectStack) {\r\n    parseNode(this.POINTMEMBER_PARSERS, node, objectStack, this);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   */\r\n  lineStringMemberParser(node, objectStack) {\r\n    parseNode(this.LINESTRINGMEMBER_PARSERS, node, objectStack, this);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   */\r\n  polygonMemberParser(node, objectStack) {\r\n    parseNode(this.POLYGONMEMBER_PARSERS, node, objectStack, this);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {LineString|undefined} LineString.\r\n   */\r\n  readLineString(node, objectStack) {\r\n    const flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);\r\n    if (flatCoordinates) {\r\n      const lineString = new LineString(flatCoordinates, 'XYZ');\r\n      return lineString;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<number>|undefined} LinearRing flat coordinates.\r\n   */\r\n  readFlatLinearRing(node, objectStack) {\r\n    const ring = pushParseAndPop(\r\n      null,\r\n      this.GEOMETRY_FLAT_COORDINATES_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (ring) {\r\n      return ring;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {LinearRing|undefined} LinearRing.\r\n   */\r\n  readLinearRing(node, objectStack) {\r\n    const flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);\r\n    if (flatCoordinates) {\r\n      return new LinearRing(flatCoordinates, 'XYZ');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Polygon|undefined} Polygon.\r\n   */\r\n  readPolygon(node, objectStack) {\r\n    /** @type {Array<Array<number>>} */\r\n    const flatLinearRings = pushParseAndPop(\r\n      [null],\r\n      this.FLAT_LINEAR_RINGS_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (flatLinearRings && flatLinearRings[0]) {\r\n      const flatCoordinates = flatLinearRings[0];\r\n      const ends = [flatCoordinates.length];\r\n      let i, ii;\r\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\r\n        extend(flatCoordinates, flatLinearRings[i]);\r\n        ends.push(flatCoordinates.length);\r\n      }\r\n      return new Polygon(flatCoordinates, 'XYZ', ends);\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<number>} Flat coordinates.\r\n   */\r\n  readFlatCoordinatesFromNode(node, objectStack) {\r\n    return pushParseAndPop(\r\n      null,\r\n      this.GEOMETRY_FLAT_COORDINATES_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometryFromNode(node, options) {\r\n    const geometry = this.readGeometryElement(node, [\r\n      this.getReadOptions(node, options ? options : {}),\r\n    ]);\r\n    return geometry ? geometry : null;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   */\r\n  readFeaturesFromNode(node, options) {\r\n    const internalOptions = {\r\n      featureType: this.featureType,\r\n      featureNS: this.featureNS,\r\n    };\r\n    if (internalOptions) {\r\n      Object.assign(internalOptions, this.getReadOptions(node, options));\r\n    }\r\n    const features = this.readFeaturesInternal(node, [internalOptions]);\r\n    return features || [];\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   */\r\n  readProjectionFromNode(node) {\r\n    return getProjection(\r\n      this.srsName\r\n        ? this.srsName\r\n        : node.firstElementChild.getAttribute('srsName')\r\n    );\r\n  }\r\n}\r\n\r\nGMLBase.prototype.namespace = GMLNS;\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.FLAT_LINEAR_RINGS_PARSERS = {\r\n  'http://www.opengis.net/gml': {},\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\r\n  'http://www.opengis.net/gml': {},\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.GEOMETRY_PARSERS = {\r\n  'http://www.opengis.net/gml': {},\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.MULTIPOINT_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'pointMember': makeArrayPusher(GMLBase.prototype.pointMemberParser),\r\n    'pointMembers': makeArrayPusher(GMLBase.prototype.pointMemberParser),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.MULTILINESTRING_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'lineStringMember': makeArrayPusher(\r\n      GMLBase.prototype.lineStringMemberParser\r\n    ),\r\n    'lineStringMembers': makeArrayPusher(\r\n      GMLBase.prototype.lineStringMemberParser\r\n    ),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.MULTIPOLYGON_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'polygonMember': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\r\n    'polygonMembers': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.POINTMEMBER_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'Point': makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.LINESTRINGMEMBER_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.POLYGONMEMBER_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.RING_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\r\n  },\r\n};\r\n\r\nexport default GMLBase;\r\n", "/**\r\n * @module ol/format/xsd\r\n */\r\nimport {getAllTextContent, getDocument} from '../xml.js';\r\nimport {padNumber} from '../string.js';\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @return {boolean|undefined} Boolean.\r\n */\r\nexport function readBoolean(node) {\r\n  const s = getAllTextContent(node, false);\r\n  return readBooleanString(s);\r\n}\r\n\r\n/**\r\n * @param {string} string String.\r\n * @return {boolean|undefined} Boolean.\r\n */\r\nexport function readBooleanString(string) {\r\n  const m = /^\\s*(true|1)|(false|0)\\s*$/.exec(string);\r\n  if (m) {\r\n    return m[1] !== undefined || false;\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @return {number|undefined} DateTime in seconds.\r\n */\r\nexport function readDateTime(node) {\r\n  const s = getAllTextContent(node, false);\r\n  const dateTime = Date.parse(s);\r\n  return isNaN(dateTime) ? undefined : dateTime / 1000;\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @return {number|undefined} Decimal.\r\n */\r\nexport function readDecimal(node) {\r\n  const s = getAllTextContent(node, false);\r\n  return readDecimalString(s);\r\n}\r\n\r\n/**\r\n * @param {string} string String.\r\n * @return {number|undefined} Decimal.\r\n */\r\nexport function readDecimalString(string) {\r\n  // FIXME check spec\r\n  const m = /^\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)\\s*$/i.exec(string);\r\n  if (m) {\r\n    return parseFloat(m[1]);\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @return {number|undefined} Non negative integer.\r\n */\r\nexport function readPositiveInteger(node) {\r\n  const s = getAllTextContent(node, false);\r\n  return readNonNegativeIntegerString(s);\r\n}\r\n\r\n/**\r\n * @param {string} string String.\r\n * @return {number|undefined} Non negative integer.\r\n */\r\nexport function readNonNegativeIntegerString(string) {\r\n  const m = /^\\s*(\\d+)\\s*$/.exec(string);\r\n  if (m) {\r\n    return parseInt(m[1], 10);\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @return {string|undefined} String.\r\n */\r\nexport function readString(node) {\r\n  return getAllTextContent(node, false).trim();\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a TextNode with the boolean to.\r\n * @param {boolean} bool Boolean.\r\n */\r\nexport function writeBooleanTextNode(node, bool) {\r\n  writeStringTextNode(node, bool ? '1' : '0');\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a CDATA Section with the string to.\r\n * @param {string} string String.\r\n */\r\nexport function writeCDATASection(node, string) {\r\n  node.appendChild(getDocument().createCDATASection(string));\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a TextNode with the dateTime to.\r\n * @param {number} dateTime DateTime in seconds.\r\n */\r\nexport function writeDateTimeTextNode(node, dateTime) {\r\n  const date = new Date(dateTime * 1000);\r\n  const string =\r\n    date.getUTCFullYear() +\r\n    '-' +\r\n    padNumber(date.getUTCMonth() + 1, 2) +\r\n    '-' +\r\n    padNumber(date.getUTCDate(), 2) +\r\n    'T' +\r\n    padNumber(date.getUTCHours(), 2) +\r\n    ':' +\r\n    padNumber(date.getUTCMinutes(), 2) +\r\n    ':' +\r\n    padNumber(date.getUTCSeconds(), 2) +\r\n    'Z';\r\n  node.appendChild(getDocument().createTextNode(string));\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a TextNode with the decimal to.\r\n * @param {number} decimal Decimal.\r\n */\r\nexport function writeDecimalTextNode(node, decimal) {\r\n  const string = decimal.toPrecision();\r\n  node.appendChild(getDocument().createTextNode(string));\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a TextNode with the decimal to.\r\n * @param {number} nonNegativeInteger Non negative integer.\r\n */\r\nexport function writeNonNegativeIntegerTextNode(node, nonNegativeInteger) {\r\n  const string = nonNegativeInteger.toString();\r\n  node.appendChild(getDocument().createTextNode(string));\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a TextNode with the string to.\r\n * @param {string} string String.\r\n */\r\nexport function writeStringTextNode(node, string) {\r\n  node.appendChild(getDocument().createTextNode(string));\r\n}\r\n", "/**\r\n * @module ol/format/GML2\r\n */\r\nimport GMLBase, {GMLNS} from './GMLBase.js';\r\nimport {\r\n  OBJECT_PROPERTY_NODE_FACTORY,\r\n  createElementNS,\r\n  getAllTextContent,\r\n  makeArrayPusher,\r\n  makeChildAppender,\r\n  makeReplacer,\r\n  makeSimpleNodeFactory,\r\n  pushParseAndPop,\r\n  pushSerializeAndPop,\r\n} from '../xml.js';\r\nimport {createOrUpdate} from '../extent.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {\r\n  transformExtentWithOptions,\r\n  transformGeometryWithOptions,\r\n} from './Feature.js';\r\nimport {writeStringTextNode} from './xsd.js';\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst schemaLocation =\r\n  GMLNS + ' http://schemas.opengis.net/gml/2.1.2/feature.xsd';\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, string>}\r\n */\r\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\r\n  'MultiLineString': 'lineStringMember',\r\n  'MultiCurve': 'curveMember',\r\n  'MultiPolygon': 'polygonMember',\r\n  'MultiSurface': 'surfaceMember',\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading and writing data in the GML format,\r\n * version 2.1.2.\r\n *\r\n * @api\r\n */\r\nclass GML2 extends GMLBase {\r\n  /**\r\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super(options);\r\n\r\n    this.FEATURE_COLLECTION_PARSERS[GMLNS]['featureMember'] = makeArrayPusher(\r\n      this.readFeaturesInternal\r\n    );\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    this.schemaLocation = options.schemaLocation\r\n      ? options.schemaLocation\r\n      : schemaLocation;\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<number>|undefined} Flat coordinates.\r\n   */\r\n  readFlatCoordinates(node, objectStack) {\r\n    const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\r\n    const context = /** @type {import(\"../xml.js\").NodeStackItem} */ (\r\n      objectStack[0]\r\n    );\r\n    const containerSrs = context['srsName'];\r\n    let axisOrientation = 'enu';\r\n    if (containerSrs) {\r\n      const proj = getProjection(containerSrs);\r\n      if (proj) {\r\n        axisOrientation = proj.getAxisOrientation();\r\n      }\r\n    }\r\n    const coordsGroups = s.trim().split(/\\s+/);\r\n    const flatCoordinates = [];\r\n    for (let i = 0, ii = coordsGroups.length; i < ii; i++) {\r\n      const coords = coordsGroups[i].split(/,+/);\r\n      const x = parseFloat(coords[0]);\r\n      const y = parseFloat(coords[1]);\r\n      const z = coords.length === 3 ? parseFloat(coords[2]) : 0;\r\n      if (axisOrientation.substr(0, 2) === 'en') {\r\n        flatCoordinates.push(x, y, z);\r\n      } else {\r\n        flatCoordinates.push(y, x, z);\r\n      }\r\n    }\r\n    return flatCoordinates;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\r\n   */\r\n  readBox(node, objectStack) {\r\n    /** @type {Array<number>} */\r\n    const flatCoordinates = pushParseAndPop(\r\n      [null],\r\n      this.BOX_PARSERS_,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    return createOrUpdate(\r\n      flatCoordinates[1][0],\r\n      flatCoordinates[1][1],\r\n      flatCoordinates[1][3],\r\n      flatCoordinates[1][4]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   */\r\n  innerBoundaryIsParser(node, objectStack) {\r\n    /** @type {Array<number>|undefined} */\r\n    const flatLinearRing = pushParseAndPop(\r\n      undefined,\r\n      this.RING_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (flatLinearRing) {\r\n      const flatLinearRings =\r\n        /** @type {Array<Array<number>>} */\r\n        (objectStack[objectStack.length - 1]);\r\n      flatLinearRings.push(flatLinearRing);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   */\r\n  outerBoundaryIsParser(node, objectStack) {\r\n    /** @type {Array<number>|undefined} */\r\n    const flatLinearRing = pushParseAndPop(\r\n      undefined,\r\n      this.RING_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (flatLinearRing) {\r\n      const flatLinearRings =\r\n        /** @type {Array<Array<number>>} */\r\n        (objectStack[objectStack.length - 1]);\r\n      flatLinearRings[0] = flatLinearRing;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @const\r\n   * @param {*} value Value.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @param {string} [nodeName] Node name.\r\n   * @return {Element|undefined} Node.\r\n   * @private\r\n   */\r\n  GEOMETRY_NODE_FACTORY_(value, objectStack, nodeName) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const multiSurface = context['multiSurface'];\r\n    const surface = context['surface'];\r\n    const multiCurve = context['multiCurve'];\r\n    if (!Array.isArray(value)) {\r\n      nodeName = /** @type {import(\"../geom/Geometry.js\").default} */ (\r\n        value\r\n      ).getType();\r\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\r\n        nodeName = 'MultiSurface';\r\n      } else if (nodeName === 'Polygon' && surface === true) {\r\n        nodeName = 'Surface';\r\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\r\n        nodeName = 'MultiCurve';\r\n      }\r\n    } else {\r\n      nodeName = 'Envelope';\r\n    }\r\n    return createElementNS('http://www.opengis.net/gml', nodeName);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeFeatureElement(node, feature, objectStack) {\r\n    const fid = feature.getId();\r\n    if (fid) {\r\n      node.setAttribute('fid', /** @type {string} */ (fid));\r\n    }\r\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n    const featureNS = context['featureNS'];\r\n    const geometryName = feature.getGeometryName();\r\n    if (!context.serializers) {\r\n      context.serializers = {};\r\n      context.serializers[featureNS] = {};\r\n    }\r\n    const keys = [];\r\n    const values = [];\r\n    if (feature.hasProperties()) {\r\n      const properties = feature.getProperties();\r\n      for (const key in properties) {\r\n        const value = properties[key];\r\n        if (value !== null) {\r\n          keys.push(key);\r\n          values.push(value);\r\n          if (\r\n            key == geometryName ||\r\n            typeof (/** @type {?} */ (value).getSimplifiedGeometry) ===\r\n              'function'\r\n          ) {\r\n            if (!(key in context.serializers[featureNS])) {\r\n              context.serializers[featureNS][key] = makeChildAppender(\r\n                this.writeGeometryElement,\r\n                this\r\n              );\r\n            }\r\n          } else {\r\n            if (!(key in context.serializers[featureNS])) {\r\n              context.serializers[featureNS][key] =\r\n                makeChildAppender(writeStringTextNode);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const item = Object.assign({}, context);\r\n    item.node = node;\r\n    pushSerializeAndPop(\r\n      /** @type {import(\"../xml.js\").NodeStackItem} */\r\n      (item),\r\n      context.serializers,\r\n      makeSimpleNodeFactory(undefined, featureNS),\r\n      values,\r\n      objectStack,\r\n      keys\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/LineString.js\").default} geometry LineString geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeCurveOrLineString(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const srsName = context['srsName'];\r\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    if (\r\n      node.nodeName === 'LineString' ||\r\n      node.nodeName === 'LineStringSegment'\r\n    ) {\r\n      const coordinates = this.createCoordinatesNode_(node.namespaceURI);\r\n      node.appendChild(coordinates);\r\n      this.writeCoordinates_(coordinates, geometry, objectStack);\r\n    } else if (node.nodeName === 'Curve') {\r\n      const segments = createElementNS(node.namespaceURI, 'segments');\r\n      node.appendChild(segments);\r\n      this.writeCurveSegments_(segments, geometry, objectStack);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeLineStringOrCurveMember(node, line, objectStack) {\r\n    const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\r\n    if (child) {\r\n      node.appendChild(child);\r\n      this.writeCurveOrLineString(child, line, objectStack);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry MultiLineString geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeMultiCurveOrLineString(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsName = context['srsName'];\r\n    const curve = context['curve'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const lines = geometry.getLineStrings();\r\n    pushSerializeAndPop(\r\n      {node: node, hasZ: hasZ, srsName: srsName, curve: curve},\r\n      this.LINESTRINGORCURVEMEMBER_SERIALIZERS,\r\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\r\n      lines,\r\n      objectStack,\r\n      undefined,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeGeometryElement(node, geometry, objectStack) {\r\n    const context = /** @type {import(\"./Feature.js\").WriteOptions} */ (\r\n      objectStack[objectStack.length - 1]\r\n    );\r\n    const item = Object.assign({}, context);\r\n    item['node'] = node;\r\n    let value;\r\n    if (Array.isArray(geometry)) {\r\n      value = transformExtentWithOptions(\r\n        /** @type {import(\"../extent.js\").Extent} */ (geometry),\r\n        context\r\n      );\r\n    } else {\r\n      value = transformGeometryWithOptions(\r\n        /** @type {import(\"../geom/Geometry.js\").default} */ (geometry),\r\n        true,\r\n        context\r\n      );\r\n    }\r\n    pushSerializeAndPop(\r\n      /** @type {import(\"../xml.js\").NodeStackItem} */\r\n      (item),\r\n      this.GEOMETRY_SERIALIZERS,\r\n      this.GEOMETRY_NODE_FACTORY_,\r\n      [value],\r\n      objectStack,\r\n      undefined,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {string} namespaceURI XML namespace.\r\n   * @return {Element} coordinates node.\r\n   * @private\r\n   */\r\n  createCoordinatesNode_(namespaceURI) {\r\n    const coordinates = createElementNS(namespaceURI, 'coordinates');\r\n    coordinates.setAttribute('decimal', '.');\r\n    coordinates.setAttribute('cs', ',');\r\n    coordinates.setAttribute('ts', ' ');\r\n\r\n    return coordinates;\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {import(\"../geom/LineString.js\").default|import(\"../geom/LinearRing.js\").default} value Geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   * @private\r\n   */\r\n  writeCoordinates_(node, value, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsName = context['srsName'];\r\n    // only 2d for simple features profile\r\n    const points = value.getCoordinates();\r\n    const len = points.length;\r\n    const parts = new Array(len);\r\n    for (let i = 0; i < len; ++i) {\r\n      const point = points[i];\r\n      parts[i] = this.getCoords_(point, srsName, hasZ);\r\n    }\r\n    writeStringTextNode(node, parts.join(' '));\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   * @private\r\n   */\r\n  writeCurveSegments_(node, line, objectStack) {\r\n    const child = createElementNS(node.namespaceURI, 'LineStringSegment');\r\n    node.appendChild(child);\r\n    this.writeCurveOrLineString(child, line, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeSurfaceOrPolygon(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsName = context['srsName'];\r\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\r\n      const rings = geometry.getLinearRings();\r\n      pushSerializeAndPop(\r\n        {node: node, hasZ: hasZ, srsName: srsName},\r\n        this.RING_SERIALIZERS,\r\n        this.RING_NODE_FACTORY_,\r\n        rings,\r\n        objectStack,\r\n        undefined,\r\n        this\r\n      );\r\n    } else if (node.nodeName === 'Surface') {\r\n      const patches = createElementNS(node.namespaceURI, 'patches');\r\n      node.appendChild(patches);\r\n      this.writeSurfacePatches_(patches, geometry, objectStack);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {*} value Value.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @param {string} [nodeName] Node name.\r\n   * @return {Node} Node.\r\n   * @private\r\n   */\r\n  RING_NODE_FACTORY_(value, objectStack, nodeName) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const parentNode = context.node;\r\n    const exteriorWritten = context['exteriorWritten'];\r\n    if (exteriorWritten === undefined) {\r\n      context['exteriorWritten'] = true;\r\n    }\r\n    return createElementNS(\r\n      parentNode.namespaceURI,\r\n      exteriorWritten !== undefined ? 'innerBoundaryIs' : 'outerBoundaryIs'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   * @private\r\n   */\r\n  writeSurfacePatches_(node, polygon, objectStack) {\r\n    const child = createElementNS(node.namespaceURI, 'PolygonPatch');\r\n    node.appendChild(child);\r\n    this.writeSurfaceOrPolygon(child, polygon, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeRing(node, ring, objectStack) {\r\n    const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\r\n    node.appendChild(linearRing);\r\n    this.writeLinearRing(linearRing, ring, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} point Point geometry.\r\n   * @param {string} [srsName] Optional srsName\r\n   * @param {boolean} [hasZ] whether the geometry has a Z coordinate (is 3D) or not.\r\n   * @return {string} The coords string.\r\n   * @private\r\n   */\r\n  getCoords_(point, srsName, hasZ) {\r\n    let axisOrientation = 'enu';\r\n    if (srsName) {\r\n      axisOrientation = getProjection(srsName).getAxisOrientation();\r\n    }\r\n    let coords =\r\n      axisOrientation.substr(0, 2) === 'en'\r\n        ? point[0] + ',' + point[1]\r\n        : point[1] + ',' + point[0];\r\n    if (hasZ) {\r\n      // For newly created points, Z can be undefined.\r\n      const z = point[2] || 0;\r\n      coords += ',' + z;\r\n    }\r\n\r\n    return coords;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writePoint(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsName = context['srsName'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const coordinates = this.createCoordinatesNode_(node.namespaceURI);\r\n    node.appendChild(coordinates);\r\n    const point = geometry.getCoordinates();\r\n    const coord = this.getCoords_(point, srsName, hasZ);\r\n    writeStringTextNode(coordinates, coord);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeMultiPoint(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsName = context['srsName'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const points = geometry.getPoints();\r\n    pushSerializeAndPop(\r\n      {node: node, hasZ: hasZ, srsName: srsName},\r\n      this.POINTMEMBER_SERIALIZERS,\r\n      makeSimpleNodeFactory('pointMember'),\r\n      points,\r\n      objectStack,\r\n      undefined,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writePointMember(node, point, objectStack) {\r\n    const child = createElementNS(node.namespaceURI, 'Point');\r\n    node.appendChild(child);\r\n    this.writePoint(child, point, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeLinearRing(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const srsName = context['srsName'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const coordinates = this.createCoordinatesNode_(node.namespaceURI);\r\n    node.appendChild(coordinates);\r\n    this.writeCoordinates_(coordinates, geometry, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeMultiSurfaceOrPolygon(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsName = context['srsName'];\r\n    const surface = context['surface'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const polygons = geometry.getPolygons();\r\n    pushSerializeAndPop(\r\n      {node: node, hasZ: hasZ, srsName: srsName, surface: surface},\r\n      this.SURFACEORPOLYGONMEMBER_SERIALIZERS,\r\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\r\n      polygons,\r\n      objectStack,\r\n      undefined,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeSurfaceOrPolygonMember(node, polygon, objectStack) {\r\n    const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\r\n    if (child) {\r\n      node.appendChild(child);\r\n      this.writeSurfaceOrPolygon(child, polygon, objectStack);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeEnvelope(node, extent, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const srsName = context['srsName'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const keys = ['lowerCorner', 'upperCorner'];\r\n    const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\r\n    pushSerializeAndPop(\r\n      /** @type {import(\"../xml.js\").NodeStackItem} */\r\n      ({node: node}),\r\n      this.ENVELOPE_SERIALIZERS,\r\n      OBJECT_PROPERTY_NODE_FACTORY,\r\n      values,\r\n      objectStack,\r\n      keys,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @const\r\n   * @param {*} value Value.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @param {string} [nodeName] Node name.\r\n   * @return {Node|undefined} Node.\r\n   * @private\r\n   */\r\n  MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, nodeName) {\r\n    const parentNode = objectStack[objectStack.length - 1].node;\r\n    return createElementNS(\r\n      'http://www.opengis.net/gml',\r\n      MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML2.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML2.prototype.FLAT_LINEAR_RINGS_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'innerBoundaryIs': GML2.prototype.innerBoundaryIsParser,\r\n    'outerBoundaryIs': GML2.prototype.outerBoundaryIsParser,\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML2.prototype.BOX_PARSERS_ = {\r\n  'http://www.opengis.net/gml': {\r\n    'coordinates': makeArrayPusher(GML2.prototype.readFlatCoordinates),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML2.prototype.GEOMETRY_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\r\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\r\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\r\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\r\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\r\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\r\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\r\n    'Box': makeReplacer(GML2.prototype.readBox),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML2.prototype.GEOMETRY_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'Curve': makeChildAppender(GML2.prototype.writeCurveOrLineString),\r\n    'MultiCurve': makeChildAppender(GML2.prototype.writeMultiCurveOrLineString),\r\n    'Point': makeChildAppender(GML2.prototype.writePoint),\r\n    'MultiPoint': makeChildAppender(GML2.prototype.writeMultiPoint),\r\n    'LineString': makeChildAppender(GML2.prototype.writeCurveOrLineString),\r\n    'MultiLineString': makeChildAppender(\r\n      GML2.prototype.writeMultiCurveOrLineString\r\n    ),\r\n    'LinearRing': makeChildAppender(GML2.prototype.writeLinearRing),\r\n    'Polygon': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),\r\n    'MultiPolygon': makeChildAppender(\r\n      GML2.prototype.writeMultiSurfaceOrPolygon\r\n    ),\r\n    'Surface': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),\r\n    'MultiSurface': makeChildAppender(\r\n      GML2.prototype.writeMultiSurfaceOrPolygon\r\n    ),\r\n    'Envelope': makeChildAppender(GML2.prototype.writeEnvelope),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML2.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'lineStringMember': makeChildAppender(\r\n      GML2.prototype.writeLineStringOrCurveMember\r\n    ),\r\n    'curveMember': makeChildAppender(\r\n      GML2.prototype.writeLineStringOrCurveMember\r\n    ),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML2.prototype.RING_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'outerBoundaryIs': makeChildAppender(GML2.prototype.writeRing),\r\n    'innerBoundaryIs': makeChildAppender(GML2.prototype.writeRing),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML2.prototype.POINTMEMBER_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'pointMember': makeChildAppender(GML2.prototype.writePointMember),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML2.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'surfaceMember': makeChildAppender(\r\n      GML2.prototype.writeSurfaceOrPolygonMember\r\n    ),\r\n    'polygonMember': makeChildAppender(\r\n      GML2.prototype.writeSurfaceOrPolygonMember\r\n    ),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML2.prototype.ENVELOPE_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'lowerCorner': makeChildAppender(writeStringTextNode),\r\n    'upperCorner': makeChildAppender(writeStringTextNode),\r\n  },\r\n};\r\n\r\nexport default GML2;\r\n", "/**\r\n * @module ol/format/GML3\r\n */\r\nimport GML2 from './GML2.js';\r\nimport GMLBase, {GMLNS} from './GMLBase.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport MultiLineString from '../geom/MultiLineString.js';\r\nimport MultiPolygon from '../geom/MultiPolygon.js';\r\nimport Polygon from '../geom/Polygon.js';\r\nimport {\r\n  OBJECT_PROPERTY_NODE_FACTORY,\r\n  XML_SCHEMA_INSTANCE_URI,\r\n  createElementNS,\r\n  getAllTextContent,\r\n  makeArrayExtender,\r\n  makeArrayPusher,\r\n  makeChildAppender,\r\n  makeReplacer,\r\n  makeSimpleNodeFactory,\r\n  parseNode,\r\n  pushParseAndPop,\r\n  pushSerializeAndPop,\r\n} from '../xml.js';\r\nimport {createOrUpdate} from '../extent.js';\r\nimport {extend} from '../array.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {readNonNegativeIntegerString, writeStringTextNode} from './xsd.js';\r\nimport {\r\n  transformExtentWithOptions,\r\n  transformGeometryWithOptions,\r\n} from './Feature.js';\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n * @private\r\n */\r\nconst schemaLocation =\r\n  GMLNS +\r\n  ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +\r\n  '1.0.0/gmlsf.xsd';\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, string>}\r\n */\r\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\r\n  'MultiLineString': 'lineStringMember',\r\n  'MultiCurve': 'curveMember',\r\n  'MultiPolygon': 'polygonMember',\r\n  'MultiSurface': 'surfaceMember',\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading and writing data in the GML format\r\n * version 3.1.1.\r\n * Currently only supports GML 3.1.1 Simple Features profile.\r\n *\r\n * @api\r\n */\r\nclass GML3 extends GMLBase {\r\n  /**\r\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super(options);\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.surface_ = options.surface !== undefined ? options.surface : false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.curve_ = options.curve !== undefined ? options.curve : false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.multiCurve_ =\r\n      options.multiCurve !== undefined ? options.multiCurve : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.multiSurface_ =\r\n      options.multiSurface !== undefined ? options.multiSurface : true;\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    this.schemaLocation = options.schemaLocation\r\n      ? options.schemaLocation\r\n      : schemaLocation;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.hasZ = options.hasZ !== undefined ? options.hasZ : false;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {MultiLineString|undefined} MultiLineString.\r\n   */\r\n  readMultiCurve(node, objectStack) {\r\n    /** @type {Array<LineString>} */\r\n    const lineStrings = pushParseAndPop(\r\n      [],\r\n      this.MULTICURVE_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (lineStrings) {\r\n      const multiLineString = new MultiLineString(lineStrings);\r\n      return multiLineString;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<number>|undefined} Polygon.\r\n   */\r\n  readFlatCurveRing(node, objectStack) {\r\n    /** @type {Array<LineString>} */\r\n    const lineStrings = pushParseAndPop(\r\n      [],\r\n      this.MULTICURVE_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    const flatCoordinates = [];\r\n    for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\r\n      extend(flatCoordinates, lineStrings[i].getFlatCoordinates());\r\n    }\r\n    return flatCoordinates;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {MultiPolygon|undefined} MultiPolygon.\r\n   */\r\n  readMultiSurface(node, objectStack) {\r\n    /** @type {Array<Polygon>} */\r\n    const polygons = pushParseAndPop(\r\n      [],\r\n      this.MULTISURFACE_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (polygons) {\r\n      return new MultiPolygon(polygons);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   */\r\n  curveMemberParser(node, objectStack) {\r\n    parseNode(this.CURVEMEMBER_PARSERS, node, objectStack, this);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   */\r\n  surfaceMemberParser(node, objectStack) {\r\n    parseNode(this.SURFACEMEMBER_PARSERS, node, objectStack, this);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\r\n   */\r\n  readPatch(node, objectStack) {\r\n    return pushParseAndPop(\r\n      [null],\r\n      this.PATCHES_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<number>|undefined} flat coordinates.\r\n   */\r\n  readSegment(node, objectStack) {\r\n    return pushParseAndPop([], this.SEGMENTS_PARSERS, node, objectStack, this);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\r\n   */\r\n  readPolygonPatch(node, objectStack) {\r\n    return pushParseAndPop(\r\n      [null],\r\n      this.FLAT_LINEAR_RINGS_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<number>|undefined} flat coordinates.\r\n   */\r\n  readLineStringSegment(node, objectStack) {\r\n    return pushParseAndPop(\r\n      [null],\r\n      this.GEOMETRY_FLAT_COORDINATES_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   */\r\n  interiorParser(node, objectStack) {\r\n    /** @type {Array<number>|undefined} */\r\n    const flatLinearRing = pushParseAndPop(\r\n      undefined,\r\n      this.RING_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (flatLinearRing) {\r\n      const flatLinearRings =\r\n        /** @type {Array<Array<number>>} */\r\n        (objectStack[objectStack.length - 1]);\r\n      flatLinearRings.push(flatLinearRing);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   */\r\n  exteriorParser(node, objectStack) {\r\n    /** @type {Array<number>|undefined} */\r\n    const flatLinearRing = pushParseAndPop(\r\n      undefined,\r\n      this.RING_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (flatLinearRing) {\r\n      const flatLinearRings =\r\n        /** @type {Array<Array<number>>} */\r\n        (objectStack[objectStack.length - 1]);\r\n      flatLinearRings[0] = flatLinearRing;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Polygon|undefined} Polygon.\r\n   */\r\n  readSurface(node, objectStack) {\r\n    /** @type {Array<Array<number>>} */\r\n    const flatLinearRings = pushParseAndPop(\r\n      [null],\r\n      this.SURFACE_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (flatLinearRings && flatLinearRings[0]) {\r\n      const flatCoordinates = flatLinearRings[0];\r\n      const ends = [flatCoordinates.length];\r\n      let i, ii;\r\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\r\n        extend(flatCoordinates, flatLinearRings[i]);\r\n        ends.push(flatCoordinates.length);\r\n      }\r\n      return new Polygon(flatCoordinates, 'XYZ', ends);\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {LineString|undefined} LineString.\r\n   */\r\n  readCurve(node, objectStack) {\r\n    /** @type {Array<number>} */\r\n    const flatCoordinates = pushParseAndPop(\r\n      [null],\r\n      this.CURVE_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (flatCoordinates) {\r\n      const lineString = new LineString(flatCoordinates, 'XYZ');\r\n      return lineString;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\r\n   */\r\n  readEnvelope(node, objectStack) {\r\n    /** @type {Array<number>} */\r\n    const flatCoordinates = pushParseAndPop(\r\n      [null],\r\n      this.ENVELOPE_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    return createOrUpdate(\r\n      flatCoordinates[1][0],\r\n      flatCoordinates[1][1],\r\n      flatCoordinates[2][0],\r\n      flatCoordinates[2][1]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<number>|undefined} Flat coordinates.\r\n   */\r\n  readFlatPos(node, objectStack) {\r\n    let s = getAllTextContent(node, false);\r\n    const re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\r\n    /** @type {Array<number>} */\r\n    const flatCoordinates = [];\r\n    let m;\r\n    while ((m = re.exec(s))) {\r\n      flatCoordinates.push(parseFloat(m[1]));\r\n      s = s.substr(m[0].length);\r\n    }\r\n    if (s !== '') {\r\n      return undefined;\r\n    }\r\n    const context = objectStack[0];\r\n    const containerSrs = context['srsName'];\r\n    let axisOrientation = 'enu';\r\n    if (containerSrs) {\r\n      const proj = getProjection(containerSrs);\r\n      axisOrientation = proj.getAxisOrientation();\r\n    }\r\n    if (axisOrientation === 'neu') {\r\n      let i, ii;\r\n      for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\r\n        const y = flatCoordinates[i];\r\n        const x = flatCoordinates[i + 1];\r\n        flatCoordinates[i] = x;\r\n        flatCoordinates[i + 1] = y;\r\n      }\r\n    }\r\n    const len = flatCoordinates.length;\r\n    if (len == 2) {\r\n      flatCoordinates.push(0);\r\n    }\r\n    if (len === 0) {\r\n      return undefined;\r\n    }\r\n    return flatCoordinates;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<number>|undefined} Flat coordinates.\r\n   */\r\n  readFlatPosList(node, objectStack) {\r\n    const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\r\n    const context = objectStack[0];\r\n    const containerSrs = context['srsName'];\r\n    const contextDimension = context['srsDimension'];\r\n    let axisOrientation = 'enu';\r\n    if (containerSrs) {\r\n      const proj = getProjection(containerSrs);\r\n      axisOrientation = proj.getAxisOrientation();\r\n    }\r\n    const coords = s.split(/\\s+/);\r\n    // The \"dimension\" attribute is from the GML 3.0.1 spec.\r\n    let dim = 2;\r\n    if (node.getAttribute('srsDimension')) {\r\n      dim = readNonNegativeIntegerString(node.getAttribute('srsDimension'));\r\n    } else if (node.getAttribute('dimension')) {\r\n      dim = readNonNegativeIntegerString(node.getAttribute('dimension'));\r\n    } else if (\r\n      /** @type {Element} */ (node.parentNode).getAttribute('srsDimension')\r\n    ) {\r\n      dim = readNonNegativeIntegerString(\r\n        /** @type {Element} */ (node.parentNode).getAttribute('srsDimension')\r\n      );\r\n    } else if (contextDimension) {\r\n      dim = readNonNegativeIntegerString(contextDimension);\r\n    }\r\n    let x, y, z;\r\n    const flatCoordinates = [];\r\n    for (let i = 0, ii = coords.length; i < ii; i += dim) {\r\n      x = parseFloat(coords[i]);\r\n      y = parseFloat(coords[i + 1]);\r\n      z = dim === 3 ? parseFloat(coords[i + 2]) : 0;\r\n      if (axisOrientation.substr(0, 2) === 'en') {\r\n        flatCoordinates.push(x, y, z);\r\n      } else {\r\n        flatCoordinates.push(y, x, z);\r\n      }\r\n    }\r\n    return flatCoordinates;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/Point.js\").default} value Point geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   * @private\r\n   */\r\n  writePos_(node, value, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsDimension = hasZ ? '3' : '2';\r\n    node.setAttribute('srsDimension', srsDimension);\r\n    const srsName = context['srsName'];\r\n    let axisOrientation = 'enu';\r\n    if (srsName) {\r\n      axisOrientation = getProjection(srsName).getAxisOrientation();\r\n    }\r\n    const point = value.getCoordinates();\r\n    let coords;\r\n    // only 2d for simple features profile\r\n    if (axisOrientation.substr(0, 2) === 'en') {\r\n      coords = point[0] + ' ' + point[1];\r\n    } else {\r\n      coords = point[1] + ' ' + point[0];\r\n    }\r\n    if (hasZ) {\r\n      // For newly created points, Z can be undefined.\r\n      const z = point[2] || 0;\r\n      coords += ' ' + z;\r\n    }\r\n    writeStringTextNode(node, coords);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} point Point geometry.\r\n   * @param {string} [srsName] Optional srsName\r\n   * @param {boolean} [hasZ] whether the geometry has a Z coordinate (is 3D) or not.\r\n   * @return {string} The coords string.\r\n   * @private\r\n   */\r\n  getCoords_(point, srsName, hasZ) {\r\n    let axisOrientation = 'enu';\r\n    if (srsName) {\r\n      axisOrientation = getProjection(srsName).getAxisOrientation();\r\n    }\r\n    let coords =\r\n      axisOrientation.substr(0, 2) === 'en'\r\n        ? point[0] + ' ' + point[1]\r\n        : point[1] + ' ' + point[0];\r\n    if (hasZ) {\r\n      // For newly created points, Z can be undefined.\r\n      const z = point[2] || 0;\r\n      coords += ' ' + z;\r\n    }\r\n\r\n    return coords;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {LineString|import(\"../geom/LinearRing.js\").default} value Geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   * @private\r\n   */\r\n  writePosList_(node, value, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsDimension = hasZ ? '3' : '2';\r\n    node.setAttribute('srsDimension', srsDimension);\r\n    const srsName = context['srsName'];\r\n    // only 2d for simple features profile\r\n    const points = value.getCoordinates();\r\n    const len = points.length;\r\n    const parts = new Array(len);\r\n    let point;\r\n    for (let i = 0; i < len; ++i) {\r\n      point = points[i];\r\n      parts[i] = this.getCoords_(point, srsName, hasZ);\r\n    }\r\n    writeStringTextNode(node, parts.join(' '));\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writePoint(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const srsName = context['srsName'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const pos = createElementNS(node.namespaceURI, 'pos');\r\n    node.appendChild(pos);\r\n    this.writePos_(pos, geometry, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeEnvelope(node, extent, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const srsName = context['srsName'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const keys = ['lowerCorner', 'upperCorner'];\r\n    const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\r\n    pushSerializeAndPop(\r\n      /** @type {import(\"../xml.js\").NodeStackItem} */\r\n      ({node: node}),\r\n      this.ENVELOPE_SERIALIZERS,\r\n      OBJECT_PROPERTY_NODE_FACTORY,\r\n      values,\r\n      objectStack,\r\n      keys,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeLinearRing(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const srsName = context['srsName'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const posList = createElementNS(node.namespaceURI, 'posList');\r\n    node.appendChild(posList);\r\n    this.writePosList_(posList, geometry, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {*} value Value.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @param {string} [nodeName] Node name.\r\n   * @return {Node} Node.\r\n   * @private\r\n   */\r\n  RING_NODE_FACTORY_(value, objectStack, nodeName) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const parentNode = context.node;\r\n    const exteriorWritten = context['exteriorWritten'];\r\n    if (exteriorWritten === undefined) {\r\n      context['exteriorWritten'] = true;\r\n    }\r\n    return createElementNS(\r\n      parentNode.namespaceURI,\r\n      exteriorWritten !== undefined ? 'interior' : 'exterior'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Polygon} geometry Polygon geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeSurfaceOrPolygon(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsName = context['srsName'];\r\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\r\n      const rings = geometry.getLinearRings();\r\n      pushSerializeAndPop(\r\n        {node: node, hasZ: hasZ, srsName: srsName},\r\n        this.RING_SERIALIZERS,\r\n        this.RING_NODE_FACTORY_,\r\n        rings,\r\n        objectStack,\r\n        undefined,\r\n        this\r\n      );\r\n    } else if (node.nodeName === 'Surface') {\r\n      const patches = createElementNS(node.namespaceURI, 'patches');\r\n      node.appendChild(patches);\r\n      this.writeSurfacePatches_(patches, geometry, objectStack);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {LineString} geometry LineString geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeCurveOrLineString(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const srsName = context['srsName'];\r\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    if (\r\n      node.nodeName === 'LineString' ||\r\n      node.nodeName === 'LineStringSegment'\r\n    ) {\r\n      const posList = createElementNS(node.namespaceURI, 'posList');\r\n      node.appendChild(posList);\r\n      this.writePosList_(posList, geometry, objectStack);\r\n    } else if (node.nodeName === 'Curve') {\r\n      const segments = createElementNS(node.namespaceURI, 'segments');\r\n      node.appendChild(segments);\r\n      this.writeCurveSegments_(segments, geometry, objectStack);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {MultiPolygon} geometry MultiPolygon geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeMultiSurfaceOrPolygon(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsName = context['srsName'];\r\n    const surface = context['surface'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const polygons = geometry.getPolygons();\r\n    pushSerializeAndPop(\r\n      {node: node, hasZ: hasZ, srsName: srsName, surface: surface},\r\n      this.SURFACEORPOLYGONMEMBER_SERIALIZERS,\r\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\r\n      polygons,\r\n      objectStack,\r\n      undefined,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeMultiPoint(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const srsName = context['srsName'];\r\n    const hasZ = context['hasZ'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const points = geometry.getPoints();\r\n    pushSerializeAndPop(\r\n      {node: node, hasZ: hasZ, srsName: srsName},\r\n      this.POINTMEMBER_SERIALIZERS,\r\n      makeSimpleNodeFactory('pointMember'),\r\n      points,\r\n      objectStack,\r\n      undefined,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {MultiLineString} geometry MultiLineString geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeMultiCurveOrLineString(node, geometry, objectStack) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const hasZ = context['hasZ'];\r\n    const srsName = context['srsName'];\r\n    const curve = context['curve'];\r\n    if (srsName) {\r\n      node.setAttribute('srsName', srsName);\r\n    }\r\n    const lines = geometry.getLineStrings();\r\n    pushSerializeAndPop(\r\n      {node: node, hasZ: hasZ, srsName: srsName, curve: curve},\r\n      this.LINESTRINGORCURVEMEMBER_SERIALIZERS,\r\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\r\n      lines,\r\n      objectStack,\r\n      undefined,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeRing(node, ring, objectStack) {\r\n    const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\r\n    node.appendChild(linearRing);\r\n    this.writeLinearRing(linearRing, ring, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {Polygon} polygon Polygon geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeSurfaceOrPolygonMember(node, polygon, objectStack) {\r\n    const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\r\n    if (child) {\r\n      node.appendChild(child);\r\n      this.writeSurfaceOrPolygon(child, polygon, objectStack);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writePointMember(node, point, objectStack) {\r\n    const child = createElementNS(node.namespaceURI, 'Point');\r\n    node.appendChild(child);\r\n    this.writePoint(child, point, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {LineString} line LineString geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeLineStringOrCurveMember(node, line, objectStack) {\r\n    const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\r\n    if (child) {\r\n      node.appendChild(child);\r\n      this.writeCurveOrLineString(child, line, objectStack);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Polygon} polygon Polygon geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   * @private\r\n   */\r\n  writeSurfacePatches_(node, polygon, objectStack) {\r\n    const child = createElementNS(node.namespaceURI, 'PolygonPatch');\r\n    node.appendChild(child);\r\n    this.writeSurfaceOrPolygon(child, polygon, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {LineString} line LineString geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   * @private\r\n   */\r\n  writeCurveSegments_(node, line, objectStack) {\r\n    const child = createElementNS(node.namespaceURI, 'LineStringSegment');\r\n    node.appendChild(child);\r\n    this.writeCurveOrLineString(child, line, objectStack);\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeGeometryElement(node, geometry, objectStack) {\r\n    const context = /** @type {import(\"./Feature.js\").WriteOptions} */ (\r\n      objectStack[objectStack.length - 1]\r\n    );\r\n    const item = Object.assign({}, context);\r\n    item['node'] = node;\r\n    let value;\r\n    if (Array.isArray(geometry)) {\r\n      value = transformExtentWithOptions(\r\n        /** @type {import(\"../extent.js\").Extent} */ (geometry),\r\n        context\r\n      );\r\n    } else {\r\n      value = transformGeometryWithOptions(\r\n        /** @type {import(\"../geom/Geometry.js\").default} */ (geometry),\r\n        true,\r\n        context\r\n      );\r\n    }\r\n    pushSerializeAndPop(\r\n      /** @type {import(\"../xml.js\").NodeStackItem} */\r\n      (item),\r\n      this.GEOMETRY_SERIALIZERS,\r\n      this.GEOMETRY_NODE_FACTORY_,\r\n      [value],\r\n      objectStack,\r\n      undefined,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   */\r\n  writeFeatureElement(node, feature, objectStack) {\r\n    const fid = feature.getId();\r\n    if (fid) {\r\n      node.setAttribute('fid', /** @type {string} */ (fid));\r\n    }\r\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n    const featureNS = context['featureNS'];\r\n    const geometryName = feature.getGeometryName();\r\n    if (!context.serializers) {\r\n      context.serializers = {};\r\n      context.serializers[featureNS] = {};\r\n    }\r\n    const keys = [];\r\n    const values = [];\r\n    if (feature.hasProperties()) {\r\n      const properties = feature.getProperties();\r\n      for (const key in properties) {\r\n        const value = properties[key];\r\n        if (value !== null) {\r\n          keys.push(key);\r\n          values.push(value);\r\n          if (\r\n            key == geometryName ||\r\n            typeof (/** @type {?} */ (value).getSimplifiedGeometry) ===\r\n              'function'\r\n          ) {\r\n            if (!(key in context.serializers[featureNS])) {\r\n              context.serializers[featureNS][key] = makeChildAppender(\r\n                this.writeGeometryElement,\r\n                this\r\n              );\r\n            }\r\n          } else {\r\n            if (!(key in context.serializers[featureNS])) {\r\n              context.serializers[featureNS][key] =\r\n                makeChildAppender(writeStringTextNode);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const item = Object.assign({}, context);\r\n    item.node = node;\r\n    pushSerializeAndPop(\r\n      /** @type {import(\"../xml.js\").NodeStackItem} */\r\n      (item),\r\n      context.serializers,\r\n      makeSimpleNodeFactory(undefined, featureNS),\r\n      values,\r\n      objectStack,\r\n      keys\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {Array<*>} objectStack Node stack.\r\n   * @private\r\n   */\r\n  writeFeatureMembers_(node, features, objectStack) {\r\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n    const featureType = context['featureType'];\r\n    const featureNS = context['featureNS'];\r\n    /** @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>} */\r\n    const serializers = {};\r\n    serializers[featureNS] = {};\r\n    serializers[featureNS][featureType] = makeChildAppender(\r\n      this.writeFeatureElement,\r\n      this\r\n    );\r\n    const item = Object.assign({}, context);\r\n    item.node = node;\r\n    pushSerializeAndPop(\r\n      /** @type {import(\"../xml.js\").NodeStackItem} */\r\n      (item),\r\n      serializers,\r\n      makeSimpleNodeFactory(featureType, featureNS),\r\n      features,\r\n      objectStack\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @const\r\n   * @param {*} value Value.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @param {string} [nodeName] Node name.\r\n   * @return {Node|undefined} Node.\r\n   * @private\r\n   */\r\n  MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, nodeName) {\r\n    const parentNode = objectStack[objectStack.length - 1].node;\r\n    return createElementNS(\r\n      this.namespace,\r\n      MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @const\r\n   * @param {*} value Value.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @param {string} [nodeName] Node name.\r\n   * @return {Element|undefined} Node.\r\n   * @private\r\n   */\r\n  GEOMETRY_NODE_FACTORY_(value, objectStack, nodeName) {\r\n    const context = objectStack[objectStack.length - 1];\r\n    const multiSurface = context['multiSurface'];\r\n    const surface = context['surface'];\r\n    const curve = context['curve'];\r\n    const multiCurve = context['multiCurve'];\r\n    if (!Array.isArray(value)) {\r\n      nodeName = /** @type {import(\"../geom/Geometry.js\").default} */ (\r\n        value\r\n      ).getType();\r\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\r\n        nodeName = 'MultiSurface';\r\n      } else if (nodeName === 'Polygon' && surface === true) {\r\n        nodeName = 'Surface';\r\n      } else if (nodeName === 'LineString' && curve === true) {\r\n        nodeName = 'Curve';\r\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\r\n        nodeName = 'MultiCurve';\r\n      }\r\n    } else {\r\n      nodeName = 'Envelope';\r\n    }\r\n    return createElementNS(this.namespace, nodeName);\r\n  }\r\n\r\n  /**\r\n   * Encode a geometry in GML 3.1.1 Simple Features.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\r\n   * @return {Node} Node.\r\n   * @api\r\n   */\r\n  writeGeometryNode(geometry, options) {\r\n    options = this.adaptOptions(options);\r\n    const geom = createElementNS(this.namespace, 'geom');\r\n    const context = {\r\n      node: geom,\r\n      hasZ: this.hasZ,\r\n      srsName: this.srsName,\r\n      curve: this.curve_,\r\n      surface: this.surface_,\r\n      multiSurface: this.multiSurface_,\r\n      multiCurve: this.multiCurve_,\r\n    };\r\n    if (options) {\r\n      Object.assign(context, options);\r\n    }\r\n    this.writeGeometryElement(geom, geometry, [context]);\r\n    return geom;\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features in the GML 3.1.1 format as an XML node.\r\n   *\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\r\n   * @return {Element} Node.\r\n   * @api\r\n   */\r\n  writeFeaturesNode(features, options) {\r\n    options = this.adaptOptions(options);\r\n    const node = createElementNS(this.namespace, 'featureMembers');\r\n    node.setAttributeNS(\r\n      XML_SCHEMA_INSTANCE_URI,\r\n      'xsi:schemaLocation',\r\n      this.schemaLocation\r\n    );\r\n    const context = {\r\n      srsName: this.srsName,\r\n      hasZ: this.hasZ,\r\n      curve: this.curve_,\r\n      surface: this.surface_,\r\n      multiSurface: this.multiSurface_,\r\n      multiCurve: this.multiCurve_,\r\n      featureNS: this.featureNS,\r\n      featureType: this.featureType,\r\n    };\r\n    if (options) {\r\n      Object.assign(context, options);\r\n    }\r\n    this.writeFeatureMembers_(node, features, [context]);\r\n    return node;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'pos': makeReplacer(GML3.prototype.readFlatPos),\r\n    'posList': makeReplacer(GML3.prototype.readFlatPosList),\r\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'interior': GML3.prototype.interiorParser,\r\n    'exterior': GML3.prototype.exteriorParser,\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.GEOMETRY_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\r\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\r\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\r\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\r\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\r\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\r\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\r\n    'Surface': makeReplacer(GML3.prototype.readSurface),\r\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\r\n    'Curve': makeReplacer(GML3.prototype.readCurve),\r\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\r\n    'Envelope': makeReplacer(GML3.prototype.readEnvelope),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.MULTICURVE_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\r\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.MULTISURFACE_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\r\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.CURVEMEMBER_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\r\n    'Curve': makeArrayPusher(GML3.prototype.readCurve),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.SURFACEMEMBER_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\r\n    'Surface': makeArrayPusher(GML3.prototype.readSurface),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.SURFACE_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'patches': makeReplacer(GML3.prototype.readPatch),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.CURVE_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'segments': makeReplacer(GML3.prototype.readSegment),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.ENVELOPE_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\r\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.PATCHES_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML3.prototype.SEGMENTS_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'LineStringSegment': makeArrayExtender(\r\n      GML3.prototype.readLineStringSegment\r\n    ),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGMLBase.prototype.RING_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\r\n    'Ring': makeReplacer(GML3.prototype.readFlatCurveRing),\r\n  },\r\n};\r\n\r\n/**\r\n * Encode an array of features in GML 3.1.1 Simple Features.\r\n *\r\n * @function\r\n * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\r\n * @return {string} Result.\r\n * @api\r\n */\r\nGML3.prototype.writeFeatures;\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML3.prototype.RING_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'exterior': makeChildAppender(GML3.prototype.writeRing),\r\n    'interior': makeChildAppender(GML3.prototype.writeRing),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML3.prototype.ENVELOPE_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'lowerCorner': makeChildAppender(writeStringTextNode),\r\n    'upperCorner': makeChildAppender(writeStringTextNode),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'surfaceMember': makeChildAppender(\r\n      GML3.prototype.writeSurfaceOrPolygonMember\r\n    ),\r\n    'polygonMember': makeChildAppender(\r\n      GML3.prototype.writeSurfaceOrPolygonMember\r\n    ),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML3.prototype.POINTMEMBER_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'lineStringMember': makeChildAppender(\r\n      GML3.prototype.writeLineStringOrCurveMember\r\n    ),\r\n    'curveMember': makeChildAppender(\r\n      GML3.prototype.writeLineStringOrCurveMember\r\n    ),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML3.prototype.GEOMETRY_SERIALIZERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\r\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\r\n    'Point': makeChildAppender(GML3.prototype.writePoint),\r\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\r\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\r\n    'MultiLineString': makeChildAppender(\r\n      GML3.prototype.writeMultiCurveOrLineString\r\n    ),\r\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\r\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\r\n    'MultiPolygon': makeChildAppender(\r\n      GML3.prototype.writeMultiSurfaceOrPolygon\r\n    ),\r\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\r\n    'MultiSurface': makeChildAppender(\r\n      GML3.prototype.writeMultiSurfaceOrPolygon\r\n    ),\r\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope),\r\n  },\r\n};\r\n\r\nexport default GML3;\r\n", "/**\r\n * @module ol/format/GML\r\n */\r\nimport GML3 from './GML3.js';\r\n\r\n/**\r\n * Feature format for reading and writing data in the GML format\r\n * version 3.1.1.\r\n * Currently only supports GML 3.1.1 Simple Features profile.\r\n *\r\n * @class\r\n * @param {import(\"./GMLBase.js\").Options} [options]\r\n *     Optional configuration object.\r\n * @api\r\n */\r\nconst GML = GML3;\r\n\r\n/**\r\n * Encode an array of features in GML 3.1.1 Simple Features.\r\n *\r\n * @function\r\n * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\r\n * @return {string} Result.\r\n * @api\r\n */\r\nGML.prototype.writeFeatures;\r\n\r\n/**\r\n * Encode an array of features in the GML 3.1.1 format as an XML node.\r\n *\r\n * @function\r\n * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\r\n * @return {Node} Node.\r\n * @api\r\n */\r\nGML.prototype.writeFeaturesNode;\r\n\r\nexport default GML;\r\n", "/**\r\n * @module ol/format/GPX\r\n */\r\nimport Feature from '../Feature.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport MultiLineString from '../geom/MultiLineString.js';\r\nimport Point from '../geom/Point.js';\r\nimport XMLFeature from './XMLFeature.js';\r\nimport {\r\n  OBJECT_PROPERTY_NODE_FACTORY,\r\n  XML_SCHEMA_INSTANCE_URI,\r\n  createElementNS,\r\n  makeArrayPusher,\r\n  makeArraySerializer,\r\n  makeChildAppender,\r\n  makeObjectPropertySetter,\r\n  makeSequence,\r\n  makeSimpleNodeFactory,\r\n  makeStructureNS,\r\n  parseNode,\r\n  pushParseAndPop,\r\n  pushSerializeAndPop,\r\n} from '../xml.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {\r\n  readDateTime,\r\n  readDecimal,\r\n  readPositiveInteger,\r\n  readString,\r\n  writeDateTimeTextNode,\r\n  writeDecimalTextNode,\r\n  writeNonNegativeIntegerTextNode,\r\n  writeStringTextNode,\r\n} from './xsd.js';\r\nimport {transformGeometryWithOptions} from './Feature.js';\r\n\r\n/**\r\n * @const\r\n * @type {Array<null|string>}\r\n */\r\nconst NAMESPACE_URIS = [\r\n  null,\r\n  'http://www.topografix.com/GPX/1/0',\r\n  'http://www.topografix.com/GPX/1/1',\r\n];\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst SCHEMA_LOCATION =\r\n  'http://www.topografix.com/GPX/1/1 ' +\r\n  'http://www.topografix.com/GPX/1/1/gpx.xsd';\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, function(Node, Array<*>): (Feature|undefined)>}\r\n */\r\nconst FEATURE_READER = {\r\n  'rte': readRte,\r\n  'trk': readTrk,\r\n  'wpt': readWpt,\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst GPX_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'rte': makeArrayPusher(readRte),\r\n  'trk': makeArrayPusher(readTrk),\r\n  'wpt': makeArrayPusher(readWpt),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst LINK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'text': makeObjectPropertySetter(readString, 'linkText'),\r\n  'type': makeObjectPropertySetter(readString, 'linkType'),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst GPX_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'rte': makeChildAppender(writeRte),\r\n  'trk': makeChildAppender(writeTrk),\r\n  'wpt': makeChildAppender(writeWpt),\r\n});\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {function(Feature, Node):void} [readExtensions] Callback function\r\n * to process `extensions` nodes. To prevent memory leaks, this callback function must\r\n * not store any references to the node. Note that the `extensions`\r\n * node is not allowed in GPX 1.0. Moreover, only `extensions`\r\n * nodes from `wpt`, `rte` and `trk` can be processed, as those are\r\n * directly mapped to a feature.\r\n */\r\n\r\n/**\r\n * @typedef {Object} LayoutOptions\r\n * @property {boolean} [hasZ] HasZ.\r\n * @property {boolean} [hasM] HasM.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading and writing data in the GPX format.\r\n *\r\n * Note that {@link module:ol/format/GPX~GPX#readFeature} only reads the first\r\n * feature of the source.\r\n *\r\n * When reading, routes (`<rte>`) are converted into LineString geometries, and\r\n * tracks (`<trk>`) into MultiLineString. Any properties on route and track\r\n * waypoints are ignored.\r\n *\r\n * When writing, LineString geometries are output as routes (`<rte>`), and\r\n * MultiLineString as tracks (`<trk>`).\r\n *\r\n * @api\r\n */\r\nclass GPX extends XMLFeature {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     */\r\n    this.dataProjection = getProjection('EPSG:4326');\r\n\r\n    /**\r\n     * @type {function(Feature, Node): void|undefined}\r\n     * @private\r\n     */\r\n    this.readExtensions_ = options.readExtensions;\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Feature>} features List of features.\r\n   * @private\r\n   */\r\n  handleReadExtensions_(features) {\r\n    if (!features) {\r\n      features = [];\r\n    }\r\n    for (let i = 0, ii = features.length; i < ii; ++i) {\r\n      const feature = features[i];\r\n      if (this.readExtensions_) {\r\n        const extensionsNode = feature.get('extensionsNode_') || null;\r\n        this.readExtensions_(feature, extensionsNode);\r\n      }\r\n      feature.set('extensionsNode_', undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   */\r\n  readFeatureFromNode(node, options) {\r\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\r\n      return null;\r\n    }\r\n    const featureReader = FEATURE_READER[node.localName];\r\n    if (!featureReader) {\r\n      return null;\r\n    }\r\n    const feature = featureReader(node, [this.getReadOptions(node, options)]);\r\n    if (!feature) {\r\n      return null;\r\n    }\r\n    this.handleReadExtensions_([feature]);\r\n    return feature;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   */\r\n  readFeaturesFromNode(node, options) {\r\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\r\n      return [];\r\n    }\r\n    if (node.localName == 'gpx') {\r\n      /** @type {Array<Feature>} */\r\n      const features = pushParseAndPop([], GPX_PARSERS, node, [\r\n        this.getReadOptions(node, options),\r\n      ]);\r\n      if (features) {\r\n        this.handleReadExtensions_(features);\r\n        return features;\r\n      } else {\r\n        return [];\r\n      }\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features in the GPX format as an XML node.\r\n   * LineString geometries are output as routes (`<rte>`), and MultiLineString\r\n   * as tracks (`<trk>`).\r\n   *\r\n   * @param {Array<Feature>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\r\n   * @return {Node} Node.\r\n   * @api\r\n   */\r\n  writeFeaturesNode(features, options) {\r\n    options = this.adaptOptions(options);\r\n    //FIXME Serialize metadata\r\n    const gpx = createElementNS('http://www.topografix.com/GPX/1/1', 'gpx');\r\n    const xmlnsUri = 'http://www.w3.org/2000/xmlns/';\r\n    gpx.setAttributeNS(xmlnsUri, 'xmlns:xsi', XML_SCHEMA_INSTANCE_URI);\r\n    gpx.setAttributeNS(\r\n      XML_SCHEMA_INSTANCE_URI,\r\n      'xsi:schemaLocation',\r\n      SCHEMA_LOCATION\r\n    );\r\n    gpx.setAttribute('version', '1.1');\r\n    gpx.setAttribute('creator', 'OpenLayers');\r\n\r\n    pushSerializeAndPop(\r\n      /** @type {import(\"../xml.js\").NodeStackItem} */\r\n      ({node: gpx}),\r\n      GPX_SERIALIZERS,\r\n      GPX_NODE_FACTORY,\r\n      features,\r\n      [options]\r\n    );\r\n    return gpx;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst RTE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'name': makeObjectPropertySetter(readString),\r\n  'cmt': makeObjectPropertySetter(readString),\r\n  'desc': makeObjectPropertySetter(readString),\r\n  'src': makeObjectPropertySetter(readString),\r\n  'link': parseLink,\r\n  'number': makeObjectPropertySetter(readPositiveInteger),\r\n  'extensions': parseExtensions,\r\n  'type': makeObjectPropertySetter(readString),\r\n  'rtept': parseRtePt,\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst RTEPT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'ele': makeObjectPropertySetter(readDecimal),\r\n  'time': makeObjectPropertySetter(readDateTime),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst TRK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'name': makeObjectPropertySetter(readString),\r\n  'cmt': makeObjectPropertySetter(readString),\r\n  'desc': makeObjectPropertySetter(readString),\r\n  'src': makeObjectPropertySetter(readString),\r\n  'link': parseLink,\r\n  'number': makeObjectPropertySetter(readPositiveInteger),\r\n  'type': makeObjectPropertySetter(readString),\r\n  'extensions': parseExtensions,\r\n  'trkseg': parseTrkSeg,\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst TRKSEG_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'trkpt': parseTrkPt,\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst TRKPT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'ele': makeObjectPropertySetter(readDecimal),\r\n  'time': makeObjectPropertySetter(readDateTime),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst WPT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'ele': makeObjectPropertySetter(readDecimal),\r\n  'time': makeObjectPropertySetter(readDateTime),\r\n  'magvar': makeObjectPropertySetter(readDecimal),\r\n  'geoidheight': makeObjectPropertySetter(readDecimal),\r\n  'name': makeObjectPropertySetter(readString),\r\n  'cmt': makeObjectPropertySetter(readString),\r\n  'desc': makeObjectPropertySetter(readString),\r\n  'src': makeObjectPropertySetter(readString),\r\n  'link': parseLink,\r\n  'sym': makeObjectPropertySetter(readString),\r\n  'type': makeObjectPropertySetter(readString),\r\n  'fix': makeObjectPropertySetter(readString),\r\n  'sat': makeObjectPropertySetter(readPositiveInteger),\r\n  'hdop': makeObjectPropertySetter(readDecimal),\r\n  'vdop': makeObjectPropertySetter(readDecimal),\r\n  'pdop': makeObjectPropertySetter(readDecimal),\r\n  'ageofdgpsdata': makeObjectPropertySetter(readDecimal),\r\n  'dgpsid': makeObjectPropertySetter(readPositiveInteger),\r\n  'extensions': parseExtensions,\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Array<string>}\r\n */\r\nconst LINK_SEQUENCE = ['text', 'type'];\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst LINK_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'text': makeChildAppender(writeStringTextNode),\r\n  'type': makeChildAppender(writeStringTextNode),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst RTE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\r\n  'name',\r\n  'cmt',\r\n  'desc',\r\n  'src',\r\n  'link',\r\n  'number',\r\n  'type',\r\n  'rtept',\r\n]);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst RTE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'name': makeChildAppender(writeStringTextNode),\r\n  'cmt': makeChildAppender(writeStringTextNode),\r\n  'desc': makeChildAppender(writeStringTextNode),\r\n  'src': makeChildAppender(writeStringTextNode),\r\n  'link': makeChildAppender(writeLink),\r\n  'number': makeChildAppender(writeNonNegativeIntegerTextNode),\r\n  'type': makeChildAppender(writeStringTextNode),\r\n  'rtept': makeArraySerializer(makeChildAppender(writeWptType)),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst RTEPT_TYPE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['ele', 'time']);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst TRK_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\r\n  'name',\r\n  'cmt',\r\n  'desc',\r\n  'src',\r\n  'link',\r\n  'number',\r\n  'type',\r\n  'trkseg',\r\n]);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst TRK_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'name': makeChildAppender(writeStringTextNode),\r\n  'cmt': makeChildAppender(writeStringTextNode),\r\n  'desc': makeChildAppender(writeStringTextNode),\r\n  'src': makeChildAppender(writeStringTextNode),\r\n  'link': makeChildAppender(writeLink),\r\n  'number': makeChildAppender(writeNonNegativeIntegerTextNode),\r\n  'type': makeChildAppender(writeStringTextNode),\r\n  'trkseg': makeArraySerializer(makeChildAppender(writeTrkSeg)),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n */\r\nconst TRKSEG_NODE_FACTORY = makeSimpleNodeFactory('trkpt');\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst TRKSEG_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'trkpt': makeChildAppender(writeWptType),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst WPT_TYPE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\r\n  'ele',\r\n  'time',\r\n  'magvar',\r\n  'geoidheight',\r\n  'name',\r\n  'cmt',\r\n  'desc',\r\n  'src',\r\n  'link',\r\n  'sym',\r\n  'type',\r\n  'fix',\r\n  'sat',\r\n  'hdop',\r\n  'vdop',\r\n  'pdop',\r\n  'ageofdgpsdata',\r\n  'dgpsid',\r\n]);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst WPT_TYPE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'ele': makeChildAppender(writeDecimalTextNode),\r\n  'time': makeChildAppender(writeDateTimeTextNode),\r\n  'magvar': makeChildAppender(writeDecimalTextNode),\r\n  'geoidheight': makeChildAppender(writeDecimalTextNode),\r\n  'name': makeChildAppender(writeStringTextNode),\r\n  'cmt': makeChildAppender(writeStringTextNode),\r\n  'desc': makeChildAppender(writeStringTextNode),\r\n  'src': makeChildAppender(writeStringTextNode),\r\n  'link': makeChildAppender(writeLink),\r\n  'sym': makeChildAppender(writeStringTextNode),\r\n  'type': makeChildAppender(writeStringTextNode),\r\n  'fix': makeChildAppender(writeStringTextNode),\r\n  'sat': makeChildAppender(writeNonNegativeIntegerTextNode),\r\n  'hdop': makeChildAppender(writeDecimalTextNode),\r\n  'vdop': makeChildAppender(writeDecimalTextNode),\r\n  'pdop': makeChildAppender(writeDecimalTextNode),\r\n  'ageofdgpsdata': makeChildAppender(writeDecimalTextNode),\r\n  'dgpsid': makeChildAppender(writeNonNegativeIntegerTextNode),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, string>}\r\n */\r\nconst GEOMETRY_TYPE_TO_NODENAME = {\r\n  'Point': 'wpt',\r\n  'LineString': 'rte',\r\n  'MultiLineString': 'trk',\r\n};\r\n\r\n/**\r\n * @param {*} value Value.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @param {string} [nodeName] Node name.\r\n * @return {Node|undefined} Node.\r\n */\r\nfunction GPX_NODE_FACTORY(value, objectStack, nodeName) {\r\n  const geometry = /** @type {Feature} */ (value).getGeometry();\r\n  if (geometry) {\r\n    const nodeName = GEOMETRY_TYPE_TO_NODENAME[geometry.getType()];\r\n    if (nodeName) {\r\n      const parentNode = objectStack[objectStack.length - 1].node;\r\n      return createElementNS(parentNode.namespaceURI, nodeName);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {LayoutOptions} layoutOptions Layout options.\r\n * @param {Element} node Node.\r\n * @param {!Object} values Values.\r\n * @return {Array<number>} Flat coordinates.\r\n */\r\nfunction appendCoordinate(flatCoordinates, layoutOptions, node, values) {\r\n  flatCoordinates.push(\r\n    parseFloat(node.getAttribute('lon')),\r\n    parseFloat(node.getAttribute('lat'))\r\n  );\r\n  if ('ele' in values) {\r\n    flatCoordinates.push(/** @type {number} */ (values['ele']));\r\n    delete values['ele'];\r\n    layoutOptions.hasZ = true;\r\n  } else {\r\n    flatCoordinates.push(0);\r\n  }\r\n  if ('time' in values) {\r\n    flatCoordinates.push(/** @type {number} */ (values['time']));\r\n    delete values['time'];\r\n    layoutOptions.hasM = true;\r\n  } else {\r\n    flatCoordinates.push(0);\r\n  }\r\n  return flatCoordinates;\r\n}\r\n\r\n/**\r\n * Choose GeometryLayout based on flags in layoutOptions and adjust flatCoordinates\r\n * and ends arrays by shrinking them accordingly (removing unused zero entries).\r\n *\r\n * @param {LayoutOptions} layoutOptions Layout options.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {Array<number>} [ends] Ends.\r\n * @return {import(\"../geom/Geometry.js\").GeometryLayout} Layout.\r\n */\r\nfunction applyLayoutOptions(layoutOptions, flatCoordinates, ends) {\r\n  /** @type {import(\"../geom/Geometry.js\").GeometryLayout} */\r\n  let layout = 'XY';\r\n  let stride = 2;\r\n  if (layoutOptions.hasZ && layoutOptions.hasM) {\r\n    layout = 'XYZM';\r\n    stride = 4;\r\n  } else if (layoutOptions.hasZ) {\r\n    layout = 'XYZ';\r\n    stride = 3;\r\n  } else if (layoutOptions.hasM) {\r\n    layout = 'XYM';\r\n    stride = 3;\r\n  }\r\n  if (stride !== 4) {\r\n    for (let i = 0, ii = flatCoordinates.length / 4; i < ii; i++) {\r\n      flatCoordinates[i * stride] = flatCoordinates[i * 4];\r\n      flatCoordinates[i * stride + 1] = flatCoordinates[i * 4 + 1];\r\n      if (layoutOptions.hasZ) {\r\n        flatCoordinates[i * stride + 2] = flatCoordinates[i * 4 + 2];\r\n      }\r\n      if (layoutOptions.hasM) {\r\n        flatCoordinates[i * stride + 2] = flatCoordinates[i * 4 + 3];\r\n      }\r\n    }\r\n    flatCoordinates.length = (flatCoordinates.length / 4) * stride;\r\n    if (ends) {\r\n      for (let i = 0, ii = ends.length; i < ii; i++) {\r\n        ends[i] = (ends[i] / 4) * stride;\r\n      }\r\n    }\r\n  }\r\n  return layout;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction parseLink(node, objectStack) {\r\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const href = node.getAttribute('href');\r\n  if (href !== null) {\r\n    values['link'] = href;\r\n  }\r\n  parseNode(LINK_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction parseExtensions(node, objectStack) {\r\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  values['extensionsNode_'] = node;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction parseRtePt(node, objectStack) {\r\n  const values = pushParseAndPop({}, RTEPT_PARSERS, node, objectStack);\r\n  if (values) {\r\n    const rteValues = /** @type {!Object} */ (\r\n      objectStack[objectStack.length - 1]\r\n    );\r\n    const flatCoordinates = /** @type {Array<number>} */ (\r\n      rteValues['flatCoordinates']\r\n    );\r\n    const layoutOptions = /** @type {LayoutOptions} */ (\r\n      rteValues['layoutOptions']\r\n    );\r\n    appendCoordinate(flatCoordinates, layoutOptions, node, values);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction parseTrkPt(node, objectStack) {\r\n  const values = pushParseAndPop({}, TRKPT_PARSERS, node, objectStack);\r\n  if (values) {\r\n    const trkValues = /** @type {!Object} */ (\r\n      objectStack[objectStack.length - 1]\r\n    );\r\n    const flatCoordinates = /** @type {Array<number>} */ (\r\n      trkValues['flatCoordinates']\r\n    );\r\n    const layoutOptions = /** @type {LayoutOptions} */ (\r\n      trkValues['layoutOptions']\r\n    );\r\n    appendCoordinate(flatCoordinates, layoutOptions, node, values);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction parseTrkSeg(node, objectStack) {\r\n  const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  parseNode(TRKSEG_PARSERS, node, objectStack);\r\n  const flatCoordinates =\r\n    /** @type {Array<number>} */\r\n    (values['flatCoordinates']);\r\n  const ends = /** @type {Array<number>} */ (values['ends']);\r\n  ends.push(flatCoordinates.length);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Feature|undefined} Track.\r\n */\r\nfunction readRte(node, objectStack) {\r\n  const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (\r\n    objectStack[0]\r\n  );\r\n  const values = pushParseAndPop(\r\n    {\r\n      'flatCoordinates': [],\r\n      'layoutOptions': {},\r\n    },\r\n    RTE_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (!values) {\r\n    return undefined;\r\n  }\r\n  const flatCoordinates =\r\n    /** @type {Array<number>} */\r\n    (values['flatCoordinates']);\r\n  delete values['flatCoordinates'];\r\n  const layoutOptions = /** @type {LayoutOptions} */ (values['layoutOptions']);\r\n  delete values['layoutOptions'];\r\n  const layout = applyLayoutOptions(layoutOptions, flatCoordinates);\r\n  const geometry = new LineString(flatCoordinates, layout);\r\n  transformGeometryWithOptions(geometry, false, options);\r\n  const feature = new Feature(geometry);\r\n  feature.setProperties(values, true);\r\n  return feature;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Feature|undefined} Track.\r\n */\r\nfunction readTrk(node, objectStack) {\r\n  const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (\r\n    objectStack[0]\r\n  );\r\n  const values = pushParseAndPop(\r\n    {\r\n      'flatCoordinates': [],\r\n      'ends': [],\r\n      'layoutOptions': {},\r\n    },\r\n    TRK_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (!values) {\r\n    return undefined;\r\n  }\r\n  const flatCoordinates =\r\n    /** @type {Array<number>} */\r\n    (values['flatCoordinates']);\r\n  delete values['flatCoordinates'];\r\n  const ends = /** @type {Array<number>} */ (values['ends']);\r\n  delete values['ends'];\r\n  const layoutOptions = /** @type {LayoutOptions} */ (values['layoutOptions']);\r\n  delete values['layoutOptions'];\r\n  const layout = applyLayoutOptions(layoutOptions, flatCoordinates, ends);\r\n  const geometry = new MultiLineString(flatCoordinates, layout, ends);\r\n  transformGeometryWithOptions(geometry, false, options);\r\n  const feature = new Feature(geometry);\r\n  feature.setProperties(values, true);\r\n  return feature;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Feature|undefined} Waypoint.\r\n */\r\nfunction readWpt(node, objectStack) {\r\n  const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (\r\n    objectStack[0]\r\n  );\r\n  const values = pushParseAndPop({}, WPT_PARSERS, node, objectStack);\r\n  if (!values) {\r\n    return undefined;\r\n  }\r\n  const layoutOptions = /** @type {LayoutOptions} */ ({});\r\n  const coordinates = appendCoordinate([], layoutOptions, node, values);\r\n  const layout = applyLayoutOptions(layoutOptions, coordinates);\r\n  const geometry = new Point(coordinates, layout);\r\n  transformGeometryWithOptions(geometry, false, options);\r\n  const feature = new Feature(geometry);\r\n  feature.setProperties(values, true);\r\n  return feature;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {string} value Value for the link's `href` attribute.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeLink(node, value, objectStack) {\r\n  node.setAttribute('href', value);\r\n  const context = objectStack[objectStack.length - 1];\r\n  const properties = context['properties'];\r\n  const link = [properties['linkText'], properties['linkType']];\r\n  pushSerializeAndPop(\r\n    /** @type {import(\"../xml.js\").NodeStackItem} */ ({node: node}),\r\n    LINK_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    link,\r\n    objectStack,\r\n    LINK_SEQUENCE\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeWptType(node, coordinate, objectStack) {\r\n  const context = objectStack[objectStack.length - 1];\r\n  const parentNode = context.node;\r\n  const namespaceURI = parentNode.namespaceURI;\r\n  const properties = context['properties'];\r\n  //FIXME Projection handling\r\n  node.setAttributeNS(null, 'lat', String(coordinate[1]));\r\n  node.setAttributeNS(null, 'lon', String(coordinate[0]));\r\n  const geometryLayout = context['geometryLayout'];\r\n  switch (geometryLayout) {\r\n    case 'XYZM':\r\n      if (coordinate[3] !== 0) {\r\n        properties['time'] = coordinate[3];\r\n      }\r\n    // fall through\r\n    case 'XYZ':\r\n      if (coordinate[2] !== 0) {\r\n        properties['ele'] = coordinate[2];\r\n      }\r\n      break;\r\n    case 'XYM':\r\n      if (coordinate[2] !== 0) {\r\n        properties['time'] = coordinate[2];\r\n      }\r\n      break;\r\n    default:\r\n    // pass\r\n  }\r\n  const orderedKeys =\r\n    node.nodeName == 'rtept'\r\n      ? RTEPT_TYPE_SEQUENCE[namespaceURI]\r\n      : WPT_TYPE_SEQUENCE[namespaceURI];\r\n  const values = makeSequence(properties, orderedKeys);\r\n  pushSerializeAndPop(\r\n    /** @type {import(\"../xml.js\").NodeStackItem} */\r\n    ({node: node, 'properties': properties}),\r\n    WPT_TYPE_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {Feature} feature Feature.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeRte(node, feature, objectStack) {\r\n  const options = /** @type {import(\"./Feature.js\").WriteOptions} */ (\r\n    objectStack[0]\r\n  );\r\n  const properties = feature.getProperties();\r\n  const context = {node: node};\r\n  context['properties'] = properties;\r\n  const geometry = feature.getGeometry();\r\n  if (geometry.getType() == 'LineString') {\r\n    const lineString = /** @type {LineString} */ (\r\n      transformGeometryWithOptions(geometry, true, options)\r\n    );\r\n    context['geometryLayout'] = lineString.getLayout();\r\n    properties['rtept'] = lineString.getCoordinates();\r\n  }\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  const orderedKeys = RTE_SEQUENCE[parentNode.namespaceURI];\r\n  const values = makeSequence(properties, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    RTE_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Feature} feature Feature.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeTrk(node, feature, objectStack) {\r\n  const options = /** @type {import(\"./Feature.js\").WriteOptions} */ (\r\n    objectStack[0]\r\n  );\r\n  const properties = feature.getProperties();\r\n  /** @type {import(\"../xml.js\").NodeStackItem} */\r\n  const context = {node: node};\r\n  context['properties'] = properties;\r\n  const geometry = feature.getGeometry();\r\n  if (geometry.getType() == 'MultiLineString') {\r\n    const multiLineString = /** @type {MultiLineString} */ (\r\n      transformGeometryWithOptions(geometry, true, options)\r\n    );\r\n    properties['trkseg'] = multiLineString.getLineStrings();\r\n  }\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  const orderedKeys = TRK_SEQUENCE[parentNode.namespaceURI];\r\n  const values = makeSequence(properties, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    TRK_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {LineString} lineString LineString.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeTrkSeg(node, lineString, objectStack) {\r\n  /** @type {import(\"../xml.js\").NodeStackItem} */\r\n  const context = {node: node};\r\n  context['geometryLayout'] = lineString.getLayout();\r\n  context['properties'] = {};\r\n  pushSerializeAndPop(\r\n    context,\r\n    TRKSEG_SERIALIZERS,\r\n    TRKSEG_NODE_FACTORY,\r\n    lineString.getCoordinates(),\r\n    objectStack\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Feature} feature Feature.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeWpt(node, feature, objectStack) {\r\n  const options = /** @type {import(\"./Feature.js\").WriteOptions} */ (\r\n    objectStack[0]\r\n  );\r\n  const context = objectStack[objectStack.length - 1];\r\n  context['properties'] = feature.getProperties();\r\n  const geometry = feature.getGeometry();\r\n  if (geometry.getType() == 'Point') {\r\n    const point = /** @type {Point} */ (\r\n      transformGeometryWithOptions(geometry, true, options)\r\n    );\r\n    context['geometryLayout'] = point.getLayout();\r\n    writeWptType(node, point.getCoordinates(), objectStack);\r\n  }\r\n}\r\n\r\nexport default GPX;\r\n", "/**\r\n * @module ol/format/TextFeature\r\n */\r\nimport FeatureFormat from '../format/Feature.js';\r\nimport {abstract} from '../util.js';\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for text feature formats.\r\n *\r\n * @abstract\r\n */\r\nclass TextFeature extends FeatureFormat {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./Feature.js\").Type} Format.\r\n   */\r\n  getType() {\r\n    return 'text';\r\n  }\r\n\r\n  /**\r\n   * Read the feature from the source.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   * @api\r\n   */\r\n  readFeature(source, options) {\r\n    return this.readFeatureFromText(\r\n      getText(source),\r\n      this.adaptOptions(options)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   */\r\n  readFeatureFromText(text, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read the features from the source.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   * @api\r\n   */\r\n  readFeatures(source, options) {\r\n    return this.readFeaturesFromText(\r\n      getText(source),\r\n      this.adaptOptions(options)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   */\r\n  readFeaturesFromText(text, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read the geometry from the source.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   * @api\r\n   */\r\n  readGeometry(source, options) {\r\n    return this.readGeometryFromText(\r\n      getText(source),\r\n      this.adaptOptions(options)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometryFromText(text, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read the projection from the source.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\r\n   * @api\r\n   */\r\n  readProjection(source) {\r\n    return this.readProjectionFromText(getText(source));\r\n  }\r\n\r\n  /**\r\n   * @param {string} text Text.\r\n   * @protected\r\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\r\n   */\r\n  readProjectionFromText(text) {\r\n    return this.dataProjection;\r\n  }\r\n\r\n  /**\r\n   * Encode a feature as a string.\r\n   *\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded feature.\r\n   * @api\r\n   */\r\n  writeFeature(feature, options) {\r\n    return this.writeFeatureText(feature, this.adaptOptions(options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../Feature.js\").default} feature Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   */\r\n  writeFeatureText(feature, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features as string.\r\n   *\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded features.\r\n   * @api\r\n   */\r\n  writeFeatures(features, options) {\r\n    return this.writeFeaturesText(features, this.adaptOptions(options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   */\r\n  writeFeaturesText(features, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Write a single geometry.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Geometry.\r\n   * @api\r\n   */\r\n  writeGeometry(geometry, options) {\r\n    return this.writeGeometryText(geometry, this.adaptOptions(options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   */\r\n  writeGeometryText(geometry, options) {\r\n    return abstract();\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Document|Element|Object|string} source Source.\r\n * @return {string} Text.\r\n */\r\nfunction getText(source) {\r\n  if (typeof source === 'string') {\r\n    return source;\r\n  } else {\r\n    return '';\r\n  }\r\n}\r\n\r\nexport default TextFeature;\r\n", "/**\r\n * @module ol/format/IGC\r\n */\r\nimport Feature from '../Feature.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport TextFeature from './TextFeature.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {transformGeometryWithOptions} from './Feature.js';\r\n\r\n/**\r\n * @typedef {'barometric' | 'gps' | 'none'} IGCZ\r\n * IGC altitude/z. One of 'barometric', 'gps', 'none'.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {RegExp}\r\n */\r\nconst B_RECORD_RE =\r\n  /^B(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{5})([NS])(\\d{3})(\\d{5})([EW])([AV])(\\d{5})(\\d{5})/;\r\n\r\n/**\r\n * @const\r\n * @type {RegExp}\r\n */\r\nconst H_RECORD_RE = /^H.([A-Z]{3}).*?:(.*)/;\r\n\r\n/**\r\n * @const\r\n * @type {RegExp}\r\n */\r\nconst HFDTE_RECORD_RE = /^HFDTE(\\d{2})(\\d{2})(\\d{2})/;\r\n\r\n/**\r\n * A regular expression matching the newline characters `\\r\\n`, `\\r` and `\\n`.\r\n *\r\n * @const\r\n * @type {RegExp}\r\n */\r\nconst NEWLINE_RE = /\\r\\n|\\r|\\n/;\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {IGCZ} [altitudeMode='none'] Altitude mode. Possible\r\n * values are `'barometric'`, `'gps'`, and `'none'`.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for `*.igc` flight recording files.\r\n *\r\n * As IGC sources contain a single feature,\r\n * {@link module:ol/format/IGC~IGC#readFeatures} will return the feature in an\r\n * array\r\n *\r\n * @api\r\n */\r\nclass IGC extends TextFeature {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     */\r\n    this.dataProjection = getProjection('EPSG:4326');\r\n\r\n    /**\r\n     * @private\r\n     * @type {IGCZ}\r\n     */\r\n    this.altitudeMode_ = options.altitudeMode ? options.altitudeMode : 'none';\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   */\r\n  readFeatureFromText(text, options) {\r\n    const altitudeMode = this.altitudeMode_;\r\n    const lines = text.split(NEWLINE_RE);\r\n    /** @type {Object<string, string>} */\r\n    const properties = {};\r\n    const flatCoordinates = [];\r\n    let year = 2000;\r\n    let month = 0;\r\n    let day = 1;\r\n    let lastDateTime = -1;\r\n    let i, ii;\r\n    for (i = 0, ii = lines.length; i < ii; ++i) {\r\n      const line = lines[i];\r\n      let m;\r\n      if (line.charAt(0) == 'B') {\r\n        m = B_RECORD_RE.exec(line);\r\n        if (m) {\r\n          const hour = parseInt(m[1], 10);\r\n          const minute = parseInt(m[2], 10);\r\n          const second = parseInt(m[3], 10);\r\n          let y = parseInt(m[4], 10) + parseInt(m[5], 10) / 60000;\r\n          if (m[6] == 'S') {\r\n            y = -y;\r\n          }\r\n          let x = parseInt(m[7], 10) + parseInt(m[8], 10) / 60000;\r\n          if (m[9] == 'W') {\r\n            x = -x;\r\n          }\r\n          flatCoordinates.push(x, y);\r\n          if (altitudeMode != 'none') {\r\n            let z;\r\n            if (altitudeMode == 'gps') {\r\n              z = parseInt(m[11], 10);\r\n            } else if (altitudeMode == 'barometric') {\r\n              z = parseInt(m[12], 10);\r\n            } else {\r\n              z = 0;\r\n            }\r\n            flatCoordinates.push(z);\r\n          }\r\n          let dateTime = Date.UTC(year, month, day, hour, minute, second);\r\n          // Detect UTC midnight wrap around.\r\n          if (dateTime < lastDateTime) {\r\n            dateTime = Date.UTC(year, month, day + 1, hour, minute, second);\r\n          }\r\n          flatCoordinates.push(dateTime / 1000);\r\n          lastDateTime = dateTime;\r\n        }\r\n      } else if (line.charAt(0) == 'H') {\r\n        m = HFDTE_RECORD_RE.exec(line);\r\n        if (m) {\r\n          day = parseInt(m[1], 10);\r\n          month = parseInt(m[2], 10) - 1;\r\n          year = 2000 + parseInt(m[3], 10);\r\n        } else {\r\n          m = H_RECORD_RE.exec(line);\r\n          if (m) {\r\n            properties[m[1]] = m[2].trim();\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (flatCoordinates.length === 0) {\r\n      return null;\r\n    }\r\n    const layout = altitudeMode == 'none' ? 'XYM' : 'XYZM';\r\n    const lineString = new LineString(flatCoordinates, layout);\r\n    const feature = new Feature(\r\n      transformGeometryWithOptions(lineString, false, options)\r\n    );\r\n    feature.setProperties(properties, true);\r\n    return feature;\r\n  }\r\n\r\n  /**\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<Feature>} Features.\r\n   */\r\n  readFeaturesFromText(text, options) {\r\n    const feature = this.readFeatureFromText(text, options);\r\n    if (feature) {\r\n      return [feature];\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\nexport default IGC;\r\n", "/**\r\n * @module ol/format/KML\r\n */\r\nimport Feature from '../Feature.js';\r\nimport Fill from '../style/Fill.js';\r\nimport GeometryCollection from '../geom/GeometryCollection.js';\r\nimport Icon from '../style/Icon.js';\r\nimport ImageState from '../ImageState.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport MultiLineString from '../geom/MultiLineString.js';\r\nimport MultiPoint from '../geom/MultiPoint.js';\r\nimport MultiPolygon from '../geom/MultiPolygon.js';\r\nimport Point from '../geom/Point.js';\r\nimport Polygon from '../geom/Polygon.js';\r\nimport Stroke from '../style/Stroke.js';\r\nimport Style from '../style/Style.js';\r\nimport Text from '../style/Text.js';\r\nimport XMLFeature from './XMLFeature.js';\r\nimport {\r\n  OBJECT_PROPERTY_NODE_FACTORY,\r\n  XML_SCHEMA_INSTANCE_URI,\r\n  createElementNS,\r\n  getAllTextContent,\r\n  isDocument,\r\n  makeArrayExtender,\r\n  makeArrayPusher,\r\n  makeChildAppender,\r\n  makeObjectPropertySetter,\r\n  makeReplacer,\r\n  makeSequence,\r\n  makeSimpleNodeFactory,\r\n  makeStructureNS,\r\n  parse,\r\n  parseNode,\r\n  pushParseAndPop,\r\n  pushSerializeAndPop,\r\n} from '../xml.js';\r\nimport {asArray} from '../color.js';\r\nimport {assert} from '../asserts.js';\r\nimport {extend} from '../array.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {\r\n  readBoolean,\r\n  readDecimal,\r\n  readString,\r\n  writeBooleanTextNode,\r\n  writeCDATASection,\r\n  writeDecimalTextNode,\r\n  writeStringTextNode,\r\n} from './xsd.js';\r\nimport {toRadians} from '../math.js';\r\nimport {transformGeometryWithOptions} from './Feature.js';\r\n\r\n/**\r\n * @typedef {Object} Vec2\r\n * @property {number} x X coordinate.\r\n * @property {import(\"../style/Icon.js\").IconAnchorUnits} xunits Units of x.\r\n * @property {number} y Y coordinate.\r\n * @property {import(\"../style/Icon.js\").IconAnchorUnits} yunits Units of Y.\r\n * @property {import(\"../style/Icon.js\").IconOrigin} [origin] Origin.\r\n */\r\n\r\n/**\r\n * @typedef {Object} GxTrackObject\r\n * @property {Array<Array<number>>} coordinates Coordinates.\r\n * @property {Array<number>} whens Whens.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {Array<string>}\r\n */\r\nconst GX_NAMESPACE_URIS = ['http://www.google.com/kml/ext/2.2'];\r\n\r\n/**\r\n * @const\r\n * @type {Array<null|string>}\r\n */\r\nconst NAMESPACE_URIS = [\r\n  null,\r\n  'http://earth.google.com/kml/2.0',\r\n  'http://earth.google.com/kml/2.1',\r\n  'http://earth.google.com/kml/2.2',\r\n  'http://www.opengis.net/kml/2.2',\r\n];\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst SCHEMA_LOCATION =\r\n  'http://www.opengis.net/kml/2.2 ' +\r\n  'https://developers.google.com/kml/schema/kml22gx.xsd';\r\n\r\n/**\r\n * @type {Object<string, import(\"../style/Icon.js\").IconAnchorUnits>}\r\n */\r\nconst ICON_ANCHOR_UNITS_MAP = {\r\n  'fraction': 'fraction',\r\n  'pixels': 'pixels',\r\n  'insetPixels': 'pixels',\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst PLACEMARK_PARSERS = makeStructureNS(\r\n  NAMESPACE_URIS,\r\n  {\r\n    'ExtendedData': extendedDataParser,\r\n    'Region': regionParser,\r\n    'MultiGeometry': makeObjectPropertySetter(readMultiGeometry, 'geometry'),\r\n    'LineString': makeObjectPropertySetter(readLineString, 'geometry'),\r\n    'LinearRing': makeObjectPropertySetter(readLinearRing, 'geometry'),\r\n    'Point': makeObjectPropertySetter(readPoint, 'geometry'),\r\n    'Polygon': makeObjectPropertySetter(readPolygon, 'geometry'),\r\n    'Style': makeObjectPropertySetter(readStyle),\r\n    'StyleMap': placemarkStyleMapParser,\r\n    'address': makeObjectPropertySetter(readString),\r\n    'description': makeObjectPropertySetter(readString),\r\n    'name': makeObjectPropertySetter(readString),\r\n    'open': makeObjectPropertySetter(readBoolean),\r\n    'phoneNumber': makeObjectPropertySetter(readString),\r\n    'styleUrl': makeObjectPropertySetter(readStyleURL),\r\n    'visibility': makeObjectPropertySetter(readBoolean),\r\n  },\r\n  makeStructureNS(GX_NAMESPACE_URIS, {\r\n    'MultiTrack': makeObjectPropertySetter(readGxMultiTrack, 'geometry'),\r\n    'Track': makeObjectPropertySetter(readGxTrack, 'geometry'),\r\n  })\r\n);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst NETWORK_LINK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'ExtendedData': extendedDataParser,\r\n  'Region': regionParser,\r\n  'Link': linkParser,\r\n  'address': makeObjectPropertySetter(readString),\r\n  'description': makeObjectPropertySetter(readString),\r\n  'name': makeObjectPropertySetter(readString),\r\n  'open': makeObjectPropertySetter(readBoolean),\r\n  'phoneNumber': makeObjectPropertySetter(readString),\r\n  'visibility': makeObjectPropertySetter(readBoolean),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst LINK_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'href': makeObjectPropertySetter(readURI),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst REGION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'LatLonAltBox': latLonAltBoxParser,\r\n  'Lod': lodParser,\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst KML_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['Document', 'Placemark']);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst KML_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Document': makeChildAppender(writeDocument),\r\n  'Placemark': makeChildAppender(writePlacemark),\r\n});\r\n\r\n/**\r\n * @type {import(\"../color.js\").Color}\r\n */\r\nlet DEFAULT_COLOR;\r\n\r\n/**\r\n * @type {Fill|null}\r\n */\r\nlet DEFAULT_FILL_STYLE = null;\r\n\r\n/**\r\n * Get the default fill style (or null if not yet set).\r\n * @return {Fill|null} The default fill style.\r\n */\r\nexport function getDefaultFillStyle() {\r\n  return DEFAULT_FILL_STYLE;\r\n}\r\n\r\n/**\r\n * @type {import(\"../size.js\").Size}\r\n */\r\nlet DEFAULT_IMAGE_STYLE_ANCHOR;\r\n\r\n/**\r\n * @type {import(\"../style/Icon.js\").IconAnchorUnits}\r\n */\r\nlet DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\r\n\r\n/**\r\n * @type {import(\"../style/Icon.js\").IconAnchorUnits}\r\n */\r\nlet DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\r\n\r\n/**\r\n * @type {import(\"../size.js\").Size}\r\n */\r\nlet DEFAULT_IMAGE_STYLE_SIZE;\r\n\r\n/**\r\n * @type {string}\r\n */\r\nlet DEFAULT_IMAGE_STYLE_SRC;\r\n\r\n/**\r\n * @type {import(\"../style/Image.js\").default|null}\r\n */\r\nlet DEFAULT_IMAGE_STYLE = null;\r\n\r\n/**\r\n * Get the default image style (or null if not yet set).\r\n * @return {import(\"../style/Image.js\").default|null} The default image style.\r\n */\r\nexport function getDefaultImageStyle() {\r\n  return DEFAULT_IMAGE_STYLE;\r\n}\r\n\r\n/**\r\n * @type {string}\r\n */\r\nlet DEFAULT_NO_IMAGE_STYLE;\r\n\r\n/**\r\n * @type {Stroke|null}\r\n */\r\nlet DEFAULT_STROKE_STYLE = null;\r\n\r\n/**\r\n * Get the default stroke style (or null if not yet set).\r\n * @return {Stroke|null} The default stroke style.\r\n */\r\nexport function getDefaultStrokeStyle() {\r\n  return DEFAULT_STROKE_STYLE;\r\n}\r\n\r\n/**\r\n * @type {Stroke}\r\n */\r\nlet DEFAULT_TEXT_STROKE_STYLE;\r\n\r\n/**\r\n * @type {Text|null}\r\n */\r\nlet DEFAULT_TEXT_STYLE = null;\r\n\r\n/**\r\n * Get the default text style (or null if not yet set).\r\n * @return {Text|null} The default text style.\r\n */\r\nexport function getDefaultTextStyle() {\r\n  return DEFAULT_TEXT_STYLE;\r\n}\r\n\r\n/**\r\n * @type {Style|null}\r\n */\r\nlet DEFAULT_STYLE = null;\r\n\r\n/**\r\n * Get the default style (or null if not yet set).\r\n * @return {Style|null} The default style.\r\n */\r\nexport function getDefaultStyle() {\r\n  return DEFAULT_STYLE;\r\n}\r\n\r\n/**\r\n * @type {Array<Style>|null}\r\n */\r\nlet DEFAULT_STYLE_ARRAY = null;\r\n\r\n/**\r\n * Get the default style array (or null if not yet set).\r\n * @return {Array<Style>|null} The default style.\r\n */\r\nexport function getDefaultStyleArray() {\r\n  return DEFAULT_STYLE_ARRAY;\r\n}\r\n\r\n/**\r\n * Function that returns the scale needed to normalize an icon image to 32 pixels.\r\n * @param {import(\"../size.js\").Size} size Image size.\r\n * @return {number} Scale.\r\n */\r\nfunction scaleForSize(size) {\r\n  return 32 / Math.min(size[0], size[1]);\r\n}\r\n\r\nfunction createStyleDefaults() {\r\n  DEFAULT_COLOR = [255, 255, 255, 1];\r\n\r\n  DEFAULT_FILL_STYLE = new Fill({\r\n    color: DEFAULT_COLOR,\r\n  });\r\n\r\n  DEFAULT_IMAGE_STYLE_ANCHOR = [20, 2];\r\n\r\n  DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS = 'pixels';\r\n\r\n  DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS = 'pixels';\r\n\r\n  DEFAULT_IMAGE_STYLE_SIZE = [64, 64];\r\n\r\n  DEFAULT_IMAGE_STYLE_SRC =\r\n    'https://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png';\r\n\r\n  DEFAULT_IMAGE_STYLE = new Icon({\r\n    anchor: DEFAULT_IMAGE_STYLE_ANCHOR,\r\n    anchorOrigin: 'bottom-left',\r\n    anchorXUnits: DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS,\r\n    anchorYUnits: DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS,\r\n    crossOrigin: 'anonymous',\r\n    rotation: 0,\r\n    scale: scaleForSize(DEFAULT_IMAGE_STYLE_SIZE),\r\n    size: DEFAULT_IMAGE_STYLE_SIZE,\r\n    src: DEFAULT_IMAGE_STYLE_SRC,\r\n  });\r\n\r\n  DEFAULT_NO_IMAGE_STYLE = 'NO_IMAGE';\r\n\r\n  DEFAULT_STROKE_STYLE = new Stroke({\r\n    color: DEFAULT_COLOR,\r\n    width: 1,\r\n  });\r\n\r\n  DEFAULT_TEXT_STROKE_STYLE = new Stroke({\r\n    color: [51, 51, 51, 1],\r\n    width: 2,\r\n  });\r\n\r\n  DEFAULT_TEXT_STYLE = new Text({\r\n    font: 'bold 16px Helvetica',\r\n    fill: DEFAULT_FILL_STYLE,\r\n    stroke: DEFAULT_TEXT_STROKE_STYLE,\r\n    scale: 0.8,\r\n  });\r\n\r\n  DEFAULT_STYLE = new Style({\r\n    fill: DEFAULT_FILL_STYLE,\r\n    image: DEFAULT_IMAGE_STYLE,\r\n    text: DEFAULT_TEXT_STYLE,\r\n    stroke: DEFAULT_STROKE_STYLE,\r\n    zIndex: 0,\r\n  });\r\n\r\n  DEFAULT_STYLE_ARRAY = [DEFAULT_STYLE];\r\n}\r\n\r\n/**\r\n * @type {HTMLTextAreaElement}\r\n */\r\nlet TEXTAREA;\r\n\r\n/**\r\n * A function that takes a url `{string}` and returns a url `{string}`.\r\n * Might be used to change an icon path or to substitute a\r\n * data url obtained from a KMZ array buffer.\r\n *\r\n * @typedef {function(string):string} IconUrlFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * Function that returns a url unchanged.\r\n * @param {string} href Input url.\r\n * @return {string} Output url.\r\n */\r\nfunction defaultIconUrlFunction(href) {\r\n  return href;\r\n}\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {boolean} [extractStyles=true] Extract styles from the KML.\r\n * @property {boolean} [showPointNames=true] Show names as labels for placemarks which contain points.\r\n * @property {Array<Style>} [defaultStyle] Default style. The\r\n * default default style is the same as Google Earth.\r\n * @property {boolean} [writeStyles=true] Write styles into KML.\r\n * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images. Note that you must provide a\r\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * @property {IconUrlFunction} [iconUrlFunction] Function that takes a url string and returns a url string.\r\n * Might be used to change an icon path or to substitute a data url obtained from a KMZ array buffer.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading and writing data in the KML format.\r\n *\r\n * {@link module:ol/format/KML~KML#readFeature} will read the first feature from\r\n * a KML source.\r\n *\r\n * MultiGeometries are converted into GeometryCollections if they are a mix of\r\n * geometry types, and into MultiPoint/MultiLineString/MultiPolygon if they are\r\n * all of the same type.\r\n *\r\n * @api\r\n */\r\nclass KML extends XMLFeature {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    if (!DEFAULT_STYLE_ARRAY) {\r\n      createStyleDefaults();\r\n    }\r\n\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     */\r\n    this.dataProjection = getProjection('EPSG:4326');\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<Style>}\r\n     */\r\n    this.defaultStyle_ = options.defaultStyle\r\n      ? options.defaultStyle\r\n      : DEFAULT_STYLE_ARRAY;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.extractStyles_ =\r\n      options.extractStyles !== undefined ? options.extractStyles : true;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.writeStyles_ =\r\n      options.writeStyles !== undefined ? options.writeStyles : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, (Array<Style>|string)>}\r\n     */\r\n    this.sharedStyles_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.showPointNames_ =\r\n      options.showPointNames !== undefined ? options.showPointNames : true;\r\n\r\n    /**\r\n     * @type {null|string}\r\n     */\r\n    this.crossOrigin_ =\r\n      options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';\r\n\r\n    /**\r\n     * @type {IconUrlFunction}\r\n     */\r\n    this.iconUrlFunction_ = options.iconUrlFunction\r\n      ? options.iconUrlFunction\r\n      : defaultIconUrlFunction;\r\n\r\n    this.supportedMediaTypes = ['application/vnd.google-earth.kml+xml'];\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @private\r\n   * @return {Array<Feature>|undefined} Features.\r\n   */\r\n  readDocumentOrFolder_(node, objectStack) {\r\n    // FIXME use scope somehow\r\n    const parsersNS = makeStructureNS(NAMESPACE_URIS, {\r\n      'Document': makeArrayExtender(this.readDocumentOrFolder_, this),\r\n      'Folder': makeArrayExtender(this.readDocumentOrFolder_, this),\r\n      'Placemark': makeArrayPusher(this.readPlacemark_, this),\r\n      'Style': this.readSharedStyle_.bind(this),\r\n      'StyleMap': this.readSharedStyleMap_.bind(this),\r\n    });\r\n    /** @type {Array<Feature>} */\r\n    // @ts-ignore\r\n    const features = pushParseAndPop([], parsersNS, node, objectStack, this);\r\n    if (features) {\r\n      return features;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @private\r\n   * @return {Feature|undefined} Feature.\r\n   */\r\n  readPlacemark_(node, objectStack) {\r\n    const object = pushParseAndPop(\r\n      {'geometry': null},\r\n      PLACEMARK_PARSERS,\r\n      node,\r\n      objectStack,\r\n      this\r\n    );\r\n    if (!object) {\r\n      return undefined;\r\n    }\r\n    const feature = new Feature();\r\n    const id = node.getAttribute('id');\r\n    if (id !== null) {\r\n      feature.setId(id);\r\n    }\r\n    const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (\r\n      objectStack[0]\r\n    );\r\n\r\n    const geometry = object['geometry'];\r\n    if (geometry) {\r\n      transformGeometryWithOptions(geometry, false, options);\r\n    }\r\n    feature.setGeometry(geometry);\r\n    delete object['geometry'];\r\n\r\n    if (this.extractStyles_) {\r\n      const style = object['Style'];\r\n      const styleUrl = object['styleUrl'];\r\n      const styleFunction = createFeatureStyleFunction(\r\n        style,\r\n        styleUrl,\r\n        this.defaultStyle_,\r\n        this.sharedStyles_,\r\n        this.showPointNames_\r\n      );\r\n      feature.setStyle(styleFunction);\r\n    }\r\n    delete object['Style'];\r\n    // we do not remove the styleUrl property from the object, so it\r\n    // gets stored on feature when setProperties is called\r\n\r\n    feature.setProperties(object, true);\r\n\r\n    return feature;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @private\r\n   */\r\n  readSharedStyle_(node, objectStack) {\r\n    const id = node.getAttribute('id');\r\n    if (id !== null) {\r\n      const style = readStyle.call(this, node, objectStack);\r\n      if (style) {\r\n        let styleUri;\r\n        let baseURI = node.baseURI;\r\n        if (!baseURI || baseURI == 'about:blank') {\r\n          baseURI = window.location.href;\r\n        }\r\n        if (baseURI) {\r\n          const url = new URL('#' + id, baseURI);\r\n          styleUri = url.href;\r\n        } else {\r\n          styleUri = '#' + id;\r\n        }\r\n        this.sharedStyles_[styleUri] = style;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @private\r\n   */\r\n  readSharedStyleMap_(node, objectStack) {\r\n    const id = node.getAttribute('id');\r\n    if (id === null) {\r\n      return;\r\n    }\r\n    const styleMapValue = readStyleMapValue.call(this, node, objectStack);\r\n    if (!styleMapValue) {\r\n      return;\r\n    }\r\n    let styleUri;\r\n    let baseURI = node.baseURI;\r\n    if (!baseURI || baseURI == 'about:blank') {\r\n      baseURI = window.location.href;\r\n    }\r\n    if (baseURI) {\r\n      const url = new URL('#' + id, baseURI);\r\n      styleUri = url.href;\r\n    } else {\r\n      styleUri = '#' + id;\r\n    }\r\n    this.sharedStyles_[styleUri] = styleMapValue;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   */\r\n  readFeatureFromNode(node, options) {\r\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\r\n      return null;\r\n    }\r\n    const feature = this.readPlacemark_(node, [\r\n      this.getReadOptions(node, options),\r\n    ]);\r\n    if (feature) {\r\n      return feature;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   */\r\n  readFeaturesFromNode(node, options) {\r\n    if (!NAMESPACE_URIS.includes(node.namespaceURI)) {\r\n      return [];\r\n    }\r\n    let features;\r\n    const localName = node.localName;\r\n    if (localName == 'Document' || localName == 'Folder') {\r\n      features = this.readDocumentOrFolder_(node, [\r\n        this.getReadOptions(node, options),\r\n      ]);\r\n      if (features) {\r\n        return features;\r\n      } else {\r\n        return [];\r\n      }\r\n    } else if (localName == 'Placemark') {\r\n      const feature = this.readPlacemark_(node, [\r\n        this.getReadOptions(node, options),\r\n      ]);\r\n      if (feature) {\r\n        return [feature];\r\n      } else {\r\n        return [];\r\n      }\r\n    } else if (localName == 'kml') {\r\n      features = [];\r\n      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n        const fs = this.readFeaturesFromNode(n, options);\r\n        if (fs) {\r\n          extend(features, fs);\r\n        }\r\n      }\r\n      return features;\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Read the name of the KML.\r\n   *\r\n   * @param {Document|Element|string} source Source.\r\n   * @return {string|undefined} Name.\r\n   * @api\r\n   */\r\n  readName(source) {\r\n    if (!source) {\r\n      return undefined;\r\n    } else if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      return this.readNameFromDocument(doc);\r\n    } else if (isDocument(source)) {\r\n      return this.readNameFromDocument(/** @type {Document} */ (source));\r\n    } else {\r\n      return this.readNameFromNode(/** @type {Element} */ (source));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @return {string|undefined} Name.\r\n   */\r\n  readNameFromDocument(doc) {\r\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\r\n      if (n.nodeType == Node.ELEMENT_NODE) {\r\n        const name = this.readNameFromNode(/** @type {Element} */ (n));\r\n        if (name) {\r\n          return name;\r\n        }\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @return {string|undefined} Name.\r\n   */\r\n  readNameFromNode(node) {\r\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n      if (NAMESPACE_URIS.includes(n.namespaceURI) && n.localName == 'name') {\r\n        return readString(n);\r\n      }\r\n    }\r\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n      const localName = n.localName;\r\n      if (\r\n        NAMESPACE_URIS.includes(n.namespaceURI) &&\r\n        (localName == 'Document' ||\r\n          localName == 'Folder' ||\r\n          localName == 'Placemark' ||\r\n          localName == 'kml')\r\n      ) {\r\n        const name = this.readNameFromNode(n);\r\n        if (name) {\r\n          return name;\r\n        }\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Read the network links of the KML.\r\n   *\r\n   * @param {Document|Element|string} source Source.\r\n   * @return {Array<Object>} Network links.\r\n   * @api\r\n   */\r\n  readNetworkLinks(source) {\r\n    const networkLinks = [];\r\n    if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      extend(networkLinks, this.readNetworkLinksFromDocument(doc));\r\n    } else if (isDocument(source)) {\r\n      extend(\r\n        networkLinks,\r\n        this.readNetworkLinksFromDocument(/** @type {Document} */ (source))\r\n      );\r\n    } else {\r\n      extend(\r\n        networkLinks,\r\n        this.readNetworkLinksFromNode(/** @type {Element} */ (source))\r\n      );\r\n    }\r\n    return networkLinks;\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @return {Array<Object>} Network links.\r\n   */\r\n  readNetworkLinksFromDocument(doc) {\r\n    const networkLinks = [];\r\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\r\n      if (n.nodeType == Node.ELEMENT_NODE) {\r\n        extend(\r\n          networkLinks,\r\n          this.readNetworkLinksFromNode(/** @type {Element} */ (n))\r\n        );\r\n      }\r\n    }\r\n    return networkLinks;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @return {Array<Object>} Network links.\r\n   */\r\n  readNetworkLinksFromNode(node) {\r\n    const networkLinks = [];\r\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n      if (\r\n        NAMESPACE_URIS.includes(n.namespaceURI) &&\r\n        n.localName == 'NetworkLink'\r\n      ) {\r\n        const obj = pushParseAndPop({}, NETWORK_LINK_PARSERS, n, []);\r\n        networkLinks.push(obj);\r\n      }\r\n    }\r\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n      const localName = n.localName;\r\n      if (\r\n        NAMESPACE_URIS.includes(n.namespaceURI) &&\r\n        (localName == 'Document' || localName == 'Folder' || localName == 'kml')\r\n      ) {\r\n        extend(networkLinks, this.readNetworkLinksFromNode(n));\r\n      }\r\n    }\r\n    return networkLinks;\r\n  }\r\n\r\n  /**\r\n   * Read the regions of the KML.\r\n   *\r\n   * @param {Document|Element|string} source Source.\r\n   * @return {Array<Object>} Regions.\r\n   * @api\r\n   */\r\n  readRegion(source) {\r\n    const regions = [];\r\n    if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      extend(regions, this.readRegionFromDocument(doc));\r\n    } else if (isDocument(source)) {\r\n      extend(\r\n        regions,\r\n        this.readRegionFromDocument(/** @type {Document} */ (source))\r\n      );\r\n    } else {\r\n      extend(regions, this.readRegionFromNode(/** @type {Element} */ (source)));\r\n    }\r\n    return regions;\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @return {Array<Object>} Region.\r\n   */\r\n  readRegionFromDocument(doc) {\r\n    const regions = [];\r\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\r\n      if (n.nodeType == Node.ELEMENT_NODE) {\r\n        extend(regions, this.readRegionFromNode(/** @type {Element} */ (n)));\r\n      }\r\n    }\r\n    return regions;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @return {Array<Object>} Region.\r\n   * @api\r\n   */\r\n  readRegionFromNode(node) {\r\n    const regions = [];\r\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n      if (NAMESPACE_URIS.includes(n.namespaceURI) && n.localName == 'Region') {\r\n        const obj = pushParseAndPop({}, REGION_PARSERS, n, []);\r\n        regions.push(obj);\r\n      }\r\n    }\r\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n      const localName = n.localName;\r\n      if (\r\n        NAMESPACE_URIS.includes(n.namespaceURI) &&\r\n        (localName == 'Document' || localName == 'Folder' || localName == 'kml')\r\n      ) {\r\n        extend(regions, this.readRegionFromNode(n));\r\n      }\r\n    }\r\n    return regions;\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features in the KML format as an XML node. GeometryCollections,\r\n   * MultiPoints, MultiLineStrings, and MultiPolygons are output as MultiGeometries.\r\n   *\r\n   * @param {Array<Feature>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\r\n   * @return {Node} Node.\r\n   * @api\r\n   */\r\n  writeFeaturesNode(features, options) {\r\n    options = this.adaptOptions(options);\r\n    const kml = createElementNS(NAMESPACE_URIS[4], 'kml');\r\n    const xmlnsUri = 'http://www.w3.org/2000/xmlns/';\r\n    kml.setAttributeNS(xmlnsUri, 'xmlns:gx', GX_NAMESPACE_URIS[0]);\r\n    kml.setAttributeNS(xmlnsUri, 'xmlns:xsi', XML_SCHEMA_INSTANCE_URI);\r\n    kml.setAttributeNS(\r\n      XML_SCHEMA_INSTANCE_URI,\r\n      'xsi:schemaLocation',\r\n      SCHEMA_LOCATION\r\n    );\r\n\r\n    const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {\r\n        node: kml,\r\n      };\r\n    /** @type {!Object<string, (Array<Feature>|Feature|undefined)>} */\r\n    const properties = {};\r\n    if (features.length > 1) {\r\n      properties['Document'] = features;\r\n    } else if (features.length == 1) {\r\n      properties['Placemark'] = features[0];\r\n    }\r\n    const orderedKeys = KML_SEQUENCE[kml.namespaceURI];\r\n    const values = makeSequence(properties, orderedKeys);\r\n    pushSerializeAndPop(\r\n      context,\r\n      KML_SERIALIZERS,\r\n      OBJECT_PROPERTY_NODE_FACTORY,\r\n      values,\r\n      [options],\r\n      orderedKeys,\r\n      this\r\n    );\r\n    return kml;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Style|undefined} foundStyle Style.\r\n * @param {string} name Name.\r\n * @return {Style} style Style.\r\n */\r\nfunction createNameStyleFunction(foundStyle, name) {\r\n  const textOffset = [0, 0];\r\n  /** @type {CanvasTextAlign} */\r\n  let textAlign = 'start';\r\n  const imageStyle = foundStyle.getImage();\r\n  if (imageStyle) {\r\n    const imageSize = imageStyle.getSize();\r\n    if (imageSize && imageSize.length == 2) {\r\n      const imageScale = imageStyle.getScaleArray();\r\n      const anchor = imageStyle.getAnchor();\r\n      // Offset the label to be centered to the right of the icon,\r\n      // if there is one.\r\n      textOffset[0] = imageScale[0] * (imageSize[0] - anchor[0]);\r\n      textOffset[1] = imageScale[1] * (imageSize[1] / 2 - anchor[1]);\r\n      textAlign = 'left';\r\n    }\r\n  }\r\n  let textStyle = foundStyle.getText();\r\n  if (textStyle) {\r\n    // clone the text style, customizing it with name, alignments and offset.\r\n    // Note that kml does not support many text options that OpenLayers does (rotation, textBaseline).\r\n    textStyle = textStyle.clone();\r\n    textStyle.setFont(textStyle.getFont() || DEFAULT_TEXT_STYLE.getFont());\r\n    textStyle.setScale(textStyle.getScale() || DEFAULT_TEXT_STYLE.getScale());\r\n    textStyle.setFill(textStyle.getFill() || DEFAULT_TEXT_STYLE.getFill());\r\n    textStyle.setStroke(textStyle.getStroke() || DEFAULT_TEXT_STROKE_STYLE);\r\n  } else {\r\n    textStyle = DEFAULT_TEXT_STYLE.clone();\r\n  }\r\n  textStyle.setText(name);\r\n  textStyle.setOffsetX(textOffset[0]);\r\n  textStyle.setOffsetY(textOffset[1]);\r\n  textStyle.setTextAlign(textAlign);\r\n\r\n  const nameStyle = new Style({\r\n    image: imageStyle,\r\n    text: textStyle,\r\n  });\r\n  return nameStyle;\r\n}\r\n\r\n/**\r\n * @param {Array<Style>|undefined} style Style.\r\n * @param {string} styleUrl Style URL.\r\n * @param {Array<Style>} defaultStyle Default style.\r\n * @param {!Object<string, (Array<Style>|string)>} sharedStyles Shared styles.\r\n * @param {boolean|undefined} showPointNames true to show names for point placemarks.\r\n * @return {import(\"../style/Style.js\").StyleFunction} Feature style function.\r\n */\r\nfunction createFeatureStyleFunction(\r\n  style,\r\n  styleUrl,\r\n  defaultStyle,\r\n  sharedStyles,\r\n  showPointNames\r\n) {\r\n  return (\r\n    /**\r\n     * @param {Feature} feature feature.\r\n     * @param {number} resolution Resolution.\r\n     * @return {Array<Style>|Style} Style.\r\n     */\r\n    function (feature, resolution) {\r\n      let drawName = showPointNames;\r\n      let name = '';\r\n      let multiGeometryPoints = [];\r\n      if (drawName) {\r\n        const geometry = feature.getGeometry();\r\n        if (geometry) {\r\n          if (geometry instanceof GeometryCollection) {\r\n            multiGeometryPoints = geometry\r\n              .getGeometriesArrayRecursive()\r\n              .filter(function (geometry) {\r\n                const type = geometry.getType();\r\n                return type === 'Point' || type === 'MultiPoint';\r\n              });\r\n            drawName = multiGeometryPoints.length > 0;\r\n          } else {\r\n            const type = geometry.getType();\r\n            drawName = type === 'Point' || type === 'MultiPoint';\r\n          }\r\n        }\r\n      }\r\n\r\n      if (drawName) {\r\n        name = /** @type {string} */ (feature.get('name'));\r\n        drawName = drawName && !!name;\r\n        // convert any html character codes\r\n        if (drawName && /&[^&]+;/.test(name)) {\r\n          if (!TEXTAREA) {\r\n            TEXTAREA = document.createElement('textarea');\r\n          }\r\n          TEXTAREA.innerHTML = name;\r\n          name = TEXTAREA.value;\r\n        }\r\n      }\r\n\r\n      let featureStyle = defaultStyle;\r\n      if (style) {\r\n        featureStyle = style;\r\n      } else if (styleUrl) {\r\n        featureStyle = findStyle(styleUrl, defaultStyle, sharedStyles);\r\n      }\r\n      if (drawName) {\r\n        const nameStyle = createNameStyleFunction(featureStyle[0], name);\r\n        if (multiGeometryPoints.length > 0) {\r\n          // in multigeometries restrict the name style to points and create a\r\n          // style without image or text for geometries requiring fill or stroke\r\n          // including any polygon specific style if there is one\r\n          nameStyle.setGeometry(new GeometryCollection(multiGeometryPoints));\r\n          const baseStyle = new Style({\r\n            geometry: featureStyle[0].getGeometry(),\r\n            image: null,\r\n            fill: featureStyle[0].getFill(),\r\n            stroke: featureStyle[0].getStroke(),\r\n            text: null,\r\n          });\r\n          return [nameStyle, baseStyle].concat(featureStyle.slice(1));\r\n        }\r\n        return nameStyle;\r\n      }\r\n      return featureStyle;\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Array<Style>|string|undefined} styleValue Style value.\r\n * @param {Array<Style>} defaultStyle Default style.\r\n * @param {!Object<string, (Array<Style>|string)>} sharedStyles\r\n * Shared styles.\r\n * @return {Array<Style>} Style.\r\n */\r\nfunction findStyle(styleValue, defaultStyle, sharedStyles) {\r\n  if (Array.isArray(styleValue)) {\r\n    return styleValue;\r\n  } else if (typeof styleValue === 'string') {\r\n    return findStyle(sharedStyles[styleValue], defaultStyle, sharedStyles);\r\n  } else {\r\n    return defaultStyle;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @return {import(\"../color.js\").Color|undefined} Color.\r\n */\r\nfunction readColor(node) {\r\n  const s = getAllTextContent(node, false);\r\n  // The KML specification states that colors should not include a leading `#`\r\n  // but we tolerate them.\r\n  const m = /^\\s*#?\\s*([0-9A-Fa-f]{8})\\s*$/.exec(s);\r\n  if (m) {\r\n    const hexColor = m[1];\r\n    return [\r\n      parseInt(hexColor.substr(6, 2), 16),\r\n      parseInt(hexColor.substr(4, 2), 16),\r\n      parseInt(hexColor.substr(2, 2), 16),\r\n      parseInt(hexColor.substr(0, 2), 16) / 255,\r\n    ];\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @return {Array<number>|undefined} Flat coordinates.\r\n */\r\nexport function readFlatCoordinates(node) {\r\n  let s = getAllTextContent(node, false);\r\n  const flatCoordinates = [];\r\n  // The KML specification states that coordinate tuples should not include\r\n  // spaces, but we tolerate them.\r\n  s = s.replace(/\\s*,\\s*/g, ',');\r\n  const re =\r\n    /^\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?),([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)(?:\\s+|,|$)(?:([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)(?:\\s+|$))?\\s*/i;\r\n  let m;\r\n  while ((m = re.exec(s))) {\r\n    const x = parseFloat(m[1]);\r\n    const y = parseFloat(m[2]);\r\n    const z = m[3] ? parseFloat(m[3]) : 0;\r\n    flatCoordinates.push(x, y, z);\r\n    s = s.substr(m[0].length);\r\n  }\r\n  if (s !== '') {\r\n    return undefined;\r\n  }\r\n  return flatCoordinates;\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @return {string} URI.\r\n */\r\nfunction readURI(node) {\r\n  const s = getAllTextContent(node, false).trim();\r\n  let baseURI = node.baseURI;\r\n  if (!baseURI || baseURI == 'about:blank') {\r\n    baseURI = window.location.href;\r\n  }\r\n  if (baseURI) {\r\n    const url = new URL(s, baseURI);\r\n    return url.href;\r\n  } else {\r\n    return s;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @return {string} URI.\r\n */\r\nfunction readStyleURL(node) {\r\n  // KML files in the wild occasionally forget the leading\r\n  // `#` on styleUrlsdefined in the same document.\r\n  const s = getAllTextContent(node, false)\r\n    .trim()\r\n    .replace(/^(?!.*#)/, '#');\r\n  let baseURI = node.baseURI;\r\n  if (!baseURI || baseURI == 'about:blank') {\r\n    baseURI = window.location.href;\r\n  }\r\n  if (baseURI) {\r\n    const url = new URL(s, baseURI);\r\n    return url.href;\r\n  } else {\r\n    return s;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @return {Vec2} Vec2.\r\n */\r\nfunction readVec2(node) {\r\n  const xunits = node.getAttribute('xunits');\r\n  const yunits = node.getAttribute('yunits');\r\n  /** @type {import('../style/Icon.js').IconOrigin} */\r\n  let origin;\r\n  if (xunits !== 'insetPixels') {\r\n    if (yunits !== 'insetPixels') {\r\n      origin = 'bottom-left';\r\n    } else {\r\n      origin = 'top-left';\r\n    }\r\n  } else {\r\n    if (yunits !== 'insetPixels') {\r\n      origin = 'bottom-right';\r\n    } else {\r\n      origin = 'top-right';\r\n    }\r\n  }\r\n  return {\r\n    x: parseFloat(node.getAttribute('x')),\r\n    xunits: ICON_ANCHOR_UNITS_MAP[xunits],\r\n    y: parseFloat(node.getAttribute('y')),\r\n    yunits: ICON_ANCHOR_UNITS_MAP[yunits],\r\n    origin: origin,\r\n  };\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @return {number|undefined} Scale.\r\n */\r\nfunction readScale(node) {\r\n  return readDecimal(node);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst STYLE_MAP_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Pair': pairDataParser,\r\n});\r\n\r\n/**\r\n * @this {KML}\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Array<Style>|string|undefined} StyleMap.\r\n */\r\nfunction readStyleMapValue(node, objectStack) {\r\n  return pushParseAndPop(undefined, STYLE_MAP_PARSERS, node, objectStack, this);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst ICON_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Icon': makeObjectPropertySetter(readIcon),\r\n  'color': makeObjectPropertySetter(readColor),\r\n  'heading': makeObjectPropertySetter(readDecimal),\r\n  'hotSpot': makeObjectPropertySetter(readVec2),\r\n  'scale': makeObjectPropertySetter(readScale),\r\n});\r\n\r\n/**\r\n * @this {KML}\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction iconStyleParser(node, objectStack) {\r\n  // FIXME refreshMode\r\n  // FIXME refreshInterval\r\n  // FIXME viewRefreshTime\r\n  // FIXME viewBoundScale\r\n  // FIXME viewFormat\r\n  // FIXME httpQuery\r\n  const object = pushParseAndPop({}, ICON_STYLE_PARSERS, node, objectStack);\r\n  if (!object) {\r\n    return;\r\n  }\r\n  const styleObject = /** @type {Object} */ (\r\n    objectStack[objectStack.length - 1]\r\n  );\r\n  const IconObject = 'Icon' in object ? object['Icon'] : {};\r\n  const drawIcon = !('Icon' in object) || Object.keys(IconObject).length > 0;\r\n  let src;\r\n  const href = /** @type {string|undefined} */ (IconObject['href']);\r\n  if (href) {\r\n    src = href;\r\n  } else if (drawIcon) {\r\n    src = DEFAULT_IMAGE_STYLE_SRC;\r\n  }\r\n  let anchor, anchorXUnits, anchorYUnits;\r\n  /** @type {import('../style/Icon.js').IconOrigin|undefined} */\r\n  let anchorOrigin = 'bottom-left';\r\n  const hotSpot = /** @type {Vec2|undefined} */ (object['hotSpot']);\r\n  if (hotSpot) {\r\n    anchor = [hotSpot.x, hotSpot.y];\r\n    anchorXUnits = hotSpot.xunits;\r\n    anchorYUnits = hotSpot.yunits;\r\n    anchorOrigin = hotSpot.origin;\r\n  } else if (/^https?:\\/\\/maps\\.(?:google|gstatic)\\.com\\//.test(src)) {\r\n    // Google hotspots from https://kml4earth.appspot.com/icons.html#notes\r\n    if (src.includes('pushpin')) {\r\n      anchor = DEFAULT_IMAGE_STYLE_ANCHOR;\r\n      anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\r\n      anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\r\n    } else if (src.includes('arrow-reverse')) {\r\n      anchor = [54, 42];\r\n      anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\r\n      anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\r\n    } else if (src.includes('paddle')) {\r\n      anchor = [32, 1];\r\n      anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;\r\n      anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;\r\n    }\r\n  }\r\n\r\n  let offset;\r\n  const x = /** @type {number|undefined} */ (IconObject['x']);\r\n  const y = /** @type {number|undefined} */ (IconObject['y']);\r\n  if (x !== undefined && y !== undefined) {\r\n    offset = [x, y];\r\n  }\r\n\r\n  let size;\r\n  const w = /** @type {number|undefined} */ (IconObject['w']);\r\n  const h = /** @type {number|undefined} */ (IconObject['h']);\r\n  if (w !== undefined && h !== undefined) {\r\n    size = [w, h];\r\n  }\r\n\r\n  let rotation;\r\n  const heading = /** @type {number} */ (object['heading']);\r\n  if (heading !== undefined) {\r\n    rotation = toRadians(heading);\r\n  }\r\n\r\n  const scale = /** @type {number|undefined} */ (object['scale']);\r\n\r\n  const color = /** @type {Array<number>|undefined} */ (object['color']);\r\n\r\n  if (drawIcon) {\r\n    if (src == DEFAULT_IMAGE_STYLE_SRC) {\r\n      size = DEFAULT_IMAGE_STYLE_SIZE;\r\n    }\r\n\r\n    const imageStyle = new Icon({\r\n      anchor: anchor,\r\n      anchorOrigin: anchorOrigin,\r\n      anchorXUnits: anchorXUnits,\r\n      anchorYUnits: anchorYUnits,\r\n      crossOrigin: this.crossOrigin_,\r\n      offset: offset,\r\n      offsetOrigin: 'bottom-left',\r\n      rotation: rotation,\r\n      scale: scale,\r\n      size: size,\r\n      src: this.iconUrlFunction_(src),\r\n      color: color,\r\n    });\r\n\r\n    const imageScale = imageStyle.getScaleArray()[0];\r\n    const imageSize = imageStyle.getSize();\r\n    if (imageSize === null) {\r\n      const imageState = imageStyle.getImageState();\r\n      if (imageState === ImageState.IDLE || imageState === ImageState.LOADING) {\r\n        const listener = function () {\r\n          const imageState = imageStyle.getImageState();\r\n          if (\r\n            !(\r\n              imageState === ImageState.IDLE ||\r\n              imageState === ImageState.LOADING\r\n            )\r\n          ) {\r\n            const imageSize = imageStyle.getSize();\r\n            if (imageSize && imageSize.length == 2) {\r\n              const resizeScale = scaleForSize(imageSize);\r\n              imageStyle.setScale(imageScale * resizeScale);\r\n            }\r\n            imageStyle.unlistenImageChange(listener);\r\n          }\r\n        };\r\n        imageStyle.listenImageChange(listener);\r\n        if (imageState === ImageState.IDLE) {\r\n          imageStyle.load();\r\n        }\r\n      }\r\n    } else if (imageSize.length == 2) {\r\n      const resizeScale = scaleForSize(imageSize);\r\n      imageStyle.setScale(imageScale * resizeScale);\r\n    }\r\n    styleObject['imageStyle'] = imageStyle;\r\n  } else {\r\n    // handle the case when we explicitly want to draw no icon.\r\n    styleObject['imageStyle'] = DEFAULT_NO_IMAGE_STYLE;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst LABEL_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'color': makeObjectPropertySetter(readColor),\r\n  'scale': makeObjectPropertySetter(readScale),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction labelStyleParser(node, objectStack) {\r\n  // FIXME colorMode\r\n  const object = pushParseAndPop({}, LABEL_STYLE_PARSERS, node, objectStack);\r\n  if (!object) {\r\n    return;\r\n  }\r\n  const styleObject = objectStack[objectStack.length - 1];\r\n  const textStyle = new Text({\r\n    fill: new Fill({\r\n      color:\r\n        /** @type {import(\"../color.js\").Color} */\r\n        ('color' in object ? object['color'] : DEFAULT_COLOR),\r\n    }),\r\n    scale: /** @type {number|undefined} */ (object['scale']),\r\n  });\r\n  styleObject['textStyle'] = textStyle;\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst LINE_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'color': makeObjectPropertySetter(readColor),\r\n  'width': makeObjectPropertySetter(readDecimal),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction lineStyleParser(node, objectStack) {\r\n  // FIXME colorMode\r\n  // FIXME gx:outerColor\r\n  // FIXME gx:outerWidth\r\n  // FIXME gx:physicalWidth\r\n  // FIXME gx:labelVisibility\r\n  const object = pushParseAndPop({}, LINE_STYLE_PARSERS, node, objectStack);\r\n  if (!object) {\r\n    return;\r\n  }\r\n  const styleObject = objectStack[objectStack.length - 1];\r\n  const strokeStyle = new Stroke({\r\n    color:\r\n      /** @type {import(\"../color.js\").Color} */\r\n      ('color' in object ? object['color'] : DEFAULT_COLOR),\r\n    width: /** @type {number} */ ('width' in object ? object['width'] : 1),\r\n  });\r\n  styleObject['strokeStyle'] = strokeStyle;\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst POLY_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'color': makeObjectPropertySetter(readColor),\r\n  'fill': makeObjectPropertySetter(readBoolean),\r\n  'outline': makeObjectPropertySetter(readBoolean),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction polyStyleParser(node, objectStack) {\r\n  // FIXME colorMode\r\n  const object = pushParseAndPop({}, POLY_STYLE_PARSERS, node, objectStack);\r\n  if (!object) {\r\n    return;\r\n  }\r\n  const styleObject = objectStack[objectStack.length - 1];\r\n  const fillStyle = new Fill({\r\n    color:\r\n      /** @type {import(\"../color.js\").Color} */\r\n      ('color' in object ? object['color'] : DEFAULT_COLOR),\r\n  });\r\n  styleObject['fillStyle'] = fillStyle;\r\n  const fill = /** @type {boolean|undefined} */ (object['fill']);\r\n  if (fill !== undefined) {\r\n    styleObject['fill'] = fill;\r\n  }\r\n  const outline = /** @type {boolean|undefined} */ (object['outline']);\r\n  if (outline !== undefined) {\r\n    styleObject['outline'] = outline;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst FLAT_LINEAR_RING_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'coordinates': makeReplacer(readFlatCoordinates),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Array<number>} LinearRing flat coordinates.\r\n */\r\nfunction readFlatLinearRing(node, objectStack) {\r\n  return pushParseAndPop(null, FLAT_LINEAR_RING_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction gxCoordParser(node, objectStack) {\r\n  const gxTrackObject =\r\n    /** @type {GxTrackObject} */\r\n    (objectStack[objectStack.length - 1]);\r\n  const coordinates = gxTrackObject.coordinates;\r\n  const s = getAllTextContent(node, false);\r\n  const re =\r\n    /^\\s*([+\\-]?\\d+(?:\\.\\d*)?(?:e[+\\-]?\\d*)?)\\s+([+\\-]?\\d+(?:\\.\\d*)?(?:e[+\\-]?\\d*)?)\\s+([+\\-]?\\d+(?:\\.\\d*)?(?:e[+\\-]?\\d*)?)\\s*$/i;\r\n  const m = re.exec(s);\r\n  if (m) {\r\n    const x = parseFloat(m[1]);\r\n    const y = parseFloat(m[2]);\r\n    const z = parseFloat(m[3]);\r\n    coordinates.push([x, y, z]);\r\n  } else {\r\n    coordinates.push([]);\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst GX_MULTITRACK_GEOMETRY_PARSERS = makeStructureNS(GX_NAMESPACE_URIS, {\r\n  'Track': makeArrayPusher(readGxTrack),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {MultiLineString|undefined} MultiLineString.\r\n */\r\nfunction readGxMultiTrack(node, objectStack) {\r\n  const lineStrings = pushParseAndPop(\r\n    [],\r\n    GX_MULTITRACK_GEOMETRY_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (!lineStrings) {\r\n    return undefined;\r\n  }\r\n  return new MultiLineString(lineStrings);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst GX_TRACK_PARSERS = makeStructureNS(\r\n  NAMESPACE_URIS,\r\n  {\r\n    'when': whenParser,\r\n  },\r\n  makeStructureNS(GX_NAMESPACE_URIS, {\r\n    'coord': gxCoordParser,\r\n  })\r\n);\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {LineString|undefined} LineString.\r\n */\r\nfunction readGxTrack(node, objectStack) {\r\n  const gxTrackObject = pushParseAndPop(\r\n    /** @type {GxTrackObject} */ ({\r\n      coordinates: [],\r\n      whens: [],\r\n    }),\r\n    GX_TRACK_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (!gxTrackObject) {\r\n    return undefined;\r\n  }\r\n  const flatCoordinates = [];\r\n  const coordinates = gxTrackObject.coordinates;\r\n  const whens = gxTrackObject.whens;\r\n  for (\r\n    let i = 0, ii = Math.min(coordinates.length, whens.length);\r\n    i < ii;\r\n    ++i\r\n  ) {\r\n    if (coordinates[i].length == 3) {\r\n      flatCoordinates.push(\r\n        coordinates[i][0],\r\n        coordinates[i][1],\r\n        coordinates[i][2],\r\n        whens[i]\r\n      );\r\n    }\r\n  }\r\n  return new LineString(flatCoordinates, 'XYZM');\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst ICON_PARSERS = makeStructureNS(\r\n  NAMESPACE_URIS,\r\n  {\r\n    'href': makeObjectPropertySetter(readURI),\r\n  },\r\n  makeStructureNS(GX_NAMESPACE_URIS, {\r\n    'x': makeObjectPropertySetter(readDecimal),\r\n    'y': makeObjectPropertySetter(readDecimal),\r\n    'w': makeObjectPropertySetter(readDecimal),\r\n    'h': makeObjectPropertySetter(readDecimal),\r\n  })\r\n);\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object} Icon object.\r\n */\r\nfunction readIcon(node, objectStack) {\r\n  const iconObject = pushParseAndPop({}, ICON_PARSERS, node, objectStack);\r\n  if (iconObject) {\r\n    return iconObject;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst GEOMETRY_FLAT_COORDINATES_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'coordinates': makeReplacer(readFlatCoordinates),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Array<number>} Flat coordinates.\r\n */\r\nfunction readFlatCoordinatesFromNode(node, objectStack) {\r\n  return pushParseAndPop(\r\n    null,\r\n    GEOMETRY_FLAT_COORDINATES_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst EXTRUDE_AND_ALTITUDE_MODE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'extrude': makeObjectPropertySetter(readBoolean),\r\n  'tessellate': makeObjectPropertySetter(readBoolean),\r\n  'altitudeMode': makeObjectPropertySetter(readString),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {LineString|undefined} LineString.\r\n */\r\nfunction readLineString(node, objectStack) {\r\n  const properties = pushParseAndPop(\r\n    {},\r\n    EXTRUDE_AND_ALTITUDE_MODE_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);\r\n  if (flatCoordinates) {\r\n    const lineString = new LineString(flatCoordinates, 'XYZ');\r\n    lineString.setProperties(properties, true);\r\n    return lineString;\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Polygon|undefined} Polygon.\r\n */\r\nfunction readLinearRing(node, objectStack) {\r\n  const properties = pushParseAndPop(\r\n    {},\r\n    EXTRUDE_AND_ALTITUDE_MODE_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);\r\n  if (flatCoordinates) {\r\n    const polygon = new Polygon(flatCoordinates, 'XYZ', [\r\n      flatCoordinates.length,\r\n    ]);\r\n    polygon.setProperties(properties, true);\r\n    return polygon;\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst MULTI_GEOMETRY_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'LineString': makeArrayPusher(readLineString),\r\n  'LinearRing': makeArrayPusher(readLinearRing),\r\n  'MultiGeometry': makeArrayPusher(readMultiGeometry),\r\n  'Point': makeArrayPusher(readPoint),\r\n  'Polygon': makeArrayPusher(readPolygon),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n */\r\nfunction readMultiGeometry(node, objectStack) {\r\n  const geometries = pushParseAndPop(\r\n    [],\r\n    MULTI_GEOMETRY_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (!geometries) {\r\n    return null;\r\n  }\r\n  if (geometries.length === 0) {\r\n    return new GeometryCollection(geometries);\r\n  }\r\n  let multiGeometry;\r\n  let homogeneous = true;\r\n  const type = geometries[0].getType();\r\n  let geometry;\r\n  for (let i = 1, ii = geometries.length; i < ii; ++i) {\r\n    geometry = geometries[i];\r\n    if (geometry.getType() != type) {\r\n      homogeneous = false;\r\n      break;\r\n    }\r\n  }\r\n  if (homogeneous) {\r\n    let layout;\r\n    let flatCoordinates;\r\n    if (type == 'Point') {\r\n      const point = geometries[0];\r\n      layout = point.getLayout();\r\n      flatCoordinates = point.getFlatCoordinates();\r\n      for (let i = 1, ii = geometries.length; i < ii; ++i) {\r\n        geometry = geometries[i];\r\n        extend(flatCoordinates, geometry.getFlatCoordinates());\r\n      }\r\n      multiGeometry = new MultiPoint(flatCoordinates, layout);\r\n      setCommonGeometryProperties(multiGeometry, geometries);\r\n    } else if (type == 'LineString') {\r\n      multiGeometry = new MultiLineString(geometries);\r\n      setCommonGeometryProperties(multiGeometry, geometries);\r\n    } else if (type == 'Polygon') {\r\n      multiGeometry = new MultiPolygon(geometries);\r\n      setCommonGeometryProperties(multiGeometry, geometries);\r\n    } else if (type == 'GeometryCollection') {\r\n      multiGeometry = new GeometryCollection(geometries);\r\n    } else {\r\n      assert(false, 37); // Unknown geometry type found\r\n    }\r\n  } else {\r\n    multiGeometry = new GeometryCollection(geometries);\r\n  }\r\n  return /** @type {import(\"../geom/Geometry.js\").default} */ (multiGeometry);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Point|undefined} Point.\r\n */\r\nfunction readPoint(node, objectStack) {\r\n  const properties = pushParseAndPop(\r\n    {},\r\n    EXTRUDE_AND_ALTITUDE_MODE_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);\r\n  if (flatCoordinates) {\r\n    const point = new Point(flatCoordinates, 'XYZ');\r\n    point.setProperties(properties, true);\r\n    return point;\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst FLAT_LINEAR_RINGS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'innerBoundaryIs': innerBoundaryIsParser,\r\n  'outerBoundaryIs': outerBoundaryIsParser,\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Polygon|undefined} Polygon.\r\n */\r\nfunction readPolygon(node, objectStack) {\r\n  const properties = pushParseAndPop(\r\n    /** @type {Object<string,*>} */ ({}),\r\n    EXTRUDE_AND_ALTITUDE_MODE_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  const flatLinearRings = pushParseAndPop(\r\n    [null],\r\n    FLAT_LINEAR_RINGS_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (flatLinearRings && flatLinearRings[0]) {\r\n    const flatCoordinates = flatLinearRings[0];\r\n    const ends = [flatCoordinates.length];\r\n    for (let i = 1, ii = flatLinearRings.length; i < ii; ++i) {\r\n      extend(flatCoordinates, flatLinearRings[i]);\r\n      ends.push(flatCoordinates.length);\r\n    }\r\n    const polygon = new Polygon(flatCoordinates, 'XYZ', ends);\r\n    polygon.setProperties(properties, true);\r\n    return polygon;\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'IconStyle': iconStyleParser,\r\n  'LabelStyle': labelStyleParser,\r\n  'LineStyle': lineStyleParser,\r\n  'PolyStyle': polyStyleParser,\r\n});\r\n\r\n/**\r\n * @this {KML}\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Array<Style>} Style.\r\n */\r\nfunction readStyle(node, objectStack) {\r\n  const styleObject = pushParseAndPop(\r\n    {},\r\n    STYLE_PARSERS,\r\n    node,\r\n    objectStack,\r\n    this\r\n  );\r\n  if (!styleObject) {\r\n    return null;\r\n  }\r\n  let fillStyle =\r\n    /** @type {Fill} */\r\n    (\r\n      'fillStyle' in styleObject ? styleObject['fillStyle'] : DEFAULT_FILL_STYLE\r\n    );\r\n  const fill = /** @type {boolean|undefined} */ (styleObject['fill']);\r\n  if (fill !== undefined && !fill) {\r\n    fillStyle = null;\r\n  }\r\n  let imageStyle;\r\n  if ('imageStyle' in styleObject) {\r\n    if (styleObject['imageStyle'] != DEFAULT_NO_IMAGE_STYLE) {\r\n      imageStyle = styleObject['imageStyle'];\r\n    }\r\n  } else {\r\n    imageStyle = DEFAULT_IMAGE_STYLE;\r\n  }\r\n  const textStyle =\r\n    /** @type {Text} */\r\n    (\r\n      'textStyle' in styleObject ? styleObject['textStyle'] : DEFAULT_TEXT_STYLE\r\n    );\r\n  const strokeStyle =\r\n    /** @type {Stroke} */\r\n    (\r\n      'strokeStyle' in styleObject\r\n        ? styleObject['strokeStyle']\r\n        : DEFAULT_STROKE_STYLE\r\n    );\r\n  const outline = /** @type {boolean|undefined} */ (styleObject['outline']);\r\n  if (outline !== undefined && !outline) {\r\n    // if the polystyle specifies no outline two styles are needed,\r\n    // one for non-polygon geometries where linestrings require a stroke\r\n    // and one for polygons where there should be no stroke\r\n    return [\r\n      new Style({\r\n        geometry: function (feature) {\r\n          const geometry = feature.getGeometry();\r\n          const type = geometry.getType();\r\n          if (type === 'GeometryCollection') {\r\n            const collection =\r\n              /** @type {import(\"../geom/GeometryCollection\").default} */ (\r\n                geometry\r\n              );\r\n            return new GeometryCollection(\r\n              collection\r\n                .getGeometriesArrayRecursive()\r\n                .filter(function (geometry) {\r\n                  const type = geometry.getType();\r\n                  return type !== 'Polygon' && type !== 'MultiPolygon';\r\n                })\r\n            );\r\n          } else if (type !== 'Polygon' && type !== 'MultiPolygon') {\r\n            return geometry;\r\n          }\r\n        },\r\n        fill: fillStyle,\r\n        image: imageStyle,\r\n        stroke: strokeStyle,\r\n        text: textStyle,\r\n        zIndex: undefined, // FIXME\r\n      }),\r\n      new Style({\r\n        geometry: function (feature) {\r\n          const geometry = feature.getGeometry();\r\n          const type = geometry.getType();\r\n          if (type === 'GeometryCollection') {\r\n            const collection =\r\n              /** @type {import(\"../geom/GeometryCollection\").default} */ (\r\n                geometry\r\n              );\r\n            return new GeometryCollection(\r\n              collection\r\n                .getGeometriesArrayRecursive()\r\n                .filter(function (geometry) {\r\n                  const type = geometry.getType();\r\n                  return type === 'Polygon' || type === 'MultiPolygon';\r\n                })\r\n            );\r\n          } else if (type === 'Polygon' || type === 'MultiPolygon') {\r\n            return geometry;\r\n          }\r\n        },\r\n        fill: fillStyle,\r\n        stroke: null,\r\n        zIndex: undefined, // FIXME\r\n      }),\r\n    ];\r\n  }\r\n  return [\r\n    new Style({\r\n      fill: fillStyle,\r\n      image: imageStyle,\r\n      stroke: strokeStyle,\r\n      text: textStyle,\r\n      zIndex: undefined, // FIXME\r\n    }),\r\n  ];\r\n}\r\n\r\n/**\r\n * Reads an array of geometries and creates arrays for common geometry\r\n * properties. Then sets them to the multi geometry.\r\n * @param {MultiPoint|MultiLineString|MultiPolygon} multiGeometry A multi-geometry.\r\n * @param {Array<import(\"../geom/Geometry.js\").default>} geometries List of geometries.\r\n */\r\nfunction setCommonGeometryProperties(multiGeometry, geometries) {\r\n  const ii = geometries.length;\r\n  const extrudes = new Array(geometries.length);\r\n  const tessellates = new Array(geometries.length);\r\n  const altitudeModes = new Array(geometries.length);\r\n  let hasExtrude, hasTessellate, hasAltitudeMode;\r\n  hasExtrude = false;\r\n  hasTessellate = false;\r\n  hasAltitudeMode = false;\r\n  for (let i = 0; i < ii; ++i) {\r\n    const geometry = geometries[i];\r\n    extrudes[i] = geometry.get('extrude');\r\n    tessellates[i] = geometry.get('tessellate');\r\n    altitudeModes[i] = geometry.get('altitudeMode');\r\n    hasExtrude = hasExtrude || extrudes[i] !== undefined;\r\n    hasTessellate = hasTessellate || tessellates[i] !== undefined;\r\n    hasAltitudeMode = hasAltitudeMode || altitudeModes[i];\r\n  }\r\n  if (hasExtrude) {\r\n    multiGeometry.set('extrude', extrudes);\r\n  }\r\n  if (hasTessellate) {\r\n    multiGeometry.set('tessellate', tessellates);\r\n  }\r\n  if (hasAltitudeMode) {\r\n    multiGeometry.set('altitudeMode', altitudeModes);\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst DATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'displayName': makeObjectPropertySetter(readString),\r\n  'value': makeObjectPropertySetter(readString),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction dataParser(node, objectStack) {\r\n  const name = node.getAttribute('name');\r\n  parseNode(DATA_PARSERS, node, objectStack);\r\n  const featureObject = /** @type {Object} */ (\r\n    objectStack[objectStack.length - 1]\r\n  );\r\n  if (name && featureObject.displayName) {\r\n    featureObject[name] = {\r\n      value: featureObject.value,\r\n      displayName: featureObject.displayName,\r\n      toString: function () {\r\n        return featureObject.value;\r\n      },\r\n    };\r\n  } else if (name !== null) {\r\n    featureObject[name] = featureObject.value;\r\n  } else if (featureObject.displayName !== null) {\r\n    featureObject[featureObject.displayName] = featureObject.value;\r\n  }\r\n  delete featureObject['value'];\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst EXTENDED_DATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Data': dataParser,\r\n  'SchemaData': schemaDataParser,\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction extendedDataParser(node, objectStack) {\r\n  parseNode(EXTENDED_DATA_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction regionParser(node, objectStack) {\r\n  parseNode(REGION_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst PAIR_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Style': makeObjectPropertySetter(readStyle),\r\n  'key': makeObjectPropertySetter(readString),\r\n  'styleUrl': makeObjectPropertySetter(readStyleURL),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction pairDataParser(node, objectStack) {\r\n  const pairObject = pushParseAndPop({}, PAIR_PARSERS, node, objectStack, this);\r\n  if (!pairObject) {\r\n    return;\r\n  }\r\n  const key = /** @type {string|undefined} */ (pairObject['key']);\r\n  if (key && key == 'normal') {\r\n    const styleUrl = /** @type {string|undefined} */ (pairObject['styleUrl']);\r\n    if (styleUrl) {\r\n      objectStack[objectStack.length - 1] = styleUrl;\r\n    }\r\n    const style = /** @type {Style} */ (pairObject['Style']);\r\n    if (style) {\r\n      objectStack[objectStack.length - 1] = style;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @this {KML}\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction placemarkStyleMapParser(node, objectStack) {\r\n  const styleMapValue = readStyleMapValue.call(this, node, objectStack);\r\n  if (!styleMapValue) {\r\n    return;\r\n  }\r\n  const placemarkObject = objectStack[objectStack.length - 1];\r\n  if (Array.isArray(styleMapValue)) {\r\n    placemarkObject['Style'] = styleMapValue;\r\n  } else if (typeof styleMapValue === 'string') {\r\n    placemarkObject['styleUrl'] = styleMapValue;\r\n  } else {\r\n    assert(false, 38); // `styleMapValue` has an unknown type\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst SCHEMA_DATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'SimpleData': simpleDataParser,\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction schemaDataParser(node, objectStack) {\r\n  parseNode(SCHEMA_DATA_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction simpleDataParser(node, objectStack) {\r\n  const name = node.getAttribute('name');\r\n  if (name !== null) {\r\n    const data = readString(node);\r\n    const featureObject = /** @type {Object} */ (\r\n      objectStack[objectStack.length - 1]\r\n    );\r\n    featureObject[name] = data;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst LAT_LON_ALT_BOX_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'altitudeMode': makeObjectPropertySetter(readString),\r\n  'minAltitude': makeObjectPropertySetter(readDecimal),\r\n  'maxAltitude': makeObjectPropertySetter(readDecimal),\r\n  'north': makeObjectPropertySetter(readDecimal),\r\n  'south': makeObjectPropertySetter(readDecimal),\r\n  'east': makeObjectPropertySetter(readDecimal),\r\n  'west': makeObjectPropertySetter(readDecimal),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction latLonAltBoxParser(node, objectStack) {\r\n  const object = pushParseAndPop(\r\n    {},\r\n    LAT_LON_ALT_BOX_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (!object) {\r\n    return;\r\n  }\r\n  const regionObject = /** @type {Object} */ (\r\n    objectStack[objectStack.length - 1]\r\n  );\r\n  const extent = [\r\n    parseFloat(object['west']),\r\n    parseFloat(object['south']),\r\n    parseFloat(object['east']),\r\n    parseFloat(object['north']),\r\n  ];\r\n  regionObject['extent'] = extent;\r\n  regionObject['altitudeMode'] = object['altitudeMode'];\r\n  regionObject['minAltitude'] = parseFloat(object['minAltitude']);\r\n  regionObject['maxAltitude'] = parseFloat(object['maxAltitude']);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst LOD_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'minLodPixels': makeObjectPropertySetter(readDecimal),\r\n  'maxLodPixels': makeObjectPropertySetter(readDecimal),\r\n  'minFadeExtent': makeObjectPropertySetter(readDecimal),\r\n  'maxFadeExtent': makeObjectPropertySetter(readDecimal),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction lodParser(node, objectStack) {\r\n  const object = pushParseAndPop({}, LOD_PARSERS, node, objectStack);\r\n  if (!object) {\r\n    return;\r\n  }\r\n  const lodObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  lodObject['minLodPixels'] = parseFloat(object['minLodPixels']);\r\n  lodObject['maxLodPixels'] = parseFloat(object['maxLodPixels']);\r\n  lodObject['minFadeExtent'] = parseFloat(object['minFadeExtent']);\r\n  lodObject['maxFadeExtent'] = parseFloat(object['maxFadeExtent']);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst INNER_BOUNDARY_IS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  // KML spec only allows one LinearRing  per innerBoundaryIs, but Google Earth\r\n  // allows multiple, so we parse multiple here too.\r\n  'LinearRing': makeArrayPusher(readFlatLinearRing),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction innerBoundaryIsParser(node, objectStack) {\r\n  const innerBoundaryFlatLinearRings = pushParseAndPop(\r\n    /** @type {Array<Array<number>>} */ ([]),\r\n    INNER_BOUNDARY_IS_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (innerBoundaryFlatLinearRings.length > 0) {\r\n    const flatLinearRings =\r\n      /** @type {Array<Array<number>>} */\r\n      (objectStack[objectStack.length - 1]);\r\n    flatLinearRings.push(...innerBoundaryFlatLinearRings);\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst OUTER_BOUNDARY_IS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'LinearRing': makeReplacer(readFlatLinearRing),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction outerBoundaryIsParser(node, objectStack) {\r\n  /** @type {Array<number>|undefined} */\r\n  const flatLinearRing = pushParseAndPop(\r\n    undefined,\r\n    OUTER_BOUNDARY_IS_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (flatLinearRing) {\r\n    const flatLinearRings =\r\n      /** @type {Array<Array<number>>} */\r\n      (objectStack[objectStack.length - 1]);\r\n    flatLinearRings[0] = flatLinearRing;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction linkParser(node, objectStack) {\r\n  parseNode(LINK_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction whenParser(node, objectStack) {\r\n  const gxTrackObject =\r\n    /** @type {GxTrackObject} */\r\n    (objectStack[objectStack.length - 1]);\r\n  const whens = gxTrackObject.whens;\r\n  const s = getAllTextContent(node, false);\r\n  const when = Date.parse(s);\r\n  whens.push(isNaN(when) ? 0 : when);\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a TextNode with the color to.\r\n * @param {import(\"../color.js\").Color|string} color Color.\r\n */\r\nfunction writeColorTextNode(node, color) {\r\n  const rgba = asArray(color);\r\n  const opacity = rgba.length == 4 ? rgba[3] : 1;\r\n  /** @type {Array<string|number>} */\r\n  const abgr = [opacity * 255, rgba[2], rgba[1], rgba[0]];\r\n  for (let i = 0; i < 4; ++i) {\r\n    const hex = Math.floor(/** @type {number} */ (abgr[i])).toString(16);\r\n    abgr[i] = hex.length == 1 ? '0' + hex : hex;\r\n  }\r\n  writeStringTextNode(node, abgr.join(''));\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a TextNode with the coordinates to.\r\n * @param {Array<number>} coordinates Coordinates.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeCoordinatesTextNode(node, coordinates, objectStack) {\r\n  const context = objectStack[objectStack.length - 1];\r\n\r\n  const layout = context['layout'];\r\n  const stride = context['stride'];\r\n\r\n  let dimension;\r\n  if (layout == 'XY' || layout == 'XYM') {\r\n    dimension = 2;\r\n  } else if (layout == 'XYZ' || layout == 'XYZM') {\r\n    dimension = 3;\r\n  } else {\r\n    assert(false, 34); // Invalid geometry layout\r\n  }\r\n\r\n  const ii = coordinates.length;\r\n  let text = '';\r\n  if (ii > 0) {\r\n    text += coordinates[0];\r\n    for (let d = 1; d < dimension; ++d) {\r\n      text += ',' + coordinates[d];\r\n    }\r\n    for (let i = stride; i < ii; i += stride) {\r\n      text += ' ' + coordinates[i];\r\n      for (let d = 1; d < dimension; ++d) {\r\n        text += ',' + coordinates[i + d];\r\n      }\r\n    }\r\n  }\r\n  writeStringTextNode(node, text);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst EXTENDEDDATA_NODE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Data': makeChildAppender(writeDataNode),\r\n  'value': makeChildAppender(writeDataNodeValue),\r\n  'displayName': makeChildAppender(writeDataNodeName),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {{name: *, value: *}} pair Name value pair.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeDataNode(node, pair, objectStack) {\r\n  node.setAttribute('name', pair.name);\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  const value = pair.value;\r\n\r\n  if (typeof value == 'object') {\r\n    if (value !== null && value.displayName) {\r\n      pushSerializeAndPop(\r\n        context,\r\n        EXTENDEDDATA_NODE_SERIALIZERS,\r\n        OBJECT_PROPERTY_NODE_FACTORY,\r\n        [value.displayName],\r\n        objectStack,\r\n        ['displayName']\r\n      );\r\n    }\r\n\r\n    if (value !== null && value.value) {\r\n      pushSerializeAndPop(\r\n        context,\r\n        EXTENDEDDATA_NODE_SERIALIZERS,\r\n        OBJECT_PROPERTY_NODE_FACTORY,\r\n        [value.value],\r\n        objectStack,\r\n        ['value']\r\n      );\r\n    }\r\n  } else {\r\n    pushSerializeAndPop(\r\n      context,\r\n      EXTENDEDDATA_NODE_SERIALIZERS,\r\n      OBJECT_PROPERTY_NODE_FACTORY,\r\n      [value],\r\n      objectStack,\r\n      ['value']\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a TextNode with the name to.\r\n * @param {string} name DisplayName.\r\n */\r\nfunction writeDataNodeName(node, name) {\r\n  writeCDATASection(node, name);\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a CDATA Section with the value to.\r\n * @param {string} value Value.\r\n */\r\nfunction writeDataNodeValue(node, value) {\r\n  writeStringTextNode(node, value);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst DOCUMENT_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Placemark': makeChildAppender(writePlacemark),\r\n});\r\n\r\n/**\r\n * @const\r\n * @param {*} value Value.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @param {string} [nodeName] Node name.\r\n * @return {Node|undefined} Node.\r\n */\r\nconst DOCUMENT_NODE_FACTORY = function (value, objectStack, nodeName) {\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  return createElementNS(parentNode.namespaceURI, 'Placemark');\r\n};\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<Feature>} features Features.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @this {KML}\r\n */\r\nfunction writeDocument(node, features, objectStack) {\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  pushSerializeAndPop(\r\n    context,\r\n    DOCUMENT_SERIALIZERS,\r\n    DOCUMENT_NODE_FACTORY,\r\n    features,\r\n    objectStack,\r\n    undefined,\r\n    this\r\n  );\r\n}\r\n\r\n/**\r\n * A factory for creating Data nodes.\r\n * @const\r\n * @type {function(*, Array<*>): (Node|undefined)}\r\n */\r\nconst DATA_NODE_FACTORY = makeSimpleNodeFactory('Data');\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {{names: Array<string>, values: (Array<*>)}} namesAndValues Names and values.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeExtendedData(node, namesAndValues, objectStack) {\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  const names = namesAndValues.names;\r\n  const values = namesAndValues.values;\r\n  const length = names.length;\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    pushSerializeAndPop(\r\n      context,\r\n      EXTENDEDDATA_NODE_SERIALIZERS,\r\n      DATA_NODE_FACTORY,\r\n      [{name: names[i], value: values[i]}],\r\n      objectStack\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst ICON_SEQUENCE = makeStructureNS(\r\n  NAMESPACE_URIS,\r\n  ['href'],\r\n  makeStructureNS(GX_NAMESPACE_URIS, ['x', 'y', 'w', 'h'])\r\n);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst ICON_SERIALIZERS = makeStructureNS(\r\n  NAMESPACE_URIS,\r\n  {\r\n    'href': makeChildAppender(writeStringTextNode),\r\n  },\r\n  makeStructureNS(GX_NAMESPACE_URIS, {\r\n    'x': makeChildAppender(writeDecimalTextNode),\r\n    'y': makeChildAppender(writeDecimalTextNode),\r\n    'w': makeChildAppender(writeDecimalTextNode),\r\n    'h': makeChildAppender(writeDecimalTextNode),\r\n  })\r\n);\r\n\r\n/**\r\n * @const\r\n * @param {*} value Value.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @param {string} [nodeName] Node name.\r\n * @return {Node|undefined} Node.\r\n */\r\nconst GX_NODE_FACTORY = function (value, objectStack, nodeName) {\r\n  return createElementNS(GX_NAMESPACE_URIS[0], 'gx:' + nodeName);\r\n};\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Object} icon Icon object.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeIcon(node, icon, objectStack) {\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  let orderedKeys = ICON_SEQUENCE[parentNode.namespaceURI];\r\n  let values = makeSequence(icon, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    ICON_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n  orderedKeys = ICON_SEQUENCE[GX_NAMESPACE_URIS[0]];\r\n  values = makeSequence(icon, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    ICON_SERIALIZERS,\r\n    GX_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst ICON_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\r\n  'scale',\r\n  'heading',\r\n  'Icon',\r\n  'color',\r\n  'hotSpot',\r\n]);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst ICON_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Icon': makeChildAppender(writeIcon),\r\n  'color': makeChildAppender(writeColorTextNode),\r\n  'heading': makeChildAppender(writeDecimalTextNode),\r\n  'hotSpot': makeChildAppender(writeVec2),\r\n  'scale': makeChildAppender(writeScaleTextNode),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"../style/Icon.js\").default} style Icon style.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeIconStyle(node, style, objectStack) {\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  const /** @type {Object<string, any>} */ properties = {};\r\n  const src = style.getSrc();\r\n  const size = style.getSize();\r\n  const iconImageSize = style.getImageSize();\r\n  const iconProperties = {\r\n    'href': src,\r\n  };\r\n\r\n  if (size) {\r\n    iconProperties['w'] = size[0];\r\n    iconProperties['h'] = size[1];\r\n    const anchor = style.getAnchor(); // top-left\r\n    const origin = style.getOrigin(); // top-left\r\n\r\n    if (origin && iconImageSize && origin[0] !== 0 && origin[1] !== size[1]) {\r\n      iconProperties['x'] = origin[0];\r\n      iconProperties['y'] = iconImageSize[1] - (origin[1] + size[1]);\r\n    }\r\n\r\n    if (anchor && (anchor[0] !== size[0] / 2 || anchor[1] !== size[1] / 2)) {\r\n      const /** @type {Vec2} */ hotSpot = {\r\n          x: anchor[0],\r\n          xunits: 'pixels',\r\n          y: size[1] - anchor[1],\r\n          yunits: 'pixels',\r\n        };\r\n      properties['hotSpot'] = hotSpot;\r\n    }\r\n  }\r\n\r\n  properties['Icon'] = iconProperties;\r\n\r\n  let scale = style.getScaleArray()[0];\r\n  let imageSize = size;\r\n  if (imageSize === null) {\r\n    imageSize = DEFAULT_IMAGE_STYLE_SIZE;\r\n  }\r\n  if (imageSize.length == 2) {\r\n    const resizeScale = scaleForSize(imageSize);\r\n    scale = scale / resizeScale;\r\n  }\r\n  if (scale !== 1) {\r\n    properties['scale'] = scale;\r\n  }\r\n\r\n  const rotation = style.getRotation();\r\n  if (rotation !== 0) {\r\n    properties['heading'] = rotation; // 0-360\r\n  }\r\n\r\n  const color = style.getColor();\r\n  if (color) {\r\n    properties['color'] = color;\r\n  }\r\n\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  const orderedKeys = ICON_STYLE_SEQUENCE[parentNode.namespaceURI];\r\n  const values = makeSequence(properties, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    ICON_STYLE_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst LABEL_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\r\n  'color',\r\n  'scale',\r\n]);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst LABEL_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'color': makeChildAppender(writeColorTextNode),\r\n  'scale': makeChildAppender(writeScaleTextNode),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Text} style style.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeLabelStyle(node, style, objectStack) {\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  const properties = {};\r\n  const fill = style.getFill();\r\n  if (fill) {\r\n    properties['color'] = fill.getColor();\r\n  }\r\n  const scale = style.getScale();\r\n  if (scale && scale !== 1) {\r\n    properties['scale'] = scale;\r\n  }\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  const orderedKeys = LABEL_STYLE_SEQUENCE[parentNode.namespaceURI];\r\n  const values = makeSequence(properties, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    LABEL_STYLE_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst LINE_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['color', 'width']);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst LINE_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'color': makeChildAppender(writeColorTextNode),\r\n  'width': makeChildAppender(writeDecimalTextNode),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Stroke} style style.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeLineStyle(node, style, objectStack) {\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  const properties = {\r\n    'color': style.getColor(),\r\n    'width': Number(style.getWidth()) || 1,\r\n  };\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  const orderedKeys = LINE_STYLE_SEQUENCE[parentNode.namespaceURI];\r\n  const values = makeSequence(properties, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    LINE_STYLE_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, string>}\r\n */\r\nconst GEOMETRY_TYPE_TO_NODENAME = {\r\n  'Point': 'Point',\r\n  'LineString': 'LineString',\r\n  'LinearRing': 'LinearRing',\r\n  'Polygon': 'Polygon',\r\n  'MultiPoint': 'MultiGeometry',\r\n  'MultiLineString': 'MultiGeometry',\r\n  'MultiPolygon': 'MultiGeometry',\r\n  'GeometryCollection': 'MultiGeometry',\r\n};\r\n\r\n/**\r\n * @const\r\n * @param {*} value Value.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @param {string} [nodeName] Node name.\r\n * @return {Node|undefined} Node.\r\n */\r\nconst GEOMETRY_NODE_FACTORY = function (value, objectStack, nodeName) {\r\n  if (value) {\r\n    const parentNode = objectStack[objectStack.length - 1].node;\r\n    return createElementNS(\r\n      parentNode.namespaceURI,\r\n      GEOMETRY_TYPE_TO_NODENAME[\r\n        /** @type {import(\"../geom/Geometry.js\").default} */ (value).getType()\r\n      ]\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * A factory for creating Point nodes.\r\n * @const\r\n * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n */\r\nconst POINT_NODE_FACTORY = makeSimpleNodeFactory('Point');\r\n\r\n/**\r\n * A factory for creating LineString nodes.\r\n * @const\r\n * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n */\r\nconst LINE_STRING_NODE_FACTORY = makeSimpleNodeFactory('LineString');\r\n\r\n/**\r\n * A factory for creating LinearRing nodes.\r\n * @const\r\n * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n */\r\nconst LINEAR_RING_NODE_FACTORY = makeSimpleNodeFactory('LinearRing');\r\n\r\n/**\r\n * A factory for creating Polygon nodes.\r\n * @const\r\n * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n */\r\nconst POLYGON_NODE_FACTORY = makeSimpleNodeFactory('Polygon');\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst MULTI_GEOMETRY_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'LineString': makeChildAppender(writePrimitiveGeometry),\r\n  'Point': makeChildAppender(writePrimitiveGeometry),\r\n  'Polygon': makeChildAppender(writePolygon),\r\n  'GeometryCollection': makeChildAppender(writeMultiGeometry),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeMultiGeometry(node, geometry, objectStack) {\r\n  /** @type {import(\"../xml.js\").NodeStackItem} */\r\n  const context = {node: node};\r\n  const type = geometry.getType();\r\n  /** @type {Array<import(\"../geom/Geometry.js\").default>} */\r\n  let geometries = [];\r\n  /** @type {function(*, Array<*>, string=): (Node|undefined)} */\r\n  let factory;\r\n  if (type === 'GeometryCollection') {\r\n    /** @type {GeometryCollection} */ (geometry)\r\n      .getGeometriesArrayRecursive()\r\n      .forEach(function (geometry) {\r\n        const type = geometry.getType();\r\n        if (type === 'MultiPoint') {\r\n          geometries = geometries.concat(\r\n            /** @type {MultiPoint} */ (geometry).getPoints()\r\n          );\r\n        } else if (type === 'MultiLineString') {\r\n          geometries = geometries.concat(\r\n            /** @type {MultiLineString} */ (geometry).getLineStrings()\r\n          );\r\n        } else if (type === 'MultiPolygon') {\r\n          geometries = geometries.concat(\r\n            /** @type {MultiPolygon} */ (geometry).getPolygons()\r\n          );\r\n        } else if (\r\n          type === 'Point' ||\r\n          type === 'LineString' ||\r\n          type === 'Polygon'\r\n        ) {\r\n          geometries.push(geometry);\r\n        } else {\r\n          assert(false, 39); // Unknown geometry type\r\n        }\r\n      });\r\n    factory = GEOMETRY_NODE_FACTORY;\r\n  } else if (type === 'MultiPoint') {\r\n    geometries = /** @type {MultiPoint} */ (geometry).getPoints();\r\n    factory = POINT_NODE_FACTORY;\r\n  } else if (type === 'MultiLineString') {\r\n    geometries = /** @type {MultiLineString} */ (geometry).getLineStrings();\r\n    factory = LINE_STRING_NODE_FACTORY;\r\n  } else if (type === 'MultiPolygon') {\r\n    geometries = /** @type {MultiPolygon} */ (geometry).getPolygons();\r\n    factory = POLYGON_NODE_FACTORY;\r\n  } else {\r\n    assert(false, 39); // Unknown geometry type\r\n  }\r\n  pushSerializeAndPop(\r\n    context,\r\n    MULTI_GEOMETRY_SERIALIZERS,\r\n    factory,\r\n    geometries,\r\n    objectStack\r\n  );\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst BOUNDARY_IS_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'LinearRing': makeChildAppender(writePrimitiveGeometry),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"../geom/LinearRing.js\").default} linearRing Linear ring.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeBoundaryIs(node, linearRing, objectStack) {\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  pushSerializeAndPop(\r\n    context,\r\n    BOUNDARY_IS_SERIALIZERS,\r\n    LINEAR_RING_NODE_FACTORY,\r\n    [linearRing],\r\n    objectStack\r\n  );\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst PLACEMARK_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'ExtendedData': makeChildAppender(writeExtendedData),\r\n  'MultiGeometry': makeChildAppender(writeMultiGeometry),\r\n  'LineString': makeChildAppender(writePrimitiveGeometry),\r\n  'LinearRing': makeChildAppender(writePrimitiveGeometry),\r\n  'Point': makeChildAppender(writePrimitiveGeometry),\r\n  'Polygon': makeChildAppender(writePolygon),\r\n  'Style': makeChildAppender(writeStyle),\r\n  'address': makeChildAppender(writeStringTextNode),\r\n  'description': makeChildAppender(writeStringTextNode),\r\n  'name': makeChildAppender(writeStringTextNode),\r\n  'open': makeChildAppender(writeBooleanTextNode),\r\n  'phoneNumber': makeChildAppender(writeStringTextNode),\r\n  'styleUrl': makeChildAppender(writeStringTextNode),\r\n  'visibility': makeChildAppender(writeBooleanTextNode),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst PLACEMARK_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\r\n  'name',\r\n  'open',\r\n  'visibility',\r\n  'address',\r\n  'phoneNumber',\r\n  'description',\r\n  'styleUrl',\r\n  'Style',\r\n]);\r\n\r\n/**\r\n * A factory for creating ExtendedData nodes.\r\n * @const\r\n * @type {function(*, Array<*>): (Node|undefined)}\r\n */\r\nconst EXTENDEDDATA_NODE_FACTORY = makeSimpleNodeFactory('ExtendedData');\r\n\r\n/**\r\n * FIXME currently we do serialize arbitrary/custom feature properties\r\n * (ExtendedData).\r\n * @param {Element} node Node.\r\n * @param {Feature} feature Feature.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @this {KML}\r\n */\r\nfunction writePlacemark(node, feature, objectStack) {\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n\r\n  // set id\r\n  if (feature.getId()) {\r\n    node.setAttribute('id', /** @type {string} */ (feature.getId()));\r\n  }\r\n\r\n  // serialize properties (properties unknown to KML are not serialized)\r\n  const properties = feature.getProperties();\r\n\r\n  // don't export these to ExtendedData\r\n  const filter = {\r\n    'address': 1,\r\n    'description': 1,\r\n    'name': 1,\r\n    'open': 1,\r\n    'phoneNumber': 1,\r\n    'styleUrl': 1,\r\n    'visibility': 1,\r\n  };\r\n  filter[feature.getGeometryName()] = 1;\r\n  const keys = Object.keys(properties || {})\r\n    .sort()\r\n    .filter(function (v) {\r\n      return !filter[v];\r\n    });\r\n\r\n  const styleFunction = feature.getStyleFunction();\r\n  if (styleFunction) {\r\n    // FIXME the styles returned by the style function are supposed to be\r\n    // resolution-independent here\r\n    const styles = styleFunction(feature, 0);\r\n    if (styles) {\r\n      const styleArray = Array.isArray(styles) ? styles : [styles];\r\n      let pointStyles = styleArray;\r\n      if (feature.getGeometry()) {\r\n        pointStyles = styleArray.filter(function (style) {\r\n          const geometry = style.getGeometryFunction()(feature);\r\n          if (geometry) {\r\n            const type = geometry.getType();\r\n            if (type === 'GeometryCollection') {\r\n              return /** @type {GeometryCollection} */ (geometry)\r\n                .getGeometriesArrayRecursive()\r\n                .filter(function (geometry) {\r\n                  const type = geometry.getType();\r\n                  return type === 'Point' || type === 'MultiPoint';\r\n                }).length;\r\n            }\r\n            return type === 'Point' || type === 'MultiPoint';\r\n          }\r\n        });\r\n        ('Point');\r\n      }\r\n      if (this.writeStyles_) {\r\n        let lineStyles = styleArray;\r\n        let polyStyles = styleArray;\r\n        if (feature.getGeometry()) {\r\n          lineStyles = styleArray.filter(function (style) {\r\n            const geometry = style.getGeometryFunction()(feature);\r\n            if (geometry) {\r\n              const type = geometry.getType();\r\n              if (type === 'GeometryCollection') {\r\n                return /** @type {GeometryCollection} */ (geometry)\r\n                  .getGeometriesArrayRecursive()\r\n                  .filter(function (geometry) {\r\n                    const type = geometry.getType();\r\n                    return type === 'LineString' || type === 'MultiLineString';\r\n                  }).length;\r\n              }\r\n              return type === 'LineString' || type === 'MultiLineString';\r\n            }\r\n          });\r\n          polyStyles = styleArray.filter(function (style) {\r\n            const geometry = style.getGeometryFunction()(feature);\r\n            if (geometry) {\r\n              const type = geometry.getType();\r\n              if (type === 'GeometryCollection') {\r\n                return /** @type {GeometryCollection} */ (geometry)\r\n                  .getGeometriesArrayRecursive()\r\n                  .filter(function (geometry) {\r\n                    const type = geometry.getType();\r\n                    return type === 'Polygon' || type === 'MultiPolygon';\r\n                  }).length;\r\n              }\r\n              return type === 'Polygon' || type === 'MultiPolygon';\r\n            }\r\n          });\r\n        }\r\n        properties['Style'] = {\r\n          pointStyles: pointStyles,\r\n          lineStyles: lineStyles,\r\n          polyStyles: polyStyles,\r\n        };\r\n      }\r\n      if (pointStyles.length && properties['name'] === undefined) {\r\n        const textStyle = pointStyles[0].getText();\r\n        if (textStyle) {\r\n          properties['name'] = textStyle.getText();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  const orderedKeys = PLACEMARK_SEQUENCE[parentNode.namespaceURI];\r\n  const values = makeSequence(properties, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    PLACEMARK_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n\r\n  if (keys.length > 0) {\r\n    const sequence = makeSequence(properties, keys);\r\n    const namesAndValues = {names: keys, values: sequence};\r\n    pushSerializeAndPop(\r\n      context,\r\n      PLACEMARK_SERIALIZERS,\r\n      EXTENDEDDATA_NODE_FACTORY,\r\n      [namesAndValues],\r\n      objectStack\r\n    );\r\n  }\r\n\r\n  // serialize geometry\r\n  const options = /** @type {import(\"./Feature.js\").WriteOptions} */ (\r\n    objectStack[0]\r\n  );\r\n  let geometry = feature.getGeometry();\r\n  if (geometry) {\r\n    geometry = transformGeometryWithOptions(geometry, true, options);\r\n  }\r\n  pushSerializeAndPop(\r\n    context,\r\n    PLACEMARK_SERIALIZERS,\r\n    GEOMETRY_NODE_FACTORY,\r\n    [geometry],\r\n    objectStack\r\n  );\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst PRIMITIVE_GEOMETRY_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\r\n  'extrude',\r\n  'tessellate',\r\n  'altitudeMode',\r\n  'coordinates',\r\n]);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst PRIMITIVE_GEOMETRY_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'extrude': makeChildAppender(writeBooleanTextNode),\r\n  'tessellate': makeChildAppender(writeBooleanTextNode),\r\n  'altitudeMode': makeChildAppender(writeStringTextNode),\r\n  'coordinates': makeChildAppender(writeCoordinatesTextNode),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writePrimitiveGeometry(node, geometry, objectStack) {\r\n  const flatCoordinates = geometry.getFlatCoordinates();\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  context['layout'] = geometry.getLayout();\r\n  context['stride'] = geometry.getStride();\r\n\r\n  // serialize properties (properties unknown to KML are not serialized)\r\n  const properties = geometry.getProperties();\r\n  properties.coordinates = flatCoordinates;\r\n\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  const orderedKeys = PRIMITIVE_GEOMETRY_SEQUENCE[parentNode.namespaceURI];\r\n  const values = makeSequence(properties, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    PRIMITIVE_GEOMETRY_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst POLY_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\r\n  'color',\r\n  'fill',\r\n  'outline',\r\n]);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst POLYGON_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'outerBoundaryIs': makeChildAppender(writeBoundaryIs),\r\n  'innerBoundaryIs': makeChildAppender(writeBoundaryIs),\r\n});\r\n\r\n/**\r\n * A factory for creating innerBoundaryIs nodes.\r\n * @const\r\n * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n */\r\nconst INNER_BOUNDARY_NODE_FACTORY = makeSimpleNodeFactory('innerBoundaryIs');\r\n\r\n/**\r\n * A factory for creating outerBoundaryIs nodes.\r\n * @const\r\n * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n */\r\nconst OUTER_BOUNDARY_NODE_FACTORY = makeSimpleNodeFactory('outerBoundaryIs');\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Polygon} polygon Polygon.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writePolygon(node, polygon, objectStack) {\r\n  const linearRings = polygon.getLinearRings();\r\n  const outerRing = linearRings.shift();\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  // inner rings\r\n  pushSerializeAndPop(\r\n    context,\r\n    POLYGON_SERIALIZERS,\r\n    INNER_BOUNDARY_NODE_FACTORY,\r\n    linearRings,\r\n    objectStack\r\n  );\r\n  // outer ring\r\n  pushSerializeAndPop(\r\n    context,\r\n    POLYGON_SERIALIZERS,\r\n    OUTER_BOUNDARY_NODE_FACTORY,\r\n    [outerRing],\r\n    objectStack\r\n  );\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst POLY_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'color': makeChildAppender(writeColorTextNode),\r\n  'fill': makeChildAppender(writeBooleanTextNode),\r\n  'outline': makeChildAppender(writeBooleanTextNode),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Style} style Style.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writePolyStyle(node, style, objectStack) {\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  const fill = style.getFill();\r\n  const stroke = style.getStroke();\r\n  const properties = {\r\n    'color': fill ? fill.getColor() : undefined,\r\n    'fill': fill ? undefined : false,\r\n    'outline': stroke ? undefined : false,\r\n  };\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  const orderedKeys = POLY_STYLE_SEQUENCE[parentNode.namespaceURI];\r\n  const values = makeSequence(properties, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    POLY_STYLE_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Node} node Node to append a TextNode with the scale to.\r\n * @param {number|undefined} scale Scale.\r\n */\r\nfunction writeScaleTextNode(node, scale) {\r\n  // the Math is to remove any excess decimals created by float arithmetic\r\n  writeDecimalTextNode(node, Math.round(scale * 1e6) / 1e6);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Array<string>>}\r\n */\r\n// @ts-ignore\r\nconst STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [\r\n  'IconStyle',\r\n  'LabelStyle',\r\n  'LineStyle',\r\n  'PolyStyle',\r\n]);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\n// @ts-ignore\r\nconst STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'IconStyle': makeChildAppender(writeIconStyle),\r\n  'LabelStyle': makeChildAppender(writeLabelStyle),\r\n  'LineStyle': makeChildAppender(writeLineStyle),\r\n  'PolyStyle': makeChildAppender(writePolyStyle),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Object<string, Array<Style>>} styles Styles.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction writeStyle(node, styles, objectStack) {\r\n  const /** @type {import(\"../xml.js\").NodeStackItem} */ context = {node: node};\r\n  const properties = {};\r\n  if (styles.pointStyles.length) {\r\n    const textStyle = styles.pointStyles[0].getText();\r\n    if (textStyle) {\r\n      properties['LabelStyle'] = textStyle;\r\n    }\r\n    const imageStyle = styles.pointStyles[0].getImage();\r\n    if (\r\n      imageStyle &&\r\n      typeof (/** @type {?} */ (imageStyle).getSrc) === 'function'\r\n    ) {\r\n      properties['IconStyle'] = imageStyle;\r\n    }\r\n  }\r\n  if (styles.lineStyles.length) {\r\n    const strokeStyle = styles.lineStyles[0].getStroke();\r\n    if (strokeStyle) {\r\n      properties['LineStyle'] = strokeStyle;\r\n    }\r\n  }\r\n  if (styles.polyStyles.length) {\r\n    const strokeStyle = styles.polyStyles[0].getStroke();\r\n    if (strokeStyle && !properties['LineStyle']) {\r\n      properties['LineStyle'] = strokeStyle;\r\n    }\r\n    properties['PolyStyle'] = styles.polyStyles[0];\r\n  }\r\n  const parentNode = objectStack[objectStack.length - 1].node;\r\n  const orderedKeys = STYLE_SEQUENCE[parentNode.namespaceURI];\r\n  const values = makeSequence(properties, orderedKeys);\r\n  pushSerializeAndPop(\r\n    context,\r\n    STYLE_SERIALIZERS,\r\n    OBJECT_PROPERTY_NODE_FACTORY,\r\n    values,\r\n    objectStack,\r\n    orderedKeys\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Element} node Node to append a TextNode with the Vec2 to.\r\n * @param {Vec2} vec2 Vec2.\r\n */\r\nfunction writeVec2(node, vec2) {\r\n  node.setAttribute('x', String(vec2.x));\r\n  node.setAttribute('y', String(vec2.y));\r\n  node.setAttribute('xunits', vec2.xunits);\r\n  node.setAttribute('yunits', vec2.yunits);\r\n}\r\n\r\nexport default KML;\r\n", "/**\r\n * @module ol/format/XML\r\n */\r\nimport {isDocument, parse} from '../xml.js';\r\n\r\n/**\r\n * @classdesc\r\n * Generic format for reading non-feature XML data\r\n *\r\n * @abstract\r\n */\r\nclass XML {\r\n  /**\r\n   * Read the source document.\r\n   *\r\n   * @param {Document|Element|string} source The XML source.\r\n   * @return {Object} An object representing the source.\r\n   * @api\r\n   */\r\n  read(source) {\r\n    if (!source) {\r\n      return null;\r\n    } else if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      return this.readFromDocument(doc);\r\n    } else if (isDocument(source)) {\r\n      return this.readFromDocument(/** @type {Document} */ (source));\r\n    } else {\r\n      return this.readFromNode(/** @type {Element} */ (source));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @return {Object} Object\r\n   */\r\n  readFromDocument(doc) {\r\n    for (let n = doc.firstChild; n; n = n.nextSibling) {\r\n      if (n.nodeType == Node.ELEMENT_NODE) {\r\n        return this.readFromNode(/** @type {Element} */ (n));\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Element} node Node.\r\n   * @return {Object} Object\r\n   */\r\n  readFromNode(node) {}\r\n}\r\n\r\nexport default XML;\r\n", "/**\r\n * @module ol/format/xlink\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst NAMESPACE_URI = 'http://www.w3.org/1999/xlink';\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @return {string|undefined} href.\r\n */\r\nexport function readHref(node) {\r\n  return node.getAttributeNS(NAMESPACE_URI, 'href');\r\n}\r\n", "/**\r\n * @module ol/format/OWS\r\n */\r\nimport XML from './XML.js';\r\nimport {\r\n  makeObjectPropertyPusher,\r\n  makeObjectPropertySetter,\r\n  makeStructureNS,\r\n  pushParseAndPop,\r\n} from '../xml.js';\r\nimport {readHref} from './xlink.js';\r\nimport {readString} from './xsd.js';\r\n\r\n/**\r\n * @const\r\n * @type {Array<null|string>}\r\n */\r\nconst NAMESPACE_URIS = [null, 'http://www.opengis.net/ows/1.1'];\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'ServiceIdentification': makeObjectPropertySetter(readServiceIdentification),\r\n  'ServiceProvider': makeObjectPropertySetter(readServiceProvider),\r\n  'OperationsMetadata': makeObjectPropertySetter(readOperationsMetadata),\r\n});\r\n\r\nclass OWS extends XML {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @return {Object} Object\r\n   */\r\n  readFromNode(node) {\r\n    const owsObject = pushParseAndPop({}, PARSERS, node, []);\r\n    return owsObject ? owsObject : null;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst ADDRESS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'DeliveryPoint': makeObjectPropertySetter(readString),\r\n  'City': makeObjectPropertySetter(readString),\r\n  'AdministrativeArea': makeObjectPropertySetter(readString),\r\n  'PostalCode': makeObjectPropertySetter(readString),\r\n  'Country': makeObjectPropertySetter(readString),\r\n  'ElectronicMailAddress': makeObjectPropertySetter(readString),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst ALLOWED_VALUES_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Value': makeObjectPropertyPusher(readValue),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst CONSTRAINT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'AllowedValues': makeObjectPropertySetter(readAllowedValues),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst CONTACT_INFO_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Phone': makeObjectPropertySetter(readPhone),\r\n  'Address': makeObjectPropertySetter(readAddress),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst DCP_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'HTTP': makeObjectPropertySetter(readHttp),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst HTTP_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Get': makeObjectPropertyPusher(readGet),\r\n  'Post': undefined, // TODO\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst OPERATION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'DCP': makeObjectPropertySetter(readDcp),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst OPERATIONS_METADATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Operation': readOperation,\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst PHONE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Voice': makeObjectPropertySetter(readString),\r\n  'Facsimile': makeObjectPropertySetter(readString),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst REQUEST_METHOD_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Constraint': makeObjectPropertyPusher(readConstraint),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst SERVICE_CONTACT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'IndividualName': makeObjectPropertySetter(readString),\r\n  'PositionName': makeObjectPropertySetter(readString),\r\n  'ContactInfo': makeObjectPropertySetter(readContactInfo),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst SERVICE_IDENTIFICATION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Abstract': makeObjectPropertySetter(readString),\r\n  'AccessConstraints': makeObjectPropertySetter(readString),\r\n  'Fees': makeObjectPropertySetter(readString),\r\n  'Title': makeObjectPropertySetter(readString),\r\n  'ServiceTypeVersion': makeObjectPropertySetter(readString),\r\n  'ServiceType': makeObjectPropertySetter(readString),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst SERVICE_PROVIDER_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'ProviderName': makeObjectPropertySetter(readString),\r\n  'ProviderSite': makeObjectPropertySetter(readHref),\r\n  'ServiceContact': makeObjectPropertySetter(readServiceContact),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The address.\r\n */\r\nfunction readAddress(node, objectStack) {\r\n  return pushParseAndPop({}, ADDRESS_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The values.\r\n */\r\nfunction readAllowedValues(node, objectStack) {\r\n  return pushParseAndPop({}, ALLOWED_VALUES_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The constraint.\r\n */\r\nfunction readConstraint(node, objectStack) {\r\n  const name = node.getAttribute('name');\r\n  if (!name) {\r\n    return undefined;\r\n  }\r\n  return pushParseAndPop({'name': name}, CONSTRAINT_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The contact info.\r\n */\r\nfunction readContactInfo(node, objectStack) {\r\n  return pushParseAndPop({}, CONTACT_INFO_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The DCP.\r\n */\r\nfunction readDcp(node, objectStack) {\r\n  return pushParseAndPop({}, DCP_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The GET object.\r\n */\r\nfunction readGet(node, objectStack) {\r\n  const href = readHref(node);\r\n  if (!href) {\r\n    return undefined;\r\n  }\r\n  return pushParseAndPop(\r\n    {'href': href},\r\n    REQUEST_METHOD_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The HTTP object.\r\n */\r\nfunction readHttp(node, objectStack) {\r\n  return pushParseAndPop({}, HTTP_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The operation.\r\n */\r\nfunction readOperation(node, objectStack) {\r\n  const name = node.getAttribute('name');\r\n  const value = pushParseAndPop({}, OPERATION_PARSERS, node, objectStack);\r\n  if (!value) {\r\n    return undefined;\r\n  }\r\n  const object = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  object[name] = value;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The operations metadata.\r\n */\r\nfunction readOperationsMetadata(node, objectStack) {\r\n  return pushParseAndPop({}, OPERATIONS_METADATA_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The phone.\r\n */\r\nfunction readPhone(node, objectStack) {\r\n  return pushParseAndPop({}, PHONE_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The service identification.\r\n */\r\nfunction readServiceIdentification(node, objectStack) {\r\n  return pushParseAndPop({}, SERVICE_IDENTIFICATION_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The service contact.\r\n */\r\nfunction readServiceContact(node, objectStack) {\r\n  return pushParseAndPop({}, SERVICE_CONTACT_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} The service provider.\r\n */\r\nfunction readServiceProvider(node, objectStack) {\r\n  return pushParseAndPop({}, SERVICE_PROVIDER_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {string|undefined} The value.\r\n */\r\nfunction readValue(node, objectStack) {\r\n  return readString(node);\r\n}\r\n\r\nexport default OWS;\r\n", "/**\r\n * @module ol/geom/flat/flip\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {Array<number>} [dest] Destination.\r\n * @param {number} [destOffset] Destination offset.\r\n * @return {Array<number>} Flat coordinates.\r\n */\r\nexport function flipXY(flatCoordinates, offset, end, stride, dest, destOffset) {\r\n  if (dest !== undefined) {\r\n    dest = dest;\r\n    destOffset = destOffset !== undefined ? destOffset : 0;\r\n  } else {\r\n    dest = [];\r\n    destOffset = 0;\r\n  }\r\n  let j = offset;\r\n  while (j < end) {\r\n    const x = flatCoordinates[j++];\r\n    dest[destOffset++] = flatCoordinates[j++];\r\n    dest[destOffset++] = x;\r\n    for (let k = 2; k < stride; ++k) {\r\n      dest[destOffset++] = flatCoordinates[j++];\r\n    }\r\n  }\r\n  dest.length = destOffset;\r\n  return dest;\r\n}\r\n", "/**\r\n * @module ol/format/Polyline\r\n */\r\nimport Feature from '../Feature.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport TextFeature from './TextFeature.js';\r\nimport {assert} from '../asserts.js';\r\nimport {flipXY} from '../geom/flat/flip.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {getStrideForLayout} from '../geom/SimpleGeometry.js';\r\nimport {inflateCoordinates} from '../geom/flat/inflate.js';\r\nimport {transformGeometryWithOptions} from './Feature.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [factor=1e5] The factor by which the coordinates values will be scaled.\r\n * @property {import(\"../geom/Geometry.js\").GeometryLayout} [geometryLayout='XY'] Layout of the\r\n * feature geometries created by the format reader.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading and writing data in the Encoded\r\n * Polyline Algorithm Format.\r\n *\r\n * When reading features, the coordinates are assumed to be in two dimensions\r\n * and in [latitude, longitude] order.\r\n *\r\n * As Polyline sources contain a single feature,\r\n * {@link module:ol/format/Polyline~Polyline#readFeatures} will return the\r\n * feature in an array.\r\n *\r\n * @api\r\n */\r\nclass Polyline extends TextFeature {\r\n  /**\r\n   * @param {Options} [options] Optional configuration object.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     */\r\n    this.dataProjection = getProjection('EPSG:4326');\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.factor_ = options.factor ? options.factor : 1e5;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../geom/Geometry.js\").GeometryLayout}\r\n     */\r\n    this.geometryLayout_ = options.geometryLayout\r\n      ? options.geometryLayout\r\n      : 'XY';\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   */\r\n  readFeatureFromText(text, options) {\r\n    const geometry = this.readGeometryFromText(text, options);\r\n    return new Feature(geometry);\r\n  }\r\n\r\n  /**\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<Feature>} Features.\r\n   */\r\n  readFeaturesFromText(text, options) {\r\n    const feature = this.readFeatureFromText(text, options);\r\n    return [feature];\r\n  }\r\n\r\n  /**\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometryFromText(text, options) {\r\n    const stride = getStrideForLayout(this.geometryLayout_);\r\n    const flatCoordinates = decodeDeltas(text, stride, this.factor_);\r\n    flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);\r\n    const coordinates = inflateCoordinates(\r\n      flatCoordinates,\r\n      0,\r\n      flatCoordinates.length,\r\n      stride\r\n    );\r\n    const lineString = new LineString(coordinates, this.geometryLayout_);\r\n\r\n    return transformGeometryWithOptions(\r\n      lineString,\r\n      false,\r\n      this.adaptOptions(options)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../Feature.js\").default<LineString>} feature Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   */\r\n  writeFeatureText(feature, options) {\r\n    const geometry = feature.getGeometry();\r\n    if (geometry) {\r\n      return this.writeGeometryText(geometry, options);\r\n    } else {\r\n      assert(false, 40); // Expected `feature` to have a geometry\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<import(\"../Feature.js\").default<LineString>>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   */\r\n  writeFeaturesText(features, options) {\r\n    return this.writeFeatureText(features[0], options);\r\n  }\r\n\r\n  /**\r\n   * @param {LineString} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   */\r\n  writeGeometryText(geometry, options) {\r\n    geometry =\r\n      /** @type {LineString} */\r\n      (\r\n        transformGeometryWithOptions(geometry, true, this.adaptOptions(options))\r\n      );\r\n    const flatCoordinates = geometry.getFlatCoordinates();\r\n    const stride = geometry.getStride();\r\n    flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);\r\n    return encodeDeltas(flatCoordinates, stride, this.factor_);\r\n  }\r\n}\r\n\r\n/**\r\n * Encode a list of n-dimensional points and return an encoded string\r\n *\r\n * Attention: This function will modify the passed array!\r\n *\r\n * @param {Array<number>} numbers A list of n-dimensional points.\r\n * @param {number} stride The number of dimension of the points in the list.\r\n * @param {number} [factor] The factor by which the numbers will be\r\n *     multiplied. The remaining decimal places will get rounded away.\r\n *     Default is `1e5`.\r\n * @return {string} The encoded string.\r\n * @api\r\n */\r\nexport function encodeDeltas(numbers, stride, factor) {\r\n  factor = factor ? factor : 1e5;\r\n  let d;\r\n\r\n  const lastNumbers = new Array(stride);\r\n  for (d = 0; d < stride; ++d) {\r\n    lastNumbers[d] = 0;\r\n  }\r\n\r\n  for (let i = 0, ii = numbers.length; i < ii; ) {\r\n    for (d = 0; d < stride; ++d, ++i) {\r\n      const num = numbers[i];\r\n      const delta = num - lastNumbers[d];\r\n      lastNumbers[d] = num;\r\n\r\n      numbers[i] = delta;\r\n    }\r\n  }\r\n\r\n  return encodeFloats(numbers, factor);\r\n}\r\n\r\n/**\r\n * Decode a list of n-dimensional points from an encoded string\r\n *\r\n * @param {string} encoded An encoded string.\r\n * @param {number} stride The number of dimension of the points in the\r\n *     encoded string.\r\n * @param {number} [factor] The factor by which the resulting numbers will\r\n *     be divided. Default is `1e5`.\r\n * @return {Array<number>} A list of n-dimensional points.\r\n * @api\r\n */\r\nexport function decodeDeltas(encoded, stride, factor) {\r\n  factor = factor ? factor : 1e5;\r\n  let d;\r\n\r\n  /** @type {Array<number>} */\r\n  const lastNumbers = new Array(stride);\r\n  for (d = 0; d < stride; ++d) {\r\n    lastNumbers[d] = 0;\r\n  }\r\n\r\n  const numbers = decodeFloats(encoded, factor);\r\n\r\n  for (let i = 0, ii = numbers.length; i < ii; ) {\r\n    for (d = 0; d < stride; ++d, ++i) {\r\n      lastNumbers[d] += numbers[i];\r\n\r\n      numbers[i] = lastNumbers[d];\r\n    }\r\n  }\r\n\r\n  return numbers;\r\n}\r\n\r\n/**\r\n * Encode a list of floating point numbers and return an encoded string\r\n *\r\n * Attention: This function will modify the passed array!\r\n *\r\n * @param {Array<number>} numbers A list of floating point numbers.\r\n * @param {number} [factor] The factor by which the numbers will be\r\n *     multiplied. The remaining decimal places will get rounded away.\r\n *     Default is `1e5`.\r\n * @return {string} The encoded string.\r\n * @api\r\n */\r\nexport function encodeFloats(numbers, factor) {\r\n  factor = factor ? factor : 1e5;\r\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\r\n    numbers[i] = Math.round(numbers[i] * factor);\r\n  }\r\n\r\n  return encodeSignedIntegers(numbers);\r\n}\r\n\r\n/**\r\n * Decode a list of floating point numbers from an encoded string\r\n *\r\n * @param {string} encoded An encoded string.\r\n * @param {number} [factor] The factor by which the result will be divided.\r\n *     Default is `1e5`.\r\n * @return {Array<number>} A list of floating point numbers.\r\n * @api\r\n */\r\nexport function decodeFloats(encoded, factor) {\r\n  factor = factor ? factor : 1e5;\r\n  const numbers = decodeSignedIntegers(encoded);\r\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\r\n    numbers[i] /= factor;\r\n  }\r\n  return numbers;\r\n}\r\n\r\n/**\r\n * Encode a list of signed integers and return an encoded string\r\n *\r\n * Attention: This function will modify the passed array!\r\n *\r\n * @param {Array<number>} numbers A list of signed integers.\r\n * @return {string} The encoded string.\r\n */\r\nexport function encodeSignedIntegers(numbers) {\r\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\r\n    const num = numbers[i];\r\n    numbers[i] = num < 0 ? ~(num << 1) : num << 1;\r\n  }\r\n  return encodeUnsignedIntegers(numbers);\r\n}\r\n\r\n/**\r\n * Decode a list of signed integers from an encoded string\r\n *\r\n * @param {string} encoded An encoded string.\r\n * @return {Array<number>} A list of signed integers.\r\n */\r\nexport function decodeSignedIntegers(encoded) {\r\n  const numbers = decodeUnsignedIntegers(encoded);\r\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\r\n    const num = numbers[i];\r\n    numbers[i] = num & 1 ? ~(num >> 1) : num >> 1;\r\n  }\r\n  return numbers;\r\n}\r\n\r\n/**\r\n * Encode a list of unsigned integers and return an encoded string\r\n *\r\n * @param {Array<number>} numbers A list of unsigned integers.\r\n * @return {string} The encoded string.\r\n */\r\nexport function encodeUnsignedIntegers(numbers) {\r\n  let encoded = '';\r\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\r\n    encoded += encodeUnsignedInteger(numbers[i]);\r\n  }\r\n  return encoded;\r\n}\r\n\r\n/**\r\n * Decode a list of unsigned integers from an encoded string\r\n *\r\n * @param {string} encoded An encoded string.\r\n * @return {Array<number>} A list of unsigned integers.\r\n */\r\nexport function decodeUnsignedIntegers(encoded) {\r\n  const numbers = [];\r\n  let current = 0;\r\n  let shift = 0;\r\n  for (let i = 0, ii = encoded.length; i < ii; ++i) {\r\n    const b = encoded.charCodeAt(i) - 63;\r\n    current |= (b & 0x1f) << shift;\r\n    if (b < 0x20) {\r\n      numbers.push(current);\r\n      current = 0;\r\n      shift = 0;\r\n    } else {\r\n      shift += 5;\r\n    }\r\n  }\r\n  return numbers;\r\n}\r\n\r\n/**\r\n * Encode one single unsigned integer and return an encoded string\r\n *\r\n * @param {number} num Unsigned integer that should be encoded.\r\n * @return {string} The encoded string.\r\n */\r\nexport function encodeUnsignedInteger(num) {\r\n  let value,\r\n    encoded = '';\r\n  while (num >= 0x20) {\r\n    value = (0x20 | (num & 0x1f)) + 63;\r\n    encoded += String.fromCharCode(value);\r\n    num >>= 5;\r\n  }\r\n  value = num + 63;\r\n  encoded += String.fromCharCode(value);\r\n  return encoded;\r\n}\r\n\r\nexport default Polyline;\r\n", "/**\r\n * @module ol/format/TopoJSON\r\n */\r\nimport Feature from '../Feature.js';\r\nimport JSONFeature from './JSONFeature.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport MultiLineString from '../geom/MultiLineString.js';\r\nimport MultiPoint from '../geom/MultiPoint.js';\r\nimport MultiPolygon from '../geom/MultiPolygon.js';\r\nimport Point from '../geom/Point.js';\r\nimport Polygon from '../geom/Polygon.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {transformGeometryWithOptions} from './Feature.js';\r\n\r\n/**\r\n * @typedef {import(\"topojson-specification\").Topology} TopoJSONTopology\r\n * @typedef {import(\"topojson-specification\").GeometryCollection} TopoJSONGeometryCollection\r\n * @typedef {import(\"topojson-specification\").GeometryObject} TopoJSONGeometry\r\n * @typedef {import(\"topojson-specification\").Point} TopoJSONPoint\r\n * @typedef {import(\"topojson-specification\").MultiPoint} TopoJSONMultiPoint\r\n * @typedef {import(\"topojson-specification\").LineString} TopoJSONLineString\r\n * @typedef {import(\"topojson-specification\").MultiLineString} TopoJSONMultiLineString\r\n * @typedef {import(\"topojson-specification\").Polygon} TopoJSONPolygon\r\n * @typedef {import(\"topojson-specification\").MultiPolygon} TopoJSONMultiPolygon\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\r\n * @property {string} [layerName] Set the name of the TopoJSON topology\r\n * `objects`'s children as feature property with the specified name. This means\r\n * that when set to `'layer'`, a topology like\r\n * ```\r\n * {\r\n *   \"type\": \"Topology\",\r\n *   \"objects\": {\r\n *     \"example\": {\r\n *       \"type\": \"GeometryCollection\",\r\n *       \"geometries\": []\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n * will result in features that have a property `'layer'` set to `'example'`.\r\n * When not set, no property will be added to features.\r\n * @property {Array<string>} [layers] Names of the TopoJSON topology's\r\n * `objects`'s children to read features from.  If not provided, features will\r\n * be read from all children.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading data in the TopoJSON format.\r\n *\r\n * @api\r\n */\r\nclass TopoJSON extends JSONFeature {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\r\n    this.layerName_ = options.layerName;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?Array<string>}\r\n     */\r\n    this.layers_ = options.layers ? options.layers : null;\r\n\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     */\r\n    this.dataProjection = getProjection(\r\n      options.dataProjection ? options.dataProjection : 'EPSG:4326'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<Feature>} Features.\r\n   */\r\n  readFeaturesFromObject(object, options) {\r\n    if (object.type == 'Topology') {\r\n      const topoJSONTopology = /** @type {TopoJSONTopology} */ (object);\r\n      let transform,\r\n        scale = null,\r\n        translate = null;\r\n      if (topoJSONTopology['transform']) {\r\n        transform = topoJSONTopology['transform'];\r\n        scale = transform['scale'];\r\n        translate = transform['translate'];\r\n      }\r\n      const arcs = topoJSONTopology['arcs'];\r\n      if (transform) {\r\n        transformArcs(arcs, scale, translate);\r\n      }\r\n      /** @type {Array<Feature>} */\r\n      const features = [];\r\n      const topoJSONFeatures = topoJSONTopology['objects'];\r\n      const property = this.layerName_;\r\n      let feature;\r\n      for (const objectName in topoJSONFeatures) {\r\n        if (this.layers_ && !this.layers_.includes(objectName)) {\r\n          continue;\r\n        }\r\n        if (topoJSONFeatures[objectName].type === 'GeometryCollection') {\r\n          feature = /** @type {TopoJSONGeometryCollection} */ (\r\n            topoJSONFeatures[objectName]\r\n          );\r\n          features.push.apply(\r\n            features,\r\n            readFeaturesFromGeometryCollection(\r\n              feature,\r\n              arcs,\r\n              scale,\r\n              translate,\r\n              property,\r\n              objectName,\r\n              options\r\n            )\r\n          );\r\n        } else {\r\n          feature = /** @type {TopoJSONGeometry} */ (\r\n            topoJSONFeatures[objectName]\r\n          );\r\n          features.push(\r\n            readFeatureFromGeometry(\r\n              feature,\r\n              arcs,\r\n              scale,\r\n              translate,\r\n              property,\r\n              objectName,\r\n              options\r\n            )\r\n          );\r\n        }\r\n      }\r\n      return features;\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Object} object Object.\r\n   * @protected\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   */\r\n  readProjectionFromObject(object) {\r\n    return this.dataProjection;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, function(TopoJSONGeometry, Array, ...Array=): import(\"../geom/Geometry.js\").default>}\r\n */\r\nconst GEOMETRY_READERS = {\r\n  'Point': readPointGeometry,\r\n  'LineString': readLineStringGeometry,\r\n  'Polygon': readPolygonGeometry,\r\n  'MultiPoint': readMultiPointGeometry,\r\n  'MultiLineString': readMultiLineStringGeometry,\r\n  'MultiPolygon': readMultiPolygonGeometry,\r\n};\r\n\r\n/**\r\n * Concatenate arcs into a coordinate array.\r\n * @param {Array<number>} indices Indices of arcs to concatenate.  Negative\r\n *     values indicate arcs need to be reversed.\r\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs (already\r\n *     transformed).\r\n * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates array.\r\n */\r\nfunction concatenateArcs(indices, arcs) {\r\n  /** @type {Array<import(\"../coordinate.js\").Coordinate>} */\r\n  const coordinates = [];\r\n  let index;\r\n  for (let i = 0, ii = indices.length; i < ii; ++i) {\r\n    index = indices[i];\r\n    if (i > 0) {\r\n      // splicing together arcs, discard last point\r\n      coordinates.pop();\r\n    }\r\n    if (index >= 0) {\r\n      // forward arc\r\n      const arc = arcs[index];\r\n      for (let j = 0, jj = arc.length; j < jj; ++j) {\r\n        coordinates.push(arc[j].slice(0));\r\n      }\r\n    } else {\r\n      // reverse arc\r\n      const arc = arcs[~index];\r\n      for (let j = arc.length - 1; j >= 0; --j) {\r\n        coordinates.push(arc[j].slice(0));\r\n      }\r\n    }\r\n  }\r\n  return coordinates;\r\n}\r\n\r\n/**\r\n * Create a point from a TopoJSON geometry object.\r\n *\r\n * @param {TopoJSONPoint} object TopoJSON object.\r\n * @param {Array<number>} scale Scale for each dimension.\r\n * @param {Array<number>} translate Translation for each dimension.\r\n * @return {Point} Geometry.\r\n */\r\nfunction readPointGeometry(object, scale, translate) {\r\n  const coordinates = object['coordinates'];\r\n  if (scale && translate) {\r\n    transformVertex(coordinates, scale, translate);\r\n  }\r\n  return new Point(coordinates);\r\n}\r\n\r\n/**\r\n * Create a multi-point from a TopoJSON geometry object.\r\n *\r\n * @param {TopoJSONMultiPoint} object TopoJSON object.\r\n * @param {Array<number>} scale Scale for each dimension.\r\n * @param {Array<number>} translate Translation for each dimension.\r\n * @return {MultiPoint} Geometry.\r\n */\r\nfunction readMultiPointGeometry(object, scale, translate) {\r\n  const coordinates = object['coordinates'];\r\n  if (scale && translate) {\r\n    for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n      transformVertex(coordinates[i], scale, translate);\r\n    }\r\n  }\r\n  return new MultiPoint(coordinates);\r\n}\r\n\r\n/**\r\n * Create a linestring from a TopoJSON geometry object.\r\n *\r\n * @param {TopoJSONLineString} object TopoJSON object.\r\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\r\n * @return {LineString} Geometry.\r\n */\r\nfunction readLineStringGeometry(object, arcs) {\r\n  const coordinates = concatenateArcs(object['arcs'], arcs);\r\n  return new LineString(coordinates);\r\n}\r\n\r\n/**\r\n * Create a multi-linestring from a TopoJSON geometry object.\r\n *\r\n * @param {TopoJSONMultiLineString} object TopoJSON object.\r\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\r\n * @return {MultiLineString} Geometry.\r\n */\r\nfunction readMultiLineStringGeometry(object, arcs) {\r\n  const coordinates = [];\r\n  for (let i = 0, ii = object['arcs'].length; i < ii; ++i) {\r\n    coordinates[i] = concatenateArcs(object['arcs'][i], arcs);\r\n  }\r\n  return new MultiLineString(coordinates);\r\n}\r\n\r\n/**\r\n * Create a polygon from a TopoJSON geometry object.\r\n *\r\n * @param {TopoJSONPolygon} object TopoJSON object.\r\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\r\n * @return {Polygon} Geometry.\r\n */\r\nfunction readPolygonGeometry(object, arcs) {\r\n  const coordinates = [];\r\n  for (let i = 0, ii = object['arcs'].length; i < ii; ++i) {\r\n    coordinates[i] = concatenateArcs(object['arcs'][i], arcs);\r\n  }\r\n  return new Polygon(coordinates);\r\n}\r\n\r\n/**\r\n * Create a multi-polygon from a TopoJSON geometry object.\r\n *\r\n * @param {TopoJSONMultiPolygon} object TopoJSON object.\r\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\r\n * @return {MultiPolygon} Geometry.\r\n */\r\nfunction readMultiPolygonGeometry(object, arcs) {\r\n  const coordinates = [];\r\n  for (let i = 0, ii = object['arcs'].length; i < ii; ++i) {\r\n    // for each polygon\r\n    const polyArray = object['arcs'][i];\r\n    const ringCoords = [];\r\n    for (let j = 0, jj = polyArray.length; j < jj; ++j) {\r\n      // for each ring\r\n      ringCoords[j] = concatenateArcs(polyArray[j], arcs);\r\n    }\r\n    coordinates[i] = ringCoords;\r\n  }\r\n  return new MultiPolygon(coordinates);\r\n}\r\n\r\n/**\r\n * Create features from a TopoJSON GeometryCollection object.\r\n *\r\n * @param {TopoJSONGeometryCollection} collection TopoJSON Geometry\r\n *     object.\r\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\r\n * @param {Array<number>} scale Scale for each dimension.\r\n * @param {Array<number>} translate Translation for each dimension.\r\n * @param {string|undefined} property Property to set the `GeometryCollection`'s parent\r\n *     object to.\r\n * @param {string} name Name of the `Topology`'s child object.\r\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n * @return {Array<Feature>} Array of features.\r\n */\r\nfunction readFeaturesFromGeometryCollection(\r\n  collection,\r\n  arcs,\r\n  scale,\r\n  translate,\r\n  property,\r\n  name,\r\n  options\r\n) {\r\n  const geometries = collection['geometries'];\r\n  const features = [];\r\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n    features[i] = readFeatureFromGeometry(\r\n      geometries[i],\r\n      arcs,\r\n      scale,\r\n      translate,\r\n      property,\r\n      name,\r\n      options\r\n    );\r\n  }\r\n  return features;\r\n}\r\n\r\n/**\r\n * Create a feature from a TopoJSON geometry object.\r\n *\r\n * @param {TopoJSONGeometry} object TopoJSON geometry object.\r\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\r\n * @param {Array<number>} scale Scale for each dimension.\r\n * @param {Array<number>} translate Translation for each dimension.\r\n * @param {string|undefined} property Property to set the `GeometryCollection`'s parent\r\n *     object to.\r\n * @param {string} name Name of the `Topology`'s child object.\r\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n * @return {Feature} Feature.\r\n */\r\nfunction readFeatureFromGeometry(\r\n  object,\r\n  arcs,\r\n  scale,\r\n  translate,\r\n  property,\r\n  name,\r\n  options\r\n) {\r\n  let geometry = null;\r\n  const type = object.type;\r\n  if (type) {\r\n    const geometryReader = GEOMETRY_READERS[type];\r\n    if (type === 'Point' || type === 'MultiPoint') {\r\n      geometry = geometryReader(object, scale, translate);\r\n    } else {\r\n      geometry = geometryReader(object, arcs);\r\n    }\r\n    geometry = transformGeometryWithOptions(geometry, false, options);\r\n  }\r\n  const feature = new Feature({geometry: geometry});\r\n  if (object.id !== undefined) {\r\n    feature.setId(object.id);\r\n  }\r\n  let properties = object.properties;\r\n  if (property) {\r\n    if (!properties) {\r\n      properties = {};\r\n    }\r\n    properties[property] = name;\r\n  }\r\n  if (properties) {\r\n    feature.setProperties(properties, true);\r\n  }\r\n  return feature;\r\n}\r\n\r\n/**\r\n * Apply a linear transform to array of arcs.  The provided array of arcs is\r\n * modified in place.\r\n *\r\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\r\n * @param {Array<number>} scale Scale for each dimension.\r\n * @param {Array<number>} translate Translation for each dimension.\r\n */\r\nfunction transformArcs(arcs, scale, translate) {\r\n  for (let i = 0, ii = arcs.length; i < ii; ++i) {\r\n    transformArc(arcs[i], scale, translate);\r\n  }\r\n}\r\n\r\n/**\r\n * Apply a linear transform to an arc.  The provided arc is modified in place.\r\n *\r\n * @param {Array<import(\"../coordinate.js\").Coordinate>} arc Arc.\r\n * @param {Array<number>} scale Scale for each dimension.\r\n * @param {Array<number>} translate Translation for each dimension.\r\n */\r\nfunction transformArc(arc, scale, translate) {\r\n  let x = 0;\r\n  let y = 0;\r\n  for (let i = 0, ii = arc.length; i < ii; ++i) {\r\n    const vertex = arc[i];\r\n    x += vertex[0];\r\n    y += vertex[1];\r\n    vertex[0] = x;\r\n    vertex[1] = y;\r\n    transformVertex(vertex, scale, translate);\r\n  }\r\n}\r\n\r\n/**\r\n * Apply a linear transform to a vertex.  The provided vertex is modified in\r\n * place.\r\n *\r\n * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\r\n * @param {Array<number>} scale Scale for each dimension.\r\n * @param {Array<number>} translate Translation for each dimension.\r\n */\r\nfunction transformVertex(vertex, scale, translate) {\r\n  vertex[0] = vertex[0] * scale[0] + translate[0];\r\n  vertex[1] = vertex[1] * scale[1] + translate[1];\r\n}\r\n\r\nexport default TopoJSON;\r\n", "/**\r\n * @module ol/format/GML32\r\n */\r\nimport GML2 from './GML2.js';\r\nimport GML3 from './GML3.js';\r\nimport GMLBase from './GMLBase.js';\r\nimport {\r\n  makeArrayExtender,\r\n  makeArrayPusher,\r\n  makeChildAppender,\r\n  makeReplacer,\r\n} from '../xml.js';\r\nimport {writeStringTextNode} from '../format/xsd.js';\r\n\r\n/**\r\n * @classdesc Feature format for reading and writing data in the GML format\r\n *            version 3.2.1.\r\n * @api\r\n */\r\nclass GML32 extends GML3 {\r\n  /**\r\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super(options);\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    this.schemaLocation = options.schemaLocation\r\n      ? options.schemaLocation\r\n      : this.namespace + ' http://schemas.opengis.net/gml/3.2.1/gml.xsd';\r\n  }\r\n}\r\n\r\nGML32.prototype.namespace = 'http://www.opengis.net/gml/3.2';\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'pos': makeReplacer(GML3.prototype.readFlatPos),\r\n    'posList': makeReplacer(GML3.prototype.readFlatPosList),\r\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.FLAT_LINEAR_RINGS_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'interior': GML3.prototype.interiorParser,\r\n    'exterior': GML3.prototype.exteriorParser,\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.GEOMETRY_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\r\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\r\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\r\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\r\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\r\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\r\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\r\n    'Surface': makeReplacer(GML32.prototype.readSurface),\r\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\r\n    'Curve': makeReplacer(GML32.prototype.readCurve),\r\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\r\n    'Envelope': makeReplacer(GML32.prototype.readEnvelope),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.MULTICURVE_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\r\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.MULTISURFACE_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\r\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.CURVEMEMBER_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\r\n    'Curve': makeArrayPusher(GML3.prototype.readCurve),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.SURFACEMEMBER_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\r\n    'Surface': makeArrayPusher(GML3.prototype.readSurface),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.SURFACE_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'patches': makeReplacer(GML3.prototype.readPatch),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.CURVE_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'segments': makeReplacer(GML3.prototype.readSegment),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.ENVELOPE_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\r\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.PATCHES_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.SEGMENTS_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'LineStringSegment': makeArrayExtender(\r\n      GML3.prototype.readLineStringSegment\r\n    ),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.MULTIPOINT_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'pointMember': makeArrayPusher(GMLBase.prototype.pointMemberParser),\r\n    'pointMembers': makeArrayPusher(GMLBase.prototype.pointMemberParser),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.MULTILINESTRING_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'lineStringMember': makeArrayPusher(\r\n      GMLBase.prototype.lineStringMemberParser\r\n    ),\r\n    'lineStringMembers': makeArrayPusher(\r\n      GMLBase.prototype.lineStringMemberParser\r\n    ),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.MULTIPOLYGON_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'polygonMember': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\r\n    'polygonMembers': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.POINTMEMBER_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'Point': makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.LINESTRINGMEMBER_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.POLYGONMEMBER_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nGML32.prototype.RING_PARSERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\r\n    'Ring': makeReplacer(GML32.prototype.readFlatCurveRing),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML32.prototype.RING_SERIALIZERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'exterior': makeChildAppender(GML3.prototype.writeRing),\r\n    'interior': makeChildAppender(GML3.prototype.writeRing),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML32.prototype.ENVELOPE_SERIALIZERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'lowerCorner': makeChildAppender(writeStringTextNode),\r\n    'upperCorner': makeChildAppender(writeStringTextNode),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML32.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'surfaceMember': makeChildAppender(\r\n      GML3.prototype.writeSurfaceOrPolygonMember\r\n    ),\r\n    'polygonMember': makeChildAppender(\r\n      GML3.prototype.writeSurfaceOrPolygonMember\r\n    ),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML32.prototype.POINTMEMBER_SERIALIZERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML32.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'lineStringMember': makeChildAppender(\r\n      GML3.prototype.writeLineStringOrCurveMember\r\n    ),\r\n    'curveMember': makeChildAppender(\r\n      GML3.prototype.writeLineStringOrCurveMember\r\n    ),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nGML32.prototype.GEOMETRY_SERIALIZERS = {\r\n  'http://www.opengis.net/gml/3.2': {\r\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\r\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\r\n    'Point': makeChildAppender(GML32.prototype.writePoint),\r\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\r\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\r\n    'MultiLineString': makeChildAppender(\r\n      GML3.prototype.writeMultiCurveOrLineString\r\n    ),\r\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\r\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\r\n    'MultiPolygon': makeChildAppender(\r\n      GML3.prototype.writeMultiSurfaceOrPolygon\r\n    ),\r\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\r\n    'MultiSurface': makeChildAppender(\r\n      GML3.prototype.writeMultiSurfaceOrPolygon\r\n    ),\r\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope),\r\n  },\r\n};\r\n\r\nexport default GML32;\r\n", "/**\r\n * @module ol/format/filter/Filter\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\r\n * Base class for WFS GetFeature filters.\r\n *\r\n * @abstract\r\n */\r\nclass Filter {\r\n  /**\r\n   * @param {!string} tagName The XML tag name for this filter.\r\n   */\r\n  constructor(tagName) {\r\n    /**\r\n     * @private\r\n     * @type {!string}\r\n     */\r\n    this.tagName_ = tagName;\r\n  }\r\n\r\n  /**\r\n   * The XML tag name for a filter.\r\n   * @return {!string} Name.\r\n   */\r\n  getTagName() {\r\n    return this.tagName_;\r\n  }\r\n}\r\n\r\nexport default Filter;\r\n", "/**\r\n * @module ol/format/filter/LogicalNary\r\n */\r\nimport Filter from './Filter.js';\r\nimport {assert} from '../../asserts.js';\r\n\r\n/**\r\n * @classdesc\r\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\r\n * Base class for WFS GetFeature n-ary logical filters.\r\n *\r\n * @abstract\r\n */\r\nclass LogicalNary extends Filter {\r\n  /**\r\n   * @param {!string} tagName The XML tag name for this filter.\r\n   * @param {Array<import(\"./Filter.js\").default>} conditions Conditions.\r\n   */\r\n  constructor(tagName, conditions) {\r\n    super(tagName);\r\n\r\n    /**\r\n     * @type {Array<import(\"./Filter.js\").default>}\r\n     */\r\n    this.conditions = conditions;\r\n    assert(this.conditions.length >= 2, 57); // At least 2 conditions are required.\r\n  }\r\n}\r\n\r\nexport default LogicalNary;\r\n", "/**\r\n * @module ol/format/filter/And\r\n */\r\nimport LogicalNary from './LogicalNary.js';\r\n\r\n/**\r\n * @classdesc\r\n * Represents a logical `<And>` operator between two or more filter conditions.\r\n *\r\n * @abstract\r\n */\r\nclass And extends LogicalNary {\r\n  /**\r\n   * @param {...import(\"./Filter.js\").default} conditions Conditions.\r\n   */\r\n  constructor(conditions) {\r\n    super('And', Array.prototype.slice.call(arguments));\r\n  }\r\n}\r\n\r\nexport default And;\r\n", "/**\r\n * @module ol/format/filter/Bbox\r\n */\r\nimport Filter from './Filter.js';\r\n\r\n/**\r\n * @classdesc\r\n * Represents a `<BBOX>` operator to test whether a geometry-valued property\r\n * intersects a fixed bounding box\r\n *\r\n * @api\r\n */\r\nclass Bbox extends Filter {\r\n  /**\r\n   * @param {!string} geometryName Geometry name to use.\r\n   * @param {!import(\"../../extent.js\").Extent} extent Extent.\r\n   * @param {string} [srsName] SRS name. No srsName attribute will be set\r\n   * on geometries when this is not provided.\r\n   */\r\n  constructor(geometryName, extent, srsName) {\r\n    super('BBOX');\r\n\r\n    /**\r\n     * @type {!string}\r\n     */\r\n    this.geometryName = geometryName;\r\n\r\n    /**\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.extent = extent;\r\n    if (extent.length !== 4) {\r\n      throw new Error(\r\n        'Expected an extent with four values ([minX, minY, maxX, maxY])'\r\n      );\r\n    }\r\n\r\n    /**\r\n     * @type {string|undefined}\r\n     */\r\n    this.srsName = srsName;\r\n  }\r\n}\r\n\r\nexport default Bbox;\r\n", "/**\r\n * @module ol/format/filter\r\n */\r\nimport And from './filter/And.js';\r\nimport Bbox from './filter/Bbox.js';\r\nimport Contains from './filter/Contains.js';\r\nimport DWithin from './filter/DWithin.js';\r\nimport Disjoint from './filter/Disjoint.js';\r\nimport During from './filter/During.js';\r\nimport EqualTo from './filter/EqualTo.js';\r\nimport GreaterThan from './filter/GreaterThan.js';\r\nimport GreaterThanOrEqualTo from './filter/GreaterThanOrEqualTo.js';\r\nimport Intersects from './filter/Intersects.js';\r\nimport IsBetween from './filter/IsBetween.js';\r\nimport IsLike from './filter/IsLike.js';\r\nimport IsNull from './filter/IsNull.js';\r\nimport LessThan from './filter/LessThan.js';\r\nimport LessThanOrEqualTo from './filter/LessThanOrEqualTo.js';\r\nimport Not from './filter/Not.js';\r\nimport NotEqualTo from './filter/NotEqualTo.js';\r\nimport Or from './filter/Or.js';\r\nimport ResourceId from './filter/ResourceId.js';\r\nimport Within from './filter/Within.js';\r\n\r\n/**\r\n * Create a logical `<And>` operator between two or more filter conditions.\r\n *\r\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\r\n * @return {!And} `<And>` operator.\r\n * @api\r\n */\r\nexport function and(conditions) {\r\n  const params = [null].concat(Array.prototype.slice.call(arguments));\r\n  return new (Function.prototype.bind.apply(And, params))();\r\n}\r\n\r\n/**\r\n * Create a logical `<Or>` operator between two or more filter conditions.\r\n *\r\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\r\n * @return {!Or} `<Or>` operator.\r\n * @api\r\n */\r\nexport function or(conditions) {\r\n  const params = [null].concat(Array.prototype.slice.call(arguments));\r\n  return new (Function.prototype.bind.apply(Or, params))();\r\n}\r\n\r\n/**\r\n * Represents a logical `<Not>` operator for a filter condition.\r\n *\r\n * @param {!import(\"./filter/Filter.js\").default} condition Filter condition.\r\n * @return {!Not} `<Not>` operator.\r\n * @api\r\n */\r\nexport function not(condition) {\r\n  return new Not(condition);\r\n}\r\n\r\n/**\r\n * Create a `<BBOX>` operator to test whether a geometry-valued property\r\n * intersects a fixed bounding box\r\n *\r\n * @param {!string} geometryName Geometry name to use.\r\n * @param {!import(\"../extent.js\").Extent} extent Extent.\r\n * @param {string} [srsName] SRS name. No srsName attribute will be\r\n *    set on geometries when this is not provided.\r\n * @return {!Bbox} `<BBOX>` operator.\r\n * @api\r\n */\r\nexport function bbox(geometryName, extent, srsName) {\r\n  return new Bbox(geometryName, extent, srsName);\r\n}\r\n\r\n/**\r\n * Create a `<Contains>` operator to test whether a geometry-valued property\r\n * contains a given geometry.\r\n *\r\n * @param {!string} geometryName Geometry name to use.\r\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n * @param {string} [srsName] SRS name. No srsName attribute will be\r\n *    set on geometries when this is not provided.\r\n * @return {!Contains} `<Contains>` operator.\r\n * @api\r\n */\r\nexport function contains(geometryName, geometry, srsName) {\r\n  return new Contains(geometryName, geometry, srsName);\r\n}\r\n\r\n/**\r\n * Create a `<Intersects>` operator to test whether a geometry-valued property\r\n * intersects a given geometry.\r\n *\r\n * @param {!string} geometryName Geometry name to use.\r\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n * @param {string} [srsName] SRS name. No srsName attribute will be\r\n *    set on geometries when this is not provided.\r\n * @return {!Intersects} `<Intersects>` operator.\r\n * @api\r\n */\r\nexport function intersects(geometryName, geometry, srsName) {\r\n  return new Intersects(geometryName, geometry, srsName);\r\n}\r\n\r\n/**\r\n * Create a `<Disjoint>` operator to test whether a geometry-valued property\r\n * is disjoint to a given geometry.\r\n *\r\n * @param {!string} geometryName Geometry name to use.\r\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n * @param {string} [srsName] SRS name. No srsName attribute will be\r\n *    set on geometries when this is not provided.\r\n * @return {!Disjoint} `<Disjoint>` operator.\r\n * @api\r\n */\r\nexport function disjoint(geometryName, geometry, srsName) {\r\n  return new Disjoint(geometryName, geometry, srsName);\r\n}\r\n\r\n/**\r\n * Create a `<Within>` operator to test whether a geometry-valued property\r\n * is within a given geometry.\r\n *\r\n * @param {!string} geometryName Geometry name to use.\r\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n * @param {string} [srsName] SRS name. No srsName attribute will be\r\n *    set on geometries when this is not provided.\r\n * @return {!Within} `<Within>` operator.\r\n * @api\r\n */\r\nexport function within(geometryName, geometry, srsName) {\r\n  return new Within(geometryName, geometry, srsName);\r\n}\r\n\r\n/**\r\n * Create a `<DWithin>` operator to test whether a geometry-valued property\r\n * is within a distance to a given geometry.\r\n *\r\n * @param {!string} geometryName Geometry name to use.\r\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n * @param {!number} distance Distance.\r\n * @param {!string} unit Unit.\r\n * @param {string} [srsName] SRS name. No srsName attribute will be\r\n *    set on geometries when this is not provided.\r\n * @return {!DWithin} `<DWithin>` operator.\r\n * @api\r\n */\r\nexport function dwithin(geometryName, geometry, distance, unit, srsName) {\r\n  return new DWithin(geometryName, geometry, distance, unit, srsName);\r\n}\r\n\r\n/**\r\n * Creates a `<PropertyIsEqualTo>` comparison operator.\r\n *\r\n * @param {!string} propertyName Name of the context property to compare.\r\n * @param {!(string|number)} expression The value to compare.\r\n * @param {boolean} [matchCase] Case-sensitive?\r\n * @return {!EqualTo} `<PropertyIsEqualTo>` operator.\r\n * @api\r\n */\r\nexport function equalTo(propertyName, expression, matchCase) {\r\n  return new EqualTo(propertyName, expression, matchCase);\r\n}\r\n\r\n/**\r\n * Creates a `<PropertyIsNotEqualTo>` comparison operator.\r\n *\r\n * @param {!string} propertyName Name of the context property to compare.\r\n * @param {!(string|number)} expression The value to compare.\r\n * @param {boolean} [matchCase] Case-sensitive?\r\n * @return {!NotEqualTo} `<PropertyIsNotEqualTo>` operator.\r\n * @api\r\n */\r\nexport function notEqualTo(propertyName, expression, matchCase) {\r\n  return new NotEqualTo(propertyName, expression, matchCase);\r\n}\r\n\r\n/**\r\n * Creates a `<PropertyIsLessThan>` comparison operator.\r\n *\r\n * @param {!string} propertyName Name of the context property to compare.\r\n * @param {!number} expression The value to compare.\r\n * @return {!LessThan} `<PropertyIsLessThan>` operator.\r\n * @api\r\n */\r\nexport function lessThan(propertyName, expression) {\r\n  return new LessThan(propertyName, expression);\r\n}\r\n\r\n/**\r\n * Creates a `<PropertyIsLessThanOrEqualTo>` comparison operator.\r\n *\r\n * @param {!string} propertyName Name of the context property to compare.\r\n * @param {!number} expression The value to compare.\r\n * @return {!LessThanOrEqualTo} `<PropertyIsLessThanOrEqualTo>` operator.\r\n * @api\r\n */\r\nexport function lessThanOrEqualTo(propertyName, expression) {\r\n  return new LessThanOrEqualTo(propertyName, expression);\r\n}\r\n\r\n/**\r\n * Creates a `<PropertyIsGreaterThan>` comparison operator.\r\n *\r\n * @param {!string} propertyName Name of the context property to compare.\r\n * @param {!number} expression The value to compare.\r\n * @return {!GreaterThan} `<PropertyIsGreaterThan>` operator.\r\n * @api\r\n */\r\nexport function greaterThan(propertyName, expression) {\r\n  return new GreaterThan(propertyName, expression);\r\n}\r\n\r\n/**\r\n * Creates a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\r\n *\r\n * @param {!string} propertyName Name of the context property to compare.\r\n * @param {!number} expression The value to compare.\r\n * @return {!GreaterThanOrEqualTo} `<PropertyIsGreaterThanOrEqualTo>` operator.\r\n * @api\r\n */\r\nexport function greaterThanOrEqualTo(propertyName, expression) {\r\n  return new GreaterThanOrEqualTo(propertyName, expression);\r\n}\r\n\r\n/**\r\n * Creates a `<PropertyIsNull>` comparison operator to test whether a property value\r\n * is null.\r\n *\r\n * @param {!string} propertyName Name of the context property to compare.\r\n * @return {!IsNull} `<PropertyIsNull>` operator.\r\n * @api\r\n */\r\nexport function isNull(propertyName) {\r\n  return new IsNull(propertyName);\r\n}\r\n\r\n/**\r\n * Creates a `<PropertyIsBetween>` comparison operator to test whether an expression\r\n * value lies within a range given by a lower and upper bound (inclusive).\r\n *\r\n * @param {!string} propertyName Name of the context property to compare.\r\n * @param {!number} lowerBoundary The lower bound of the range.\r\n * @param {!number} upperBoundary The upper bound of the range.\r\n * @return {!IsBetween} `<PropertyIsBetween>` operator.\r\n * @api\r\n */\r\nexport function between(propertyName, lowerBoundary, upperBoundary) {\r\n  return new IsBetween(propertyName, lowerBoundary, upperBoundary);\r\n}\r\n\r\n/**\r\n * Represents a `<PropertyIsLike>` comparison operator that matches a string property\r\n * value against a text pattern.\r\n *\r\n * @param {!string} propertyName Name of the context property to compare.\r\n * @param {!string} pattern Text pattern.\r\n * @param {string} [wildCard] Pattern character which matches any sequence of\r\n *    zero or more string characters. Default is '*'.\r\n * @param {string} [singleChar] pattern character which matches any single\r\n *    string character. Default is '.'.\r\n * @param {string} [escapeChar] Escape character which can be used to escape\r\n *    the pattern characters. Default is '!'.\r\n * @param {boolean} [matchCase] Case-sensitive?\r\n * @return {!IsLike} `<PropertyIsLike>` operator.\r\n * @api\r\n */\r\nexport function like(\r\n  propertyName,\r\n  pattern,\r\n  wildCard,\r\n  singleChar,\r\n  escapeChar,\r\n  matchCase\r\n) {\r\n  return new IsLike(\r\n    propertyName,\r\n    pattern,\r\n    wildCard,\r\n    singleChar,\r\n    escapeChar,\r\n    matchCase\r\n  );\r\n}\r\n\r\n/**\r\n * Create a `<During>` temporal operator.\r\n *\r\n * @param {!string} propertyName Name of the context property to compare.\r\n * @param {!string} begin The begin date in ISO-8601 format.\r\n * @param {!string} end The end date in ISO-8601 format.\r\n * @return {!During} `<During>` operator.\r\n * @api\r\n */\r\nexport function during(propertyName, begin, end) {\r\n  return new During(propertyName, begin, end);\r\n}\r\n\r\nexport function resourceId(rid) {\r\n  return new ResourceId(rid);\r\n}\r\n", "/**\r\n * @module ol/format/WFS\r\n */\r\nimport GML2 from './GML2.js';\r\nimport GML3 from './GML3.js';\r\nimport GML32 from './GML32.js';\r\nimport GMLBase, {GMLNS} from './GMLBase.js';\r\nimport XMLFeature from './XMLFeature.js';\r\nimport {\r\n  XML_SCHEMA_INSTANCE_URI,\r\n  createElementNS,\r\n  isDocument,\r\n  makeArrayPusher,\r\n  makeChildAppender,\r\n  makeObjectPropertySetter,\r\n  makeSimpleNodeFactory,\r\n  parse,\r\n  parseNode,\r\n  pushParseAndPop,\r\n  pushSerializeAndPop,\r\n} from '../xml.js';\r\nimport {and as andFilterFn, bbox as bboxFilterFn} from './filter.js';\r\nimport {assert} from '../asserts.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {\r\n  readNonNegativeIntegerString,\r\n  readPositiveInteger,\r\n  writeStringTextNode,\r\n} from './xsd.js';\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nconst FEATURE_COLLECTION_PARSERS = {\r\n  'http://www.opengis.net/gml': {\r\n    'boundedBy': makeObjectPropertySetter(\r\n      GMLBase.prototype.readExtentElement,\r\n      'bounds'\r\n    ),\r\n  },\r\n  'http://www.opengis.net/wfs/2.0': {\r\n    'member': makeArrayPusher(GMLBase.prototype.readFeaturesInternal),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nconst TRANSACTION_SUMMARY_PARSERS = {\r\n  'http://www.opengis.net/wfs': {\r\n    'totalInserted': makeObjectPropertySetter(readPositiveInteger),\r\n    'totalUpdated': makeObjectPropertySetter(readPositiveInteger),\r\n    'totalDeleted': makeObjectPropertySetter(readPositiveInteger),\r\n  },\r\n  'http://www.opengis.net/wfs/2.0': {\r\n    'totalInserted': makeObjectPropertySetter(readPositiveInteger),\r\n    'totalUpdated': makeObjectPropertySetter(readPositiveInteger),\r\n    'totalDeleted': makeObjectPropertySetter(readPositiveInteger),\r\n  },\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nconst TRANSACTION_RESPONSE_PARSERS = {\r\n  'http://www.opengis.net/wfs': {\r\n    'TransactionSummary': makeObjectPropertySetter(\r\n      readTransactionSummary,\r\n      'transactionSummary'\r\n    ),\r\n    'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds'),\r\n  },\r\n  'http://www.opengis.net/wfs/2.0': {\r\n    'TransactionSummary': makeObjectPropertySetter(\r\n      readTransactionSummary,\r\n      'transactionSummary'\r\n    ),\r\n    'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds'),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nconst QUERY_SERIALIZERS = {\r\n  'http://www.opengis.net/wfs': {\r\n    'PropertyName': makeChildAppender(writeStringTextNode),\r\n  },\r\n  'http://www.opengis.net/wfs/2.0': {\r\n    'PropertyName': makeChildAppender(writeStringTextNode),\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nconst TRANSACTION_SERIALIZERS = {\r\n  'http://www.opengis.net/wfs': {\r\n    'Insert': makeChildAppender(writeFeature),\r\n    'Update': makeChildAppender(writeUpdate),\r\n    'Delete': makeChildAppender(writeDelete),\r\n    'Property': makeChildAppender(writeProperty),\r\n    'Native': makeChildAppender(writeNative),\r\n  },\r\n  'http://www.opengis.net/wfs/2.0': {\r\n    'Insert': makeChildAppender(writeFeature),\r\n    'Update': makeChildAppender(writeUpdate),\r\n    'Delete': makeChildAppender(writeDelete),\r\n    'Property': makeChildAppender(writeProperty),\r\n    'Native': makeChildAppender(writeNative),\r\n  },\r\n};\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Object<string, string>|string} [featureNS] The namespace URI used for features.\r\n * @property {Array<string>|string} [featureType] The feature type to parse. Only used for read operations.\r\n * @property {GMLBase} [gmlFormat] The GML format to use to parse the response.\r\n * Default is `ol/format/GML2` for WFS 1.0.0, `ol/format/GML3` for WFS 1.1.0 and `ol/format/GML32` for WFS 2.0.0.\r\n * @property {string} [schemaLocation] Optional schemaLocation to use for serialization, this will override the default.\r\n * @property {string} [version='1.1.0'] WFS version to use. Can be either `1.0.0`, `1.1.0` or `2.0.0`.\r\n */\r\n\r\n/**\r\n * @typedef {Object} WriteGetFeatureOptions\r\n * @property {string} featureNS The namespace URI used for features.\r\n * @property {string} featurePrefix The prefix for the feature namespace.\r\n * @property {Array<string|FeatureType>} featureTypes The feature type names or FeatureType objects to\r\n * define a unique bbox filter per feature type name (in this case, options `bbox` and `geometryName` are\r\n * ignored.).\r\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\r\n * geometries when this is not provided.\r\n * @property {string} [handle] Handle.\r\n * @property {string} [outputFormat] Output format.\r\n * @property {number} [maxFeatures] Maximum number of features to fetch.\r\n * @property {string} [geometryName] Geometry name to use in a BBOX filter.\r\n * @property {Array<string>} [propertyNames] Optional list of property names to serialize.\r\n * @property {string} [viewParams] viewParams GeoServer vendor parameter.\r\n * @property {number} [startIndex] Start index to use for WFS paging. This is a\r\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services.\r\n * @property {number} [count] Number of features to retrieve when paging. This is a\r\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services. Please note that some\r\n * Web Feature Services have repurposed `maxfeatures` instead.\r\n * @property {import(\"../extent.js\").Extent} [bbox] Extent to use for the BBOX filter. The `geometryName`\r\n * option must be set.\r\n * @property {import(\"./filter/Filter.js\").default} [filter] Filter condition. See\r\n * {@link module:ol/format/filter} for more information.\r\n * @property {string} [resultType] Indicates what response should be returned,\r\n * e.g. `hits` only includes the `numberOfFeatures` attribute in the response and no features.\r\n */\r\n\r\n/**\r\n * @typedef {Object} FeatureType\r\n * @property {!string} name The feature type name.\r\n * @property {!import(\"../extent.js\").Extent} bbox Extent to use for the BBOX filter.\r\n * @property {!string} geometryName Geometry name to use in the BBOX filter.\r\n */\r\n\r\n/**\r\n * @typedef {Object} WriteTransactionOptions\r\n * @property {string} featureNS The namespace URI used for features.\r\n * @property {string} featurePrefix The prefix for the feature namespace.\r\n * @property {string} featureType The feature type name.\r\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\r\n * geometries when this is not provided.\r\n * @property {string} [handle] Handle.\r\n * @property {boolean} [hasZ] Must be set to true if the transaction is for\r\n * a 3D layer. This will allow the Z coordinate to be included in the transaction.\r\n * @property {Array<Object>} nativeElements Native elements. Currently not supported.\r\n * @property {import(\"./GMLBase.js\").Options} [gmlOptions] GML options for the WFS transaction writer.\r\n * @property {string} [version='1.1.0'] WFS version to use for the transaction. Can be either `1.0.0`, `1.1.0` or `2.0.0`.\r\n */\r\n\r\n/**\r\n * Number of features; bounds/extent.\r\n * @typedef {Object} FeatureCollectionMetadata\r\n * @property {number} numberOfFeatures NumberOfFeatures.\r\n * @property {import(\"../extent.js\").Extent} bounds Bounds.\r\n */\r\n\r\n/**\r\n * Total deleted; total inserted; total updated; array of insert ids.\r\n * @typedef {Object} TransactionResponse\r\n * @property {number} totalDeleted TotalDeleted.\r\n * @property {number} totalInserted TotalInserted.\r\n * @property {number} totalUpdated TotalUpdated.\r\n * @property {Array<string>} insertIds InsertIds.\r\n */\r\n\r\n/**\r\n * @type {string}\r\n */\r\nconst FEATURE_PREFIX = 'feature';\r\n\r\n/**\r\n * @type {string}\r\n */\r\nconst XMLNS = 'http://www.w3.org/2000/xmlns/';\r\n\r\n/**\r\n * @type {Object<string, string>}\r\n */\r\nconst OGCNS = {\r\n  '2.0.0': 'http://www.opengis.net/ogc/1.1',\r\n  '1.1.0': 'http://www.opengis.net/ogc',\r\n  '1.0.0': 'http://www.opengis.net/ogc',\r\n};\r\n\r\n/**\r\n * @type {Object<string, string>}\r\n */\r\nconst WFSNS = {\r\n  '2.0.0': 'http://www.opengis.net/wfs/2.0',\r\n  '1.1.0': 'http://www.opengis.net/wfs',\r\n  '1.0.0': 'http://www.opengis.net/wfs',\r\n};\r\n\r\n/**\r\n * @type {Object<string, string>}\r\n */\r\nconst FESNS = {\r\n  '2.0.0': 'http://www.opengis.net/fes/2.0',\r\n  '1.1.0': 'http://www.opengis.net/fes',\r\n  '1.0.0': 'http://www.opengis.net/fes',\r\n};\r\n\r\n/**\r\n * @type {Object<string, string>}\r\n */\r\nconst SCHEMA_LOCATIONS = {\r\n  '2.0.0':\r\n    'http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd',\r\n  '1.1.0':\r\n    'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd',\r\n  '1.0.0':\r\n    'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.0.0/wfs.xsd',\r\n};\r\n\r\n/**\r\n * @type {Object<string, object>}\r\n */\r\nconst GML_FORMATS = {\r\n  '2.0.0': GML32,\r\n  '1.1.0': GML3,\r\n  '1.0.0': GML2,\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst DEFAULT_VERSION = '1.1.0';\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading and writing data in the WFS format.\r\n * By default, supports WFS version 1.1.0. You can pass a GML format\r\n * as option to override the default.\r\n * Also see {@link module:ol/format/GMLBase~GMLBase} which is used by this format.\r\n *\r\n * @api\r\n */\r\nclass WFS extends XMLFeature {\r\n  /**\r\n   * @param {Options} [options] Optional configuration object.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.version_ = options.version ? options.version : DEFAULT_VERSION;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<string>|string|undefined}\r\n     */\r\n    this.featureType_ = options.featureType;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, string>|string|undefined}\r\n     */\r\n    this.featureNS_ = options.featureNS;\r\n\r\n    /**\r\n     * @private\r\n     * @type {GMLBase}\r\n     */\r\n    this.gmlFormat_ = options.gmlFormat\r\n      ? options.gmlFormat\r\n      : new GML_FORMATS[this.version_]();\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.schemaLocation_ = options.schemaLocation\r\n      ? options.schemaLocation\r\n      : SCHEMA_LOCATIONS[this.version_];\r\n  }\r\n\r\n  /**\r\n   * @return {Array<string>|string|undefined} featureType\r\n   */\r\n  getFeatureType() {\r\n    return this.featureType_;\r\n  }\r\n\r\n  /**\r\n   * @param {Array<string>|string|undefined} featureType Feature type(s) to parse.\r\n   */\r\n  setFeatureType(featureType) {\r\n    this.featureType_ = featureType;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   */\r\n  readFeaturesFromNode(node, options) {\r\n    /** @type {import(\"../xml.js\").NodeStackItem} */\r\n    const context = {\r\n      node,\r\n    };\r\n    Object.assign(context, {\r\n      'featureType': this.featureType_,\r\n      'featureNS': this.featureNS_,\r\n    });\r\n\r\n    Object.assign(context, this.getReadOptions(node, options ? options : {}));\r\n    const objectStack = [context];\r\n    let featuresNS;\r\n    if (this.version_ === '2.0.0') {\r\n      featuresNS = FEATURE_COLLECTION_PARSERS;\r\n    } else {\r\n      featuresNS = this.gmlFormat_.FEATURE_COLLECTION_PARSERS;\r\n    }\r\n    let features = pushParseAndPop(\r\n      [],\r\n      featuresNS,\r\n      node,\r\n      objectStack,\r\n      this.gmlFormat_\r\n    );\r\n    if (!features) {\r\n      features = [];\r\n    }\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * Read transaction response of the source.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @return {TransactionResponse|undefined} Transaction response.\r\n   * @api\r\n   */\r\n  readTransactionResponse(source) {\r\n    if (!source) {\r\n      return undefined;\r\n    } else if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      return this.readTransactionResponseFromDocument(doc);\r\n    } else if (isDocument(source)) {\r\n      return this.readTransactionResponseFromDocument(\r\n        /** @type {Document} */ (source)\r\n      );\r\n    } else {\r\n      return this.readTransactionResponseFromNode(\r\n        /** @type {Element} */ (source)\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Read feature collection metadata of the source.\r\n   *\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @return {FeatureCollectionMetadata|undefined}\r\n   *     FeatureCollection metadata.\r\n   * @api\r\n   */\r\n  readFeatureCollectionMetadata(source) {\r\n    if (!source) {\r\n      return undefined;\r\n    } else if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      return this.readFeatureCollectionMetadataFromDocument(doc);\r\n    } else if (isDocument(source)) {\r\n      return this.readFeatureCollectionMetadataFromDocument(\r\n        /** @type {Document} */ (source)\r\n      );\r\n    } else {\r\n      return this.readFeatureCollectionMetadataFromNode(\r\n        /** @type {Element} */ (source)\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @return {FeatureCollectionMetadata|undefined}\r\n   *     FeatureCollection metadata.\r\n   */\r\n  readFeatureCollectionMetadataFromDocument(doc) {\r\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\r\n      if (n.nodeType == Node.ELEMENT_NODE) {\r\n        return this.readFeatureCollectionMetadataFromNode(\r\n          /** @type {Element} */ (n)\r\n        );\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @return {FeatureCollectionMetadata|undefined}\r\n   *     FeatureCollection metadata.\r\n   */\r\n  readFeatureCollectionMetadataFromNode(node) {\r\n    const result = {};\r\n    const value = readNonNegativeIntegerString(\r\n      node.getAttribute('numberOfFeatures')\r\n    );\r\n    result['numberOfFeatures'] = value;\r\n    return pushParseAndPop(\r\n      /** @type {FeatureCollectionMetadata} */ (result),\r\n      FEATURE_COLLECTION_PARSERS,\r\n      node,\r\n      [],\r\n      this.gmlFormat_\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @return {TransactionResponse|undefined} Transaction response.\r\n   */\r\n  readTransactionResponseFromDocument(doc) {\r\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\r\n      if (n.nodeType == Node.ELEMENT_NODE) {\r\n        return this.readTransactionResponseFromNode(/** @type {Element} */ (n));\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @return {TransactionResponse|undefined} Transaction response.\r\n   */\r\n  readTransactionResponseFromNode(node) {\r\n    return pushParseAndPop(\r\n      /** @type {TransactionResponse} */ ({}),\r\n      TRANSACTION_RESPONSE_PARSERS,\r\n      node,\r\n      []\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Encode format as WFS `GetFeature` and return the Node.\r\n   *\r\n   * @param {WriteGetFeatureOptions} options Options.\r\n   * @return {Node} Result.\r\n   * @api\r\n   */\r\n  writeGetFeature(options) {\r\n    const node = createElementNS(WFSNS[this.version_], 'GetFeature');\r\n    node.setAttribute('service', 'WFS');\r\n    node.setAttribute('version', this.version_);\r\n    if (options.handle) {\r\n      node.setAttribute('handle', options.handle);\r\n    }\r\n    if (options.outputFormat) {\r\n      node.setAttribute('outputFormat', options.outputFormat);\r\n    }\r\n    if (options.maxFeatures !== undefined) {\r\n      node.setAttribute('maxFeatures', String(options.maxFeatures));\r\n    }\r\n    if (options.resultType) {\r\n      node.setAttribute('resultType', options.resultType);\r\n    }\r\n    if (options.startIndex !== undefined) {\r\n      node.setAttribute('startIndex', String(options.startIndex));\r\n    }\r\n    if (options.count !== undefined) {\r\n      node.setAttribute('count', String(options.count));\r\n    }\r\n    if (options.viewParams !== undefined) {\r\n      node.setAttribute('viewParams', options.viewParams);\r\n    }\r\n    node.setAttributeNS(\r\n      XML_SCHEMA_INSTANCE_URI,\r\n      'xsi:schemaLocation',\r\n      this.schemaLocation_\r\n    );\r\n    /** @type {import(\"../xml.js\").NodeStackItem} */\r\n    const context = {\r\n      node,\r\n    };\r\n    Object.assign(context, {\r\n      'version': this.version_,\r\n      'srsName': options.srsName,\r\n      'featureNS': options.featureNS ? options.featureNS : this.featureNS_,\r\n      'featurePrefix': options.featurePrefix,\r\n      'propertyNames': options.propertyNames ? options.propertyNames : [],\r\n    });\r\n    assert(Array.isArray(options.featureTypes), 11); // `options.featureTypes` must be an Array\r\n    if (typeof options.featureTypes[0] === 'string') {\r\n      let filter = options.filter;\r\n      if (options.bbox) {\r\n        assert(options.geometryName, 12); // `options.geometryName` must also be provided when `options.bbox` is set\r\n        filter = this.combineBboxAndFilter(\r\n          options.geometryName,\r\n          options.bbox,\r\n          options.srsName,\r\n          filter\r\n        );\r\n      }\r\n      Object.assign(context, {\r\n        'geometryName': options.geometryName,\r\n        'filter': filter,\r\n      });\r\n      writeGetFeature(\r\n        node,\r\n        /** @type {!Array<string>} */ (options.featureTypes),\r\n        [context]\r\n      );\r\n    } else {\r\n      // Write one query node per element in featuresType.\r\n      options.featureTypes.forEach((/** @type {FeatureType} */ featureType) => {\r\n        const completeFilter = this.combineBboxAndFilter(\r\n          featureType.geometryName,\r\n          featureType.bbox,\r\n          options.srsName,\r\n          options.filter\r\n        );\r\n        Object.assign(context, {\r\n          'geometryName': featureType.geometryName,\r\n          'filter': completeFilter,\r\n        });\r\n        writeGetFeature(node, [featureType.name], [context]);\r\n      });\r\n    }\r\n    return node;\r\n  }\r\n\r\n  /**\r\n   * Create a bbox filter and combine it with another optional filter.\r\n   *\r\n   * @param {!string} geometryName Geometry name to use.\r\n   * @param {!import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {string} [srsName] SRS name. No srsName attribute will be\r\n   *    set on geometries when this is not provided.\r\n   * @param {import(\"./filter/Filter.js\").default} [filter] Filter condition.\r\n   * @return {import(\"./filter/Filter.js\").default} The filter.\r\n   */\r\n  combineBboxAndFilter(geometryName, extent, srsName, filter) {\r\n    const bboxFilter = bboxFilterFn(geometryName, extent, srsName);\r\n    if (filter) {\r\n      // if bbox and filter are both set, combine the two into a single filter\r\n      return andFilterFn(filter, bboxFilter);\r\n    }\r\n    return bboxFilter;\r\n  }\r\n\r\n  /**\r\n   * Encode format as WFS `Transaction` and return the Node.\r\n   *\r\n   * @param {Array<import(\"../Feature.js\").default>} inserts The features to insert.\r\n   * @param {Array<import(\"../Feature.js\").default>} updates The features to update.\r\n   * @param {Array<import(\"../Feature.js\").default>} deletes The features to delete.\r\n   * @param {WriteTransactionOptions} options Write options.\r\n   * @return {Node} Result.\r\n   * @api\r\n   */\r\n  writeTransaction(inserts, updates, deletes, options) {\r\n    const objectStack = [];\r\n    const version = options.version ? options.version : this.version_;\r\n    const node = createElementNS(WFSNS[version], 'Transaction');\r\n\r\n    node.setAttribute('service', 'WFS');\r\n    node.setAttribute('version', version);\r\n    let baseObj;\r\n    /** @type {import(\"../xml.js\").NodeStackItem} */\r\n    if (options) {\r\n      baseObj = options.gmlOptions ? options.gmlOptions : {};\r\n      if (options.handle) {\r\n        node.setAttribute('handle', options.handle);\r\n      }\r\n    }\r\n    node.setAttributeNS(\r\n      XML_SCHEMA_INSTANCE_URI,\r\n      'xsi:schemaLocation',\r\n      SCHEMA_LOCATIONS[version]\r\n    );\r\n\r\n    const request = createTransactionRequest(node, baseObj, version, options);\r\n    if (inserts) {\r\n      serializeTransactionRequest('Insert', inserts, objectStack, request);\r\n    }\r\n    if (updates) {\r\n      serializeTransactionRequest('Update', updates, objectStack, request);\r\n    }\r\n    if (deletes) {\r\n      serializeTransactionRequest('Delete', deletes, objectStack, request);\r\n    }\r\n    if (options.nativeElements) {\r\n      serializeTransactionRequest(\r\n        'Native',\r\n        options.nativeElements,\r\n        objectStack,\r\n        request\r\n      );\r\n    }\r\n    return node;\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   */\r\n  readProjectionFromDocument(doc) {\r\n    for (let n = doc.firstChild; n; n = n.nextSibling) {\r\n      if (n.nodeType == Node.ELEMENT_NODE) {\r\n        return this.readProjectionFromNode(/** @type {Element} */ (n));\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   */\r\n  readProjectionFromNode(node) {\r\n    if (node.firstElementChild && node.firstElementChild.firstElementChild) {\r\n      node = node.firstElementChild.firstElementChild;\r\n      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\r\n        if (\r\n          !(\r\n            n.childNodes.length === 0 ||\r\n            (n.childNodes.length === 1 && n.firstChild.nodeType === 3)\r\n          )\r\n        ) {\r\n          const objectStack = [{}];\r\n          this.gmlFormat_.readGeometryElement(n, objectStack);\r\n          return getProjection(objectStack.pop().srsName);\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {*} baseObj Base object.\r\n * @param {string} version Version.\r\n * @param {WriteTransactionOptions} options Options.\r\n * @return {Object} Request object.\r\n */\r\nfunction createTransactionRequest(node, baseObj, version, options) {\r\n  const featurePrefix = options.featurePrefix\r\n    ? options.featurePrefix\r\n    : FEATURE_PREFIX;\r\n  let gmlVersion;\r\n  if (version === '1.0.0') {\r\n    gmlVersion = 2;\r\n  } else if (version === '1.1.0') {\r\n    gmlVersion = 3;\r\n  } else if (version === '2.0.0') {\r\n    gmlVersion = 3.2;\r\n  }\r\n  const obj = Object.assign(\r\n    {node},\r\n    {\r\n      version,\r\n      'featureNS': options.featureNS,\r\n      'featureType': options.featureType,\r\n      'featurePrefix': featurePrefix,\r\n      'gmlVersion': gmlVersion,\r\n      'hasZ': options.hasZ,\r\n      'srsName': options.srsName,\r\n    },\r\n    baseObj\r\n  );\r\n  return obj;\r\n}\r\n\r\n/**\r\n * @param {string} type Request type.\r\n * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @param {Element} request Transaction Request.\r\n */\r\nfunction serializeTransactionRequest(type, features, objectStack, request) {\r\n  pushSerializeAndPop(\r\n    request,\r\n    TRANSACTION_SERIALIZERS,\r\n    makeSimpleNodeFactory(type),\r\n    features,\r\n    objectStack\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Transaction Summary.\r\n */\r\nfunction readTransactionSummary(node, objectStack) {\r\n  return pushParseAndPop({}, TRANSACTION_SUMMARY_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nconst OGC_FID_PARSERS = {\r\n  'http://www.opengis.net/ogc': {\r\n    'FeatureId': makeArrayPusher(function (node, objectStack) {\r\n      return node.getAttribute('fid');\r\n    }),\r\n  },\r\n  'http://www.opengis.net/ogc/1.1': {\r\n    'FeatureId': makeArrayPusher(function (node, objectStack) {\r\n      return node.getAttribute('fid');\r\n    }),\r\n  },\r\n};\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n */\r\nfunction fidParser(node, objectStack) {\r\n  parseNode(OGC_FID_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\nconst INSERT_RESULTS_PARSERS = {\r\n  'http://www.opengis.net/wfs': {\r\n    'Feature': fidParser,\r\n  },\r\n  'http://www.opengis.net/wfs/2.0': {\r\n    'Feature': fidParser,\r\n  },\r\n};\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Array<string>|undefined} Insert results.\r\n */\r\nfunction readInsertResults(node, objectStack) {\r\n  return pushParseAndPop([], INSERT_RESULTS_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"../Feature.js\").default} feature Feature.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeFeature(node, feature, objectStack) {\r\n  const context = objectStack[objectStack.length - 1];\r\n  const featureType = context['featureType'];\r\n  const featureNS = context['featureNS'];\r\n  const gmlVersion = context['gmlVersion'];\r\n  const child = createElementNS(featureNS, featureType);\r\n  node.appendChild(child);\r\n  if (gmlVersion === 2) {\r\n    GML2.prototype.writeFeatureElement(child, feature, objectStack);\r\n  } else if (gmlVersion === 3) {\r\n    GML3.prototype.writeFeatureElement(child, feature, objectStack);\r\n  } else {\r\n    GML32.prototype.writeFeatureElement(child, feature, objectStack);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {number|string} fid Feature identifier.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeOgcFidFilter(node, fid, objectStack) {\r\n  const context = objectStack[objectStack.length - 1];\r\n  const version = context['version'];\r\n  const ns = OGCNS[version];\r\n  const filter = createElementNS(ns, 'Filter');\r\n  const child = createElementNS(ns, 'FeatureId');\r\n  filter.appendChild(child);\r\n  child.setAttribute('fid', /** @type {string} */ (fid));\r\n  node.appendChild(filter);\r\n}\r\n\r\n/**\r\n * @param {string|undefined} featurePrefix The prefix of the feature.\r\n * @param {string} featureType The type of the feature.\r\n * @return {string} The value of the typeName property.\r\n */\r\nfunction getTypeName(featurePrefix, featureType) {\r\n  featurePrefix = featurePrefix ? featurePrefix : FEATURE_PREFIX;\r\n  const prefix = featurePrefix + ':';\r\n  // The featureType already contains the prefix.\r\n  if (featureType.startsWith(prefix)) {\r\n    return featureType;\r\n  } else {\r\n    return prefix + featureType;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"../Feature.js\").default} feature Feature.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeDelete(node, feature, objectStack) {\r\n  const context = objectStack[objectStack.length - 1];\r\n  assert(feature.getId() !== undefined, 26); // Features must have an id set\r\n  const featureType = context['featureType'];\r\n  const featurePrefix = context['featurePrefix'];\r\n  const featureNS = context['featureNS'];\r\n  const typeName = getTypeName(featurePrefix, featureType);\r\n  node.setAttribute('typeName', typeName);\r\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\r\n  const fid = feature.getId();\r\n  if (fid !== undefined) {\r\n    writeOgcFidFilter(node, fid, objectStack);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"../Feature.js\").default} feature Feature.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeUpdate(node, feature, objectStack) {\r\n  const context = objectStack[objectStack.length - 1];\r\n  assert(feature.getId() !== undefined, 27); // Features must have an id set\r\n  const version = context['version'];\r\n  const featureType = context['featureType'];\r\n  const featurePrefix = context['featurePrefix'];\r\n  const featureNS = context['featureNS'];\r\n  const typeName = getTypeName(featurePrefix, featureType);\r\n  const geometryName = feature.getGeometryName();\r\n  node.setAttribute('typeName', typeName);\r\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\r\n  const fid = feature.getId();\r\n  if (fid !== undefined) {\r\n    const keys = feature.getKeys();\r\n    const values = [];\r\n    for (let i = 0, ii = keys.length; i < ii; i++) {\r\n      const value = feature.get(keys[i]);\r\n      if (value !== undefined) {\r\n        let name = keys[i];\r\n        if (\r\n          value &&\r\n          typeof (/** @type {?} */ (value).getSimplifiedGeometry) === 'function'\r\n        ) {\r\n          name = geometryName;\r\n        }\r\n        values.push({name: name, value: value});\r\n      }\r\n    }\r\n    pushSerializeAndPop(\r\n      /** @type {import(\"../xml.js\").NodeStackItem} */ ({\r\n        version,\r\n        'gmlVersion': context['gmlVersion'],\r\n        node,\r\n        'hasZ': context['hasZ'],\r\n        'srsName': context['srsName'],\r\n      }),\r\n      TRANSACTION_SERIALIZERS,\r\n      makeSimpleNodeFactory('Property'),\r\n      values,\r\n      objectStack\r\n    );\r\n    writeOgcFidFilter(node, fid, objectStack);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {Object} pair Property name and value.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeProperty(node, pair, objectStack) {\r\n  const context = objectStack[objectStack.length - 1];\r\n  const version = context['version'];\r\n  const ns = WFSNS[version];\r\n  const name = createElementNS(ns, 'Name');\r\n  const gmlVersion = context['gmlVersion'];\r\n  node.appendChild(name);\r\n  writeStringTextNode(name, pair.name);\r\n  if (pair.value !== undefined && pair.value !== null) {\r\n    const value = createElementNS(ns, 'Value');\r\n    node.appendChild(value);\r\n    if (\r\n      pair.value &&\r\n      typeof (/** @type {?} */ (pair.value).getSimplifiedGeometry) ===\r\n        'function'\r\n    ) {\r\n      if (gmlVersion === 2) {\r\n        GML2.prototype.writeGeometryElement(value, pair.value, objectStack);\r\n      } else if (gmlVersion === 3) {\r\n        GML3.prototype.writeGeometryElement(value, pair.value, objectStack);\r\n      } else {\r\n        GML32.prototype.writeGeometryElement(value, pair.value, objectStack);\r\n      }\r\n    } else {\r\n      writeStringTextNode(value, pair.value);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {{vendorId: string, safeToIgnore: boolean, value: string}} nativeElement The native element.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeNative(node, nativeElement, objectStack) {\r\n  if (nativeElement.vendorId) {\r\n    node.setAttribute('vendorId', nativeElement.vendorId);\r\n  }\r\n  if (nativeElement.safeToIgnore !== undefined) {\r\n    node.setAttribute('safeToIgnore', String(nativeElement.safeToIgnore));\r\n  }\r\n  if (nativeElement.value !== undefined) {\r\n    writeStringTextNode(node, nativeElement.value);\r\n  }\r\n}\r\n\r\n/**\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n */\r\nconst GETFEATURE_SERIALIZERS = {\r\n  'http://www.opengis.net/wfs': {\r\n    'Query': makeChildAppender(writeQuery),\r\n  },\r\n  'http://www.opengis.net/wfs/2.0': {\r\n    'Query': makeChildAppender(writeQuery),\r\n  },\r\n  'http://www.opengis.net/ogc': {\r\n    'During': makeChildAppender(writeDuringFilter),\r\n    'And': makeChildAppender(writeLogicalFilter),\r\n    'Or': makeChildAppender(writeLogicalFilter),\r\n    'Not': makeChildAppender(writeNotFilter),\r\n    'BBOX': makeChildAppender(writeBboxFilter),\r\n    'Contains': makeChildAppender(writeSpatialFilter),\r\n    'Intersects': makeChildAppender(writeSpatialFilter),\r\n    'Within': makeChildAppender(writeSpatialFilter),\r\n    'DWithin': makeChildAppender(writeDWithinFilter),\r\n    'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsNull': makeChildAppender(writeIsNullFilter),\r\n    'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),\r\n    'PropertyIsLike': makeChildAppender(writeIsLikeFilter),\r\n  },\r\n  'http://www.opengis.net/fes/2.0': {\r\n    'During': makeChildAppender(writeDuringFilter),\r\n    'And': makeChildAppender(writeLogicalFilter),\r\n    'Or': makeChildAppender(writeLogicalFilter),\r\n    'Not': makeChildAppender(writeNotFilter),\r\n    'BBOX': makeChildAppender(writeBboxFilter),\r\n    'Contains': makeChildAppender(writeSpatialFilter),\r\n    'Disjoint': makeChildAppender(writeSpatialFilter),\r\n    'Intersects': makeChildAppender(writeSpatialFilter),\r\n    'ResourceId': makeChildAppender(writeResourceIdFilter),\r\n    'Within': makeChildAppender(writeSpatialFilter),\r\n    'DWithin': makeChildAppender(writeDWithinFilter),\r\n    'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),\r\n    'PropertyIsNull': makeChildAppender(writeIsNullFilter),\r\n    'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),\r\n    'PropertyIsLike': makeChildAppender(writeIsLikeFilter),\r\n  },\r\n};\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {string} featureType Feature type.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeQuery(node, featureType, objectStack) {\r\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const version = context['version'];\r\n  const featurePrefix = context['featurePrefix'];\r\n  const featureNS = context['featureNS'];\r\n  const propertyNames = context['propertyNames'];\r\n  const srsName = context['srsName'];\r\n  let typeName;\r\n  // If feature prefix is not defined, we must not use the default prefix.\r\n  if (featurePrefix) {\r\n    typeName = getTypeName(featurePrefix, featureType);\r\n  } else {\r\n    typeName = featureType;\r\n  }\r\n  let typeNameAttr;\r\n  if (version === '2.0.0') {\r\n    typeNameAttr = 'typeNames';\r\n  } else {\r\n    typeNameAttr = 'typeName';\r\n  }\r\n  node.setAttribute(typeNameAttr, typeName);\r\n  if (srsName) {\r\n    node.setAttribute('srsName', srsName);\r\n  }\r\n  if (featureNS) {\r\n    node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\r\n  }\r\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */ (\r\n    Object.assign({}, context)\r\n  );\r\n  item.node = node;\r\n  pushSerializeAndPop(\r\n    item,\r\n    QUERY_SERIALIZERS,\r\n    makeSimpleNodeFactory('PropertyName'),\r\n    propertyNames,\r\n    objectStack\r\n  );\r\n  const filter = context['filter'];\r\n  if (filter) {\r\n    const child = createElementNS(getFilterNS(version), 'Filter');\r\n    node.appendChild(child);\r\n    writeFilterCondition(child, filter, objectStack);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeFilterCondition(node, filter, objectStack) {\r\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  /** @type {import(\"../xml.js\").NodeStackItem} */\r\n  const item = {node};\r\n  Object.assign(item, {context});\r\n  pushSerializeAndPop(\r\n    item,\r\n    GETFEATURE_SERIALIZERS,\r\n    makeSimpleNodeFactory(filter.getTagName()),\r\n    [filter],\r\n    objectStack\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {import(\"./filter/Bbox.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeBboxFilter(node, filter, objectStack) {\r\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const context = parent['context'];\r\n  const version = context['version'];\r\n  parent['srsName'] = filter.srsName;\r\n  const format = GML_FORMATS[version];\r\n\r\n  writePropertyName(version, node, filter.geometryName);\r\n  format.prototype.writeGeometryElement(node, filter.extent, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Element.\r\n * @param {import(\"./filter/ResourceId.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeResourceIdFilter(node, filter, objectStack) {\r\n  node.setAttribute('rid', /** @type {string} */ (filter.rid));\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {import(\"./filter/Spatial.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeSpatialFilter(node, filter, objectStack) {\r\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const context = parent['context'];\r\n  const version = context['version'];\r\n  parent['srsName'] = filter.srsName;\r\n  const format = GML_FORMATS[version];\r\n\r\n  writePropertyName(version, node, filter.geometryName);\r\n  format.prototype.writeGeometryElement(node, filter.geometry, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {import(\"./filter/DWithin.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeDWithinFilter(node, filter, objectStack) {\r\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const context = parent['context'];\r\n  const version = context['version'];\r\n  writeSpatialFilter(node, filter, objectStack);\r\n  const distance = createElementNS(getFilterNS(version), 'Distance');\r\n  writeStringTextNode(distance, filter.distance.toString());\r\n  if (version === '2.0.0') {\r\n    distance.setAttribute('uom', filter.unit);\r\n  } else {\r\n    distance.setAttribute('units', filter.unit);\r\n  }\r\n  node.appendChild(distance);\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {import(\"./filter/During.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeDuringFilter(node, filter, objectStack) {\r\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const context = parent['context'];\r\n  const version = context['version'];\r\n\r\n  writeExpression(FESNS[version], 'ValueReference', node, filter.propertyName);\r\n  const timePeriod = createElementNS(GMLNS, 'TimePeriod');\r\n\r\n  node.appendChild(timePeriod);\r\n\r\n  const begin = createElementNS(GMLNS, 'begin');\r\n  timePeriod.appendChild(begin);\r\n  writeTimeInstant(begin, filter.begin);\r\n\r\n  const end = createElementNS(GMLNS, 'end');\r\n  timePeriod.appendChild(end);\r\n  writeTimeInstant(end, filter.end);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"./filter/LogicalNary.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeLogicalFilter(node, filter, objectStack) {\r\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const context = parent['context'];\r\n  /** @type {import(\"../xml.js\").NodeStackItem} */\r\n  const item = {node};\r\n  Object.assign(item, {context});\r\n  const conditions = filter.conditions;\r\n  for (let i = 0, ii = conditions.length; i < ii; ++i) {\r\n    const condition = conditions[i];\r\n    pushSerializeAndPop(\r\n      item,\r\n      GETFEATURE_SERIALIZERS,\r\n      makeSimpleNodeFactory(condition.getTagName()),\r\n      [condition],\r\n      objectStack\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"./filter/Not.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeNotFilter(node, filter, objectStack) {\r\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const context = parent['context'];\r\n  /** @type {import(\"../xml.js\").NodeStackItem} */\r\n  const item = {node};\r\n  Object.assign(item, {context});\r\n  const condition = filter.condition;\r\n  pushSerializeAndPop(\r\n    item,\r\n    GETFEATURE_SERIALIZERS,\r\n    makeSimpleNodeFactory(condition.getTagName()),\r\n    [condition],\r\n    objectStack\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"./filter/ComparisonBinary.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeComparisonFilter(node, filter, objectStack) {\r\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const context = parent['context'];\r\n  const version = context['version'];\r\n  if (filter.matchCase !== undefined) {\r\n    node.setAttribute('matchCase', filter.matchCase.toString());\r\n  }\r\n  writePropertyName(version, node, filter.propertyName);\r\n  writeLiteral(version, node, '' + filter.expression);\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {import(\"./filter/IsNull.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeIsNullFilter(node, filter, objectStack) {\r\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const context = parent['context'];\r\n  const version = context['version'];\r\n  writePropertyName(version, node, filter.propertyName);\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {import(\"./filter/IsBetween.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeIsBetweenFilter(node, filter, objectStack) {\r\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const context = parent['context'];\r\n  const version = context['version'];\r\n  const ns = getFilterNS(version);\r\n\r\n  writePropertyName(version, node, filter.propertyName);\r\n\r\n  const lowerBoundary = createElementNS(ns, 'LowerBoundary');\r\n  node.appendChild(lowerBoundary);\r\n  writeLiteral(version, lowerBoundary, '' + filter.lowerBoundary);\r\n\r\n  const upperBoundary = createElementNS(ns, 'UpperBoundary');\r\n  node.appendChild(upperBoundary);\r\n  writeLiteral(version, upperBoundary, '' + filter.upperBoundary);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {import(\"./filter/IsLike.js\").default} filter Filter.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeIsLikeFilter(node, filter, objectStack) {\r\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const context = parent['context'];\r\n  const version = context['version'];\r\n  node.setAttribute('wildCard', filter.wildCard);\r\n  node.setAttribute('singleChar', filter.singleChar);\r\n  node.setAttribute('escapeChar', filter.escapeChar);\r\n  if (filter.matchCase !== undefined) {\r\n    node.setAttribute('matchCase', filter.matchCase.toString());\r\n  }\r\n  writePropertyName(version, node, filter.propertyName);\r\n  writeLiteral(version, node, '' + filter.pattern);\r\n}\r\n\r\n/**\r\n * @param {string} ns Namespace.\r\n * @param {string} tagName Tag name.\r\n * @param {Node} node Node.\r\n * @param {string} value Value.\r\n */\r\nfunction writeExpression(ns, tagName, node, value) {\r\n  const property = createElementNS(ns, tagName);\r\n  writeStringTextNode(property, value);\r\n  node.appendChild(property);\r\n}\r\n\r\n/**\r\n * @param {string} version Version.\r\n * @param {Node} node Node.\r\n * @param {string} value PropertyName value.\r\n */\r\nfunction writeLiteral(version, node, value) {\r\n  writeExpression(getFilterNS(version), 'Literal', node, value);\r\n}\r\n\r\n/**\r\n * @param {string} version Version.\r\n * @param {Node} node Node.\r\n * @param {string} value PropertyName value.\r\n */\r\nfunction writePropertyName(version, node, value) {\r\n  if (version === '2.0.0') {\r\n    writeExpression(FESNS[version], 'ValueReference', node, value);\r\n  } else {\r\n    writeExpression(OGCNS[version], 'PropertyName', node, value);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {string} time PropertyName value.\r\n */\r\nfunction writeTimeInstant(node, time) {\r\n  const timeInstant = createElementNS(GMLNS, 'TimeInstant');\r\n  node.appendChild(timeInstant);\r\n\r\n  const timePosition = createElementNS(GMLNS, 'timePosition');\r\n  timeInstant.appendChild(timePosition);\r\n  writeStringTextNode(timePosition, time);\r\n}\r\n\r\n/**\r\n * Encode filter as WFS `Filter` and return the Node.\r\n *\r\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\r\n * @param {string} version WFS version. If not provided defaults to '1.1.0'\r\n * @return {Node} Result.\r\n * @api\r\n */\r\nexport function writeFilter(filter, version) {\r\n  version = version || '1.1.0';\r\n  const child = createElementNS(getFilterNS(version), 'Filter');\r\n  const context = {\r\n    node: child,\r\n  };\r\n  Object.assign(context, {\r\n    'version': version,\r\n    'filter': filter,\r\n  });\r\n  writeFilterCondition(child, filter, [context]);\r\n  return child;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<string>} featureTypes Feature types.\r\n * @param {Array<*>} objectStack Node stack.\r\n */\r\nfunction writeGetFeature(node, featureTypes, objectStack) {\r\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */ (\r\n    Object.assign({}, context)\r\n  );\r\n  item.node = node;\r\n  pushSerializeAndPop(\r\n    item,\r\n    GETFEATURE_SERIALIZERS,\r\n    makeSimpleNodeFactory('Query'),\r\n    featureTypes,\r\n    objectStack\r\n  );\r\n}\r\n\r\nfunction getFilterNS(version) {\r\n  let ns;\r\n  if (version === '2.0.0') {\r\n    ns = FESNS[version];\r\n  } else {\r\n    ns = OGCNS[version];\r\n  }\r\n  return ns;\r\n}\r\n\r\nexport default WFS;\r\n", "/**\r\n * @module ol/format/WKB\r\n */\r\nimport Feature from '../Feature.js';\r\nimport FeatureFormat, {transformGeometryWithOptions} from './Feature.js';\r\nimport GeometryCollection from '../geom/GeometryCollection.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport MultiLineString from '../geom/MultiLineString.js';\r\nimport MultiPoint from '../geom/MultiPoint.js';\r\nimport MultiPolygon from '../geom/MultiPolygon.js';\r\nimport Point from '../geom/Point.js';\r\nimport Polygon from '../geom/Polygon.js';\r\nimport {get as getProjection} from '../proj.js';\r\n\r\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\r\n\r\n// WKB spec: https://www.ogc.org/standards/sfa\r\n// EWKB spec: https://raw.githubusercontent.com/postgis/postgis/2.1.0/doc/ZMSgeoms.txt\r\n\r\n/**\r\n * @const\r\n * @enum {number}\r\n */\r\nconst WKBGeometryType = {\r\n  POINT: 1,\r\n  LINE_STRING: 2,\r\n  POLYGON: 3,\r\n  MULTI_POINT: 4,\r\n  MULTI_LINE_STRING: 5,\r\n  MULTI_POLYGON: 6,\r\n  GEOMETRY_COLLECTION: 7,\r\n\r\n  /*\r\n  CIRCULAR_STRING: 8,\r\n  COMPOUND_CURVE: 9,\r\n  CURVE_POLYGON: 10,\r\n\r\n  MULTI_CURVE: 11,\r\n  MULTI_SURFACE: 12,\r\n  CURVE: 13,\r\n  SURFACE: 14,\r\n  */\r\n\r\n  POLYHEDRAL_SURFACE: 15,\r\n  TIN: 16,\r\n  TRIANGLE: 17,\r\n};\r\n\r\nclass WkbReader {\r\n  /**\r\n   * @param {DataView} view source to read\r\n   */\r\n  constructor(view) {\r\n    /** @private */\r\n    this.view_ = view;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.pos_ = 0;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.initialized_ = false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.isLittleEndian_ = false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.hasZ_ = false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.hasM_ = false;\r\n\r\n    /**\r\n     * @type {number|null}\r\n     * @private\r\n     */\r\n    this.srid_ = null;\r\n\r\n    /**\r\n     * @type {import(\"../geom/Geometry.js\").GeometryLayout}\r\n     * @private\r\n     */\r\n    this.layout_ = 'XY';\r\n  }\r\n\r\n  /**\r\n   * @return {number} value\r\n   */\r\n  readUint8() {\r\n    return this.view_.getUint8(this.pos_++);\r\n  }\r\n\r\n  /**\r\n   * @param {boolean} [isLittleEndian] Whether read value as little endian\r\n   * @return {number} value\r\n   */\r\n  readUint32(isLittleEndian) {\r\n    return this.view_.getUint32(\r\n      (this.pos_ += 4) - 4,\r\n      isLittleEndian !== undefined ? isLittleEndian : this.isLittleEndian_\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {boolean} [isLittleEndian] Whether read value as little endian\r\n   * @return {number} value\r\n   */\r\n  readDouble(isLittleEndian) {\r\n    return this.view_.getFloat64(\r\n      (this.pos_ += 8) - 8,\r\n      isLittleEndian !== undefined ? isLittleEndian : this.isLittleEndian_\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return {import('../coordinate.js').Coordinate} coords for Point\r\n   */\r\n  readPoint() {\r\n    /** @type import('../coordinate.js').Coordinate */\r\n    const coords = [];\r\n\r\n    coords.push(this.readDouble());\r\n    coords.push(this.readDouble());\r\n    if (this.hasZ_) {\r\n      coords.push(this.readDouble());\r\n    }\r\n    if (this.hasM_) {\r\n      coords.push(this.readDouble());\r\n    }\r\n\r\n    return coords;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<import('../coordinate.js').Coordinate>} coords for LineString / LinearRing\r\n   */\r\n  readLineString() {\r\n    const numPoints = this.readUint32();\r\n\r\n    /** @type Array<import('../coordinate.js').Coordinate> */\r\n    const coords = [];\r\n    for (let i = 0; i < numPoints; i++) {\r\n      coords.push(this.readPoint());\r\n    }\r\n\r\n    return coords;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<import('../coordinate.js').Coordinate>>} coords for Polygon like\r\n   */\r\n  readPolygon() {\r\n    const numRings = this.readUint32();\r\n\r\n    /** @type Array<Array<import('../coordinate.js').Coordinate>> */\r\n    const rings = [];\r\n    for (let i = 0; i < numRings; i++) {\r\n      rings.push(this.readLineString()); // as a LinearRing\r\n    }\r\n\r\n    return rings;\r\n  }\r\n\r\n  /**\r\n   * @param {number} [expectedTypeId] Expected WKB Type ID\r\n   * @return {number} WKB Type ID\r\n   */\r\n  readWkbHeader(expectedTypeId) {\r\n    const byteOrder = this.readUint8();\r\n    const isLittleEndian = byteOrder > 0;\r\n\r\n    const wkbType = this.readUint32(isLittleEndian);\r\n    const wkbTypeThousandth = Math.floor((wkbType & 0x0fffffff) / 1000);\r\n    const hasZ =\r\n      Boolean(wkbType & 0x80000000) ||\r\n      wkbTypeThousandth === 1 ||\r\n      wkbTypeThousandth === 3;\r\n    const hasM =\r\n      Boolean(wkbType & 0x40000000) ||\r\n      wkbTypeThousandth === 2 ||\r\n      wkbTypeThousandth === 3;\r\n    const hasSRID = Boolean(wkbType & 0x20000000);\r\n    const typeId = (wkbType & 0x0fffffff) % 1000; // Assume 1000 is an upper limit for type ID\r\n    const layout = /** @type {import(\"../geom/Geometry.js\").GeometryLayout} */ (\r\n      ['XY', hasZ ? 'Z' : '', hasM ? 'M' : ''].join('')\r\n    );\r\n\r\n    const srid = hasSRID ? this.readUint32(isLittleEndian) : null;\r\n\r\n    if (expectedTypeId !== undefined && expectedTypeId !== typeId) {\r\n      throw new Error('Unexpected WKB geometry type ' + typeId);\r\n    }\r\n\r\n    if (this.initialized_) {\r\n      // sanity checks\r\n      if (this.isLittleEndian_ !== isLittleEndian) {\r\n        throw new Error('Inconsistent endian');\r\n      }\r\n      if (this.layout_ !== layout) {\r\n        throw new Error('Inconsistent geometry layout');\r\n      }\r\n      if (srid && this.srid_ !== srid) {\r\n        throw new Error('Inconsistent coordinate system (SRID)');\r\n      }\r\n    } else {\r\n      this.isLittleEndian_ = isLittleEndian;\r\n      this.hasZ_ = hasZ;\r\n      this.hasM_ = hasM;\r\n      this.layout_ = layout;\r\n      this.srid_ = srid;\r\n      this.initialized_ = true;\r\n    }\r\n\r\n    return typeId;\r\n  }\r\n\r\n  /**\r\n   * @param {number} typeId WKB Type ID\r\n   * @return {any} values read\r\n   */\r\n  readWkbPayload(typeId) {\r\n    switch (typeId) {\r\n      case WKBGeometryType.POINT:\r\n        return this.readPoint();\r\n\r\n      case WKBGeometryType.LINE_STRING:\r\n        return this.readLineString();\r\n\r\n      case WKBGeometryType.POLYGON:\r\n      case WKBGeometryType.TRIANGLE:\r\n        return this.readPolygon();\r\n\r\n      case WKBGeometryType.MULTI_POINT:\r\n        return this.readMultiPoint();\r\n\r\n      case WKBGeometryType.MULTI_LINE_STRING:\r\n        return this.readMultiLineString();\r\n\r\n      case WKBGeometryType.MULTI_POLYGON:\r\n      case WKBGeometryType.POLYHEDRAL_SURFACE:\r\n      case WKBGeometryType.TIN:\r\n        return this.readMultiPolygon();\r\n\r\n      case WKBGeometryType.GEOMETRY_COLLECTION:\r\n        return this.readGeometryCollection();\r\n\r\n      default:\r\n        throw new Error(\r\n          'Unsupported WKB geometry type ' + typeId + ' is found'\r\n        );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} expectedTypeId Expected WKB Type ID\r\n   * @return {any} values read\r\n   */\r\n  readWkbBlock(expectedTypeId) {\r\n    return this.readWkbPayload(this.readWkbHeader(expectedTypeId));\r\n  }\r\n\r\n  /**\r\n   * @param {Function} reader reader function for each item\r\n   * @param {number} [expectedTypeId] Expected WKB Type ID\r\n   * @return {any} values read\r\n   */\r\n  readWkbCollection(reader, expectedTypeId) {\r\n    const num = this.readUint32();\r\n\r\n    const items = [];\r\n    for (let i = 0; i < num; i++) {\r\n      const result = reader.call(this, expectedTypeId);\r\n      if (result) {\r\n        items.push(result);\r\n      }\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<import('../coordinate.js').Coordinate>} coords for MultiPoint\r\n   */\r\n  readMultiPoint() {\r\n    return this.readWkbCollection(this.readWkbBlock, WKBGeometryType.POINT);\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<import('../coordinate.js').Coordinate>>} coords for MultiLineString like\r\n   */\r\n  readMultiLineString() {\r\n    return this.readWkbCollection(\r\n      this.readWkbBlock,\r\n      WKBGeometryType.LINE_STRING\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<Array<import('../coordinate.js').Coordinate>>>} coords for MultiPolygon like\r\n   */\r\n  readMultiPolygon() {\r\n    return this.readWkbCollection(this.readWkbBlock, WKBGeometryType.POLYGON);\r\n  }\r\n\r\n  /**\r\n   * @return {Array<import('../geom/Geometry.js').default>} array of geometries\r\n   */\r\n  readGeometryCollection() {\r\n    return this.readWkbCollection(this.readGeometry);\r\n  }\r\n\r\n  /**\r\n   * @return {import('../geom/Geometry.js').default} geometry\r\n   */\r\n  readGeometry() {\r\n    const typeId = this.readWkbHeader();\r\n    const result = this.readWkbPayload(typeId);\r\n\r\n    switch (typeId) {\r\n      case WKBGeometryType.POINT:\r\n        return new Point(\r\n          /** @type {import('../coordinate.js').Coordinate} */ (result),\r\n          this.layout_\r\n        );\r\n\r\n      case WKBGeometryType.LINE_STRING:\r\n        return new LineString(\r\n          /** @type {Array<import('../coordinate.js').Coordinate>} */ (result),\r\n          this.layout_\r\n        );\r\n\r\n      case WKBGeometryType.POLYGON:\r\n      case WKBGeometryType.TRIANGLE:\r\n        return new Polygon(\r\n          /** @type {Array<Array<import('../coordinate.js').Coordinate>>} */ (\r\n            result\r\n          ),\r\n          this.layout_\r\n        );\r\n\r\n      case WKBGeometryType.MULTI_POINT:\r\n        return new MultiPoint(\r\n          /** @type {Array<import('../coordinate.js').Coordinate>} */ (result),\r\n          this.layout_\r\n        );\r\n\r\n      case WKBGeometryType.MULTI_LINE_STRING:\r\n        return new MultiLineString(\r\n          /** @type {Array<Array<import('../coordinate.js').Coordinate>>} */ (\r\n            result\r\n          ),\r\n          this.layout_\r\n        );\r\n\r\n      case WKBGeometryType.MULTI_POLYGON:\r\n      case WKBGeometryType.POLYHEDRAL_SURFACE:\r\n      case WKBGeometryType.TIN:\r\n        return new MultiPolygon(\r\n          /** @type {Array<Array<Array<import('../coordinate.js').Coordinate>>>} */ (\r\n            result\r\n          ),\r\n          this.layout_\r\n        );\r\n\r\n      case WKBGeometryType.GEOMETRY_COLLECTION:\r\n        return new GeometryCollection(\r\n          /** @type {Array<import('../geom/Geometry.js').default>} */ (result)\r\n        );\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {number|null} SRID in the EWKB. `null` if not defined.\r\n   */\r\n  getSrid() {\r\n    return this.srid_;\r\n  }\r\n}\r\n\r\nclass WkbWriter {\r\n  /**\r\n   * @type {Object}\r\n   * @property {string} [layout] geometryLayout\r\n   * @property {boolean} [littleEndian=true] littleEndian\r\n   * @property {boolean} [ewkb=true] Whether writes in EWKB format\r\n   * @property {Object} [nodata] NoData value for each axes\r\n   * @param {Object} opts options\r\n   */\r\n  constructor(opts) {\r\n    opts = opts || {};\r\n\r\n    /** @type {string} */\r\n    this.layout_ = opts.layout;\r\n    this.isLittleEndian_ = opts.littleEndian !== false;\r\n\r\n    this.isEWKB_ = opts.ewkb !== false;\r\n\r\n    /** @type {Array<Array<number>>} */\r\n    this.writeQueue_ = [];\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @property {number} X NoData value for X\r\n     * @property {number} Y NoData value for Y\r\n     * @property {number} Z NoData value for Z\r\n     * @property {number} M NoData value for M\r\n     */\r\n    this.nodata_ = Object.assign({X: 0, Y: 0, Z: 0, M: 0}, opts.nodata);\r\n  }\r\n\r\n  /**\r\n   * @param {number} value value\r\n   */\r\n  writeUint8(value) {\r\n    this.writeQueue_.push([1, value]);\r\n  }\r\n\r\n  /**\r\n   * @param {number} value value\r\n   */\r\n  writeUint32(value) {\r\n    this.writeQueue_.push([4, value]);\r\n  }\r\n\r\n  /**\r\n   * @param {number} value value\r\n   */\r\n  writeDouble(value) {\r\n    this.writeQueue_.push([8, value]);\r\n  }\r\n\r\n  /**\r\n   * @param {import('../coordinate.js').Coordinate} coords coords\r\n   * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout layout\r\n   */\r\n  writePoint(coords, layout) {\r\n    /**\r\n     * @type {Object}\r\n     * @property {number} X NoData value for X\r\n     * @property {number} Y NoData value for Y\r\n     * @property {number} [Z] NoData value for Z\r\n     * @property {number} [M] NoData value for M\r\n     */\r\n    const coordsObj = Object.assign.apply(\r\n      null,\r\n      layout.split('').map((axis, idx) => ({[axis]: coords[idx]}))\r\n    );\r\n\r\n    for (const axis of this.layout_) {\r\n      this.writeDouble(\r\n        axis in coordsObj ? coordsObj[axis] : this.nodata_[axis]\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<import('../coordinate.js').Coordinate>} coords coords\r\n   * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout layout\r\n   */\r\n  writeLineString(coords, layout) {\r\n    this.writeUint32(coords.length); // numPoints\r\n    for (let i = 0; i < coords.length; i++) {\r\n      this.writePoint(coords[i], layout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Array<import('../coordinate.js').Coordinate>>} rings rings\r\n   * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout layout\r\n   */\r\n  writePolygon(rings, layout) {\r\n    this.writeUint32(rings.length); // numRings\r\n    for (let i = 0; i < rings.length; i++) {\r\n      this.writeLineString(rings[i], layout); // as a LinearRing\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} wkbType WKB Type ID\r\n   * @param {number} [srid] SRID\r\n   */\r\n  writeWkbHeader(wkbType, srid) {\r\n    wkbType %= 1000; // Assume 1000 is an upper limit for type ID\r\n    if (this.layout_.includes('Z')) {\r\n      wkbType += this.isEWKB_ ? 0x80000000 : 1000;\r\n    }\r\n    if (this.layout_.includes('M')) {\r\n      wkbType += this.isEWKB_ ? 0x40000000 : 2000;\r\n    }\r\n    if (this.isEWKB_ && Number.isInteger(srid)) {\r\n      wkbType |= 0x20000000;\r\n    }\r\n\r\n    this.writeUint8(this.isLittleEndian_ ? 1 : 0);\r\n    this.writeUint32(wkbType);\r\n    if (this.isEWKB_ && Number.isInteger(srid)) {\r\n      this.writeUint32(srid);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<import('../coordinate.js').Coordinate>} coords coords\r\n   * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout layout\r\n   */\r\n  writeMultiPoint(coords, layout) {\r\n    this.writeUint32(coords.length); // numItems\r\n    for (let i = 0; i < coords.length; i++) {\r\n      this.writeWkbHeader(1);\r\n      this.writePoint(coords[i], layout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Array<import('../coordinate.js').Coordinate>>} coords coords\r\n   * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout layout\r\n   */\r\n  writeMultiLineString(coords, layout) {\r\n    this.writeUint32(coords.length); // numItems\r\n    for (let i = 0; i < coords.length; i++) {\r\n      this.writeWkbHeader(2);\r\n      this.writeLineString(coords[i], layout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Array<Array<import('../coordinate.js').Coordinate>>>} coords coords\r\n   * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout layout\r\n   */\r\n  writeMultiPolygon(coords, layout) {\r\n    this.writeUint32(coords.length); // numItems\r\n    for (let i = 0; i < coords.length; i++) {\r\n      this.writeWkbHeader(3);\r\n      this.writePolygon(coords[i], layout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<import('../geom/Geometry.js').default>} geometries geometries\r\n   */\r\n  writeGeometryCollection(geometries) {\r\n    this.writeUint32(geometries.length); // numItems\r\n\r\n    for (let i = 0; i < geometries.length; i++) {\r\n      this.writeGeometry(geometries[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../geom/Geometry.js\").default} geom geometry\r\n   * @param {import(\"../geom/Geometry.js\").GeometryLayout} [layout] layout\r\n   * @return {import(\"../geom/Geometry.js\").GeometryLayout} minumum layout made by common axes\r\n   */\r\n  findMinimumLayout(geom, layout = 'XYZM') {\r\n    /**\r\n     * @param {import(\"../geom/Geometry.js\").GeometryLayout} a A\r\n     * @param {import(\"../geom/Geometry.js\").GeometryLayout} b B\r\n     * @return {import(\"../geom/Geometry.js\").GeometryLayout} minumum layout made by common axes\r\n     */\r\n    const GeometryLayout_min = (a, b) => {\r\n      if (a === b) {\r\n        return a;\r\n      }\r\n\r\n      if (a === 'XYZM') {\r\n        // anything `b` is minimum\r\n        return b;\r\n      }\r\n      if (b === 'XYZM') {\r\n        // anything `a` is minimum\r\n        return a;\r\n      }\r\n\r\n      // otherwise, incompatible\r\n      return 'XY';\r\n    };\r\n\r\n    if (geom instanceof SimpleGeometry) {\r\n      return GeometryLayout_min(geom.getLayout(), layout);\r\n    }\r\n\r\n    if (geom instanceof GeometryCollection) {\r\n      const geoms = geom.getGeometriesArray();\r\n      for (let i = 0; i < geoms.length && layout !== 'XY'; i++) {\r\n        layout = this.findMinimumLayout(geoms[i], layout);\r\n      }\r\n    }\r\n\r\n    return layout;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../geom/Geometry.js\").default} geom geometry\r\n   * @param {number} [srid] SRID\r\n   */\r\n  writeGeometry(geom, srid) {\r\n    /**\r\n     * @type {Object<import(\"../geom/Geometry.js\").Type, WKBGeometryType>}\r\n     */\r\n    const wkblut = {\r\n      Point: WKBGeometryType.POINT,\r\n      LineString: WKBGeometryType.LINE_STRING,\r\n      Polygon: WKBGeometryType.POLYGON,\r\n      MultiPoint: WKBGeometryType.MULTI_POINT,\r\n      MultiLineString: WKBGeometryType.MULTI_LINE_STRING,\r\n      MultiPolygon: WKBGeometryType.MULTI_POLYGON,\r\n      GeometryCollection: WKBGeometryType.GEOMETRY_COLLECTION,\r\n    };\r\n    const geomType = geom.getType();\r\n    const typeId = wkblut[geomType];\r\n\r\n    if (!typeId) {\r\n      throw new Error('GeometryType ' + geomType + ' is not supported');\r\n    }\r\n\r\n    // first call of writeGeometry() traverse whole geometries to determine its output layout if not specified on constructor.\r\n    if (!this.layout_) {\r\n      this.layout_ = this.findMinimumLayout(geom);\r\n    }\r\n\r\n    this.writeWkbHeader(typeId, srid);\r\n\r\n    if (geom instanceof SimpleGeometry) {\r\n      const writerLUT = {\r\n        Point: this.writePoint,\r\n        LineString: this.writeLineString,\r\n        Polygon: this.writePolygon,\r\n        MultiPoint: this.writeMultiPoint,\r\n        MultiLineString: this.writeMultiLineString,\r\n        MultiPolygon: this.writeMultiPolygon,\r\n      };\r\n      writerLUT[geomType].call(this, geom.getCoordinates(), geom.getLayout());\r\n    } else if (geom instanceof GeometryCollection) {\r\n      this.writeGeometryCollection(geom.getGeometriesArray());\r\n    }\r\n  }\r\n\r\n  getBuffer() {\r\n    const byteLength = this.writeQueue_.reduce((acc, item) => acc + item[0], 0);\r\n    const buffer = new ArrayBuffer(byteLength);\r\n    const view = new DataView(buffer);\r\n\r\n    let pos = 0;\r\n    this.writeQueue_.forEach((item) => {\r\n      switch (item[0]) {\r\n        case 1:\r\n          view.setUint8(pos, item[1]);\r\n          break;\r\n        case 4:\r\n          view.setUint32(pos, item[1], this.isLittleEndian_);\r\n          break;\r\n        case 8:\r\n          view.setFloat64(pos, item[1], this.isLittleEndian_);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      pos += item[0];\r\n    });\r\n\r\n    return buffer;\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {boolean} [splitCollection=false] Whether to split GeometryCollections into multiple features on reading.\r\n * @property {boolean} [hex=true] Returns hex string instead of ArrayBuffer for output. This also is used as a hint internally whether it should load contents as text or ArrayBuffer on reading.\r\n * @property {boolean} [littleEndian=true] Use littleEndian for output.\r\n * @property {boolean} [ewkb=true] Use EWKB format for output.\r\n * @property {import(\"../geom/Geometry.js\").GeometryLayout} [geometryLayout=null] Use specific coordinate layout for output features (null: auto detect)\r\n * @property {number} [nodataZ=0] If the `geometryLayout` doesn't match with geometry to be output, this value is used to fill missing coordinate value of Z.\r\n * @property {number} [nodataM=0] If the `geometryLayout` doesn't match with geometry to be output, this value is used to fill missing coordinate value of M.\r\n * @property {number|boolean} [srid=true] SRID for output. Specify integer value to enforce the value as a SRID. Specify `true` to extract from `dataProjection`. `false` to suppress the output. This option only takes effect when `ewkb` is `true`.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Geometry format for reading and writing data in the `Well-Known Binary` (WKB) format.\r\n * Also supports `Extended Well-Known Binary` (EWKB) format, used in PostGIS for example.\r\n *\r\n * @api\r\n */\r\nclass WKB extends FeatureFormat {\r\n  /**\r\n   * @param {Options} [options] Optional configuration object.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    this.splitCollection = Boolean(options.splitCollection);\r\n\r\n    this.viewCache_ = null;\r\n\r\n    this.hex_ = options.hex !== false;\r\n    this.littleEndian_ = options.littleEndian !== false;\r\n    this.ewkb_ = options.ewkb !== false;\r\n\r\n    this.layout_ = options.geometryLayout; // null for auto detect\r\n    this.nodataZ_ = options.nodataZ || 0;\r\n    this.nodataM_ = options.nodataM || 0;\r\n\r\n    this.srid_ = options.srid;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./Feature.js\").Type} Format.\r\n   */\r\n  getType() {\r\n    return this.hex_ ? 'text' : 'arraybuffer';\r\n  }\r\n\r\n  /**\r\n   * Read a single feature from a source.\r\n   *\r\n   * @param {string|ArrayBuffer|ArrayBufferView} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   * @api\r\n   */\r\n  readFeature(source, options) {\r\n    return new Feature({\r\n      geometry: this.readGeometry(source, options),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Read all features from a source.\r\n   *\r\n   * @param {string|ArrayBuffer|ArrayBufferView} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   * @api\r\n   */\r\n  readFeatures(source, options) {\r\n    let geometries = [];\r\n    const geometry = this.readGeometry(source, options);\r\n    if (this.splitCollection && geometry instanceof GeometryCollection) {\r\n      geometries = geometry.getGeometriesArray();\r\n    } else {\r\n      geometries = [geometry];\r\n    }\r\n    return geometries.map((geometry) => new Feature({geometry}));\r\n  }\r\n\r\n  /**\r\n   * Read a single geometry from a source.\r\n   *\r\n   * @param {string|ArrayBuffer|ArrayBufferView} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   * @api\r\n   */\r\n  readGeometry(source, options) {\r\n    const view = getDataView(source);\r\n    if (!view) {\r\n      return null;\r\n    }\r\n\r\n    const reader = new WkbReader(view);\r\n    const geometry = reader.readGeometry();\r\n\r\n    this.viewCache_ = view; // cache for internal subsequent call of readProjection()\r\n    options = this.getReadOptions(source, options);\r\n    this.viewCache_ = null; // release\r\n\r\n    return transformGeometryWithOptions(geometry, false, options);\r\n  }\r\n\r\n  /**\r\n   * Read the projection from a source.\r\n   *\r\n   * @param {string|ArrayBuffer|ArrayBufferView} source Source.\r\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\r\n   * @api\r\n   */\r\n  readProjection(source) {\r\n    const view = this.viewCache_ || getDataView(source);\r\n    if (!view) {\r\n      return undefined;\r\n    }\r\n\r\n    const reader = new WkbReader(view);\r\n    reader.readWkbHeader();\r\n\r\n    return (\r\n      (reader.getSrid() && getProjection('EPSG:' + reader.getSrid())) ||\r\n      undefined\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Encode a feature in this format.\r\n   *\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string|ArrayBuffer} Result.\r\n   * @api\r\n   */\r\n  writeFeature(feature, options) {\r\n    return this.writeGeometry(feature.getGeometry(), options);\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features in this format.\r\n   *\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string|ArrayBuffer} Result.\r\n   * @api\r\n   */\r\n  writeFeatures(features, options) {\r\n    return this.writeGeometry(\r\n      new GeometryCollection(features.map((f) => f.getGeometry())),\r\n      options\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Write a single geometry in this format.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string|ArrayBuffer} Result.\r\n   * @api\r\n   */\r\n  writeGeometry(geometry, options) {\r\n    options = this.adaptOptions(options);\r\n\r\n    const writer = new WkbWriter({\r\n      layout: this.layout_,\r\n      littleEndian: this.littleEndian_,\r\n      ewkb: this.ewkb_,\r\n\r\n      nodata: {\r\n        Z: this.nodataZ_,\r\n        M: this.nodataM_,\r\n      },\r\n    });\r\n\r\n    // extract SRID from `dataProjection`\r\n    let srid = Number.isInteger(this.srid_) ? Number(this.srid_) : null;\r\n    if (this.srid_ !== false && !Number.isInteger(this.srid_)) {\r\n      const dataProjection =\r\n        options.dataProjection && getProjection(options.dataProjection);\r\n      if (dataProjection) {\r\n        const code = dataProjection.getCode();\r\n        if (code.startsWith('EPSG:')) {\r\n          srid = Number(code.substring(5));\r\n        }\r\n      }\r\n    }\r\n\r\n    writer.writeGeometry(\r\n      transformGeometryWithOptions(geometry, true, options),\r\n      srid\r\n    );\r\n    const buffer = writer.getBuffer();\r\n\r\n    return this.hex_ ? encodeHexString(buffer) : buffer;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {ArrayBuffer} buffer source buffer\r\n * @return {string} encoded hex string\r\n */\r\nfunction encodeHexString(buffer) {\r\n  const view = new Uint8Array(buffer);\r\n  return Array.from(view.values())\r\n    .map((x) => (x < 16 ? '0' : '') + Number(x).toString(16).toUpperCase())\r\n    .join('');\r\n}\r\n\r\n/**\r\n * @param {string} text source text\r\n * @return {DataView} decoded binary buffer\r\n */\r\nfunction decodeHexString(text) {\r\n  const buffer = new Uint8Array(text.length / 2);\r\n  for (let i = 0; i < text.length / 2; i++) {\r\n    buffer[i] = parseInt(text.substr(i * 2, 2), 16);\r\n  }\r\n  return new DataView(buffer.buffer);\r\n}\r\n\r\n/**\r\n * @param {string | ArrayBuffer | ArrayBufferView} source source\r\n * @return {DataView} data view\r\n */\r\nfunction getDataView(source) {\r\n  if (typeof source === 'string') {\r\n    return decodeHexString(source);\r\n  } else if (ArrayBuffer.isView(source)) {\r\n    if (source instanceof DataView) {\r\n      return source;\r\n    }\r\n    return new DataView(source.buffer, source.byteOffset, source.byteLength);\r\n  } else if (source instanceof ArrayBuffer) {\r\n    return new DataView(source);\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default WKB;\r\n", "/**\r\n * @module ol/format/WKT\r\n */\r\nimport Feature from '../Feature.js';\r\nimport GeometryCollection from '../geom/GeometryCollection.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport MultiLineString from '../geom/MultiLineString.js';\r\nimport MultiPoint from '../geom/MultiPoint.js';\r\nimport MultiPolygon from '../geom/MultiPolygon.js';\r\nimport Point from '../geom/Point.js';\r\nimport Polygon from '../geom/Polygon.js';\r\nimport TextFeature from './TextFeature.js';\r\nimport {transformGeometryWithOptions} from './Feature.js';\r\n\r\n/**\r\n * Geometry constructors\r\n * @enum {function (new:import(\"../geom/Geometry.js\").default, Array, import(\"../geom/Geometry.js\").GeometryLayout)}\r\n */\r\nconst GeometryConstructor = {\r\n  'POINT': Point,\r\n  'LINESTRING': LineString,\r\n  'POLYGON': Polygon,\r\n  'MULTIPOINT': MultiPoint,\r\n  'MULTILINESTRING': MultiLineString,\r\n  'MULTIPOLYGON': MultiPolygon,\r\n};\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {boolean} [splitCollection=false] Whether to split GeometryCollections into\r\n * multiple features on reading.\r\n */\r\n\r\n/**\r\n * @typedef {Object} Token\r\n * @property {number} type Type.\r\n * @property {number|string} [value] Value.\r\n * @property {number} position Position.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst EMPTY = 'EMPTY';\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst Z = 'Z';\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst M = 'M';\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst ZM = 'ZM';\r\n\r\n/**\r\n * @const\r\n * @enum {number}\r\n */\r\nconst TokenType = {\r\n  START: 0,\r\n  TEXT: 1,\r\n  LEFT_PAREN: 2,\r\n  RIGHT_PAREN: 3,\r\n  NUMBER: 4,\r\n  COMMA: 5,\r\n  EOF: 6,\r\n};\r\n\r\n/**\r\n * @type {Object<import(\"../geom/Geometry.js\").Type, string>}\r\n */\r\nconst wktTypeLookup = {\r\n  Point: 'POINT',\r\n  LineString: 'LINESTRING',\r\n  Polygon: 'POLYGON',\r\n  MultiPoint: 'MULTIPOINT',\r\n  MultiLineString: 'MULTILINESTRING',\r\n  MultiPolygon: 'MULTIPOLYGON',\r\n  GeometryCollection: 'GEOMETRYCOLLECTION',\r\n  Circle: 'CIRCLE',\r\n};\r\n\r\n/**\r\n * Class to tokenize a WKT string.\r\n */\r\nclass Lexer {\r\n  /**\r\n   * @param {string} wkt WKT string.\r\n   */\r\n  constructor(wkt) {\r\n    /**\r\n     * @type {string}\r\n     */\r\n    this.wkt = wkt;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.index_ = -1;\r\n  }\r\n\r\n  /**\r\n   * @param {string} c Character.\r\n   * @return {boolean} Whether the character is alphabetic.\r\n   * @private\r\n   */\r\n  isAlpha_(c) {\r\n    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');\r\n  }\r\n\r\n  /**\r\n   * @param {string} c Character.\r\n   * @param {boolean} [decimal] Whether the string number\r\n   *     contains a dot, i.e. is a decimal number.\r\n   * @return {boolean} Whether the character is numeric.\r\n   * @private\r\n   */\r\n  isNumeric_(c, decimal) {\r\n    decimal = decimal !== undefined ? decimal : false;\r\n    return (c >= '0' && c <= '9') || (c == '.' && !decimal);\r\n  }\r\n\r\n  /**\r\n   * @param {string} c Character.\r\n   * @return {boolean} Whether the character is whitespace.\r\n   * @private\r\n   */\r\n  isWhiteSpace_(c) {\r\n    return c == ' ' || c == '\\t' || c == '\\r' || c == '\\n';\r\n  }\r\n\r\n  /**\r\n   * @return {string} Next string character.\r\n   * @private\r\n   */\r\n  nextChar_() {\r\n    return this.wkt.charAt(++this.index_);\r\n  }\r\n\r\n  /**\r\n   * Fetch and return the next token.\r\n   * @return {Token} Next string token.\r\n   */\r\n  nextToken() {\r\n    const c = this.nextChar_();\r\n    const position = this.index_;\r\n    /** @type {number|string} */\r\n    let value = c;\r\n    let type;\r\n\r\n    if (c == '(') {\r\n      type = TokenType.LEFT_PAREN;\r\n    } else if (c == ',') {\r\n      type = TokenType.COMMA;\r\n    } else if (c == ')') {\r\n      type = TokenType.RIGHT_PAREN;\r\n    } else if (this.isNumeric_(c) || c == '-') {\r\n      type = TokenType.NUMBER;\r\n      value = this.readNumber_();\r\n    } else if (this.isAlpha_(c)) {\r\n      type = TokenType.TEXT;\r\n      value = this.readText_();\r\n    } else if (this.isWhiteSpace_(c)) {\r\n      return this.nextToken();\r\n    } else if (c === '') {\r\n      type = TokenType.EOF;\r\n    } else {\r\n      throw new Error('Unexpected character: ' + c);\r\n    }\r\n\r\n    return {position: position, value: value, type: type};\r\n  }\r\n\r\n  /**\r\n   * @return {number} Numeric token value.\r\n   * @private\r\n   */\r\n  readNumber_() {\r\n    let c;\r\n    const index = this.index_;\r\n    let decimal = false;\r\n    let scientificNotation = false;\r\n    do {\r\n      if (c == '.') {\r\n        decimal = true;\r\n      } else if (c == 'e' || c == 'E') {\r\n        scientificNotation = true;\r\n      }\r\n      c = this.nextChar_();\r\n    } while (\r\n      this.isNumeric_(c, decimal) ||\r\n      // if we haven't detected a scientific number before, 'e' or 'E'\r\n      // hint that we should continue to read\r\n      (!scientificNotation && (c == 'e' || c == 'E')) ||\r\n      // once we know that we have a scientific number, both '-' and '+'\r\n      // are allowed\r\n      (scientificNotation && (c == '-' || c == '+'))\r\n    );\r\n    return parseFloat(this.wkt.substring(index, this.index_--));\r\n  }\r\n\r\n  /**\r\n   * @return {string} String token value.\r\n   * @private\r\n   */\r\n  readText_() {\r\n    let c;\r\n    const index = this.index_;\r\n    do {\r\n      c = this.nextChar_();\r\n    } while (this.isAlpha_(c));\r\n    return this.wkt.substring(index, this.index_--).toUpperCase();\r\n  }\r\n}\r\n\r\n/**\r\n * Class to parse the tokens from the WKT string.\r\n */\r\nclass Parser {\r\n  /**\r\n   * @param {Lexer} lexer The lexer.\r\n   */\r\n  constructor(lexer) {\r\n    /**\r\n     * @type {Lexer}\r\n     * @private\r\n     */\r\n    this.lexer_ = lexer;\r\n\r\n    /**\r\n     * @type {Token}\r\n     * @private\r\n     */\r\n    this.token_ = {\r\n      position: 0,\r\n      type: TokenType.START,\r\n    };\r\n\r\n    /**\r\n     * @type {import(\"../geom/Geometry.js\").GeometryLayout}\r\n     * @private\r\n     */\r\n    this.layout_ = 'XY';\r\n  }\r\n\r\n  /**\r\n   * Fetch the next token form the lexer and replace the active token.\r\n   * @private\r\n   */\r\n  consume_() {\r\n    this.token_ = this.lexer_.nextToken();\r\n  }\r\n\r\n  /**\r\n   * Tests if the given type matches the type of the current token.\r\n   * @param {TokenType} type Token type.\r\n   * @return {boolean} Whether the token matches the given type.\r\n   */\r\n  isTokenType(type) {\r\n    return this.token_.type == type;\r\n  }\r\n\r\n  /**\r\n   * If the given type matches the current token, consume it.\r\n   * @param {TokenType} type Token type.\r\n   * @return {boolean} Whether the token matches the given type.\r\n   */\r\n  match(type) {\r\n    const isMatch = this.isTokenType(type);\r\n    if (isMatch) {\r\n      this.consume_();\r\n    }\r\n    return isMatch;\r\n  }\r\n\r\n  /**\r\n   * Try to parse the tokens provided by the lexer.\r\n   * @return {import(\"../geom/Geometry.js\").default} The geometry.\r\n   */\r\n  parse() {\r\n    this.consume_();\r\n    return this.parseGeometry_();\r\n  }\r\n\r\n  /**\r\n   * Try to parse the dimensional info.\r\n   * @return {import(\"../geom/Geometry.js\").GeometryLayout} The layout.\r\n   * @private\r\n   */\r\n  parseGeometryLayout_() {\r\n    /** @type {import(\"../geom/Geometry.js\").GeometryLayout} */\r\n    let layout = 'XY';\r\n    const dimToken = this.token_;\r\n    if (this.isTokenType(TokenType.TEXT)) {\r\n      const dimInfo = dimToken.value;\r\n      if (dimInfo === Z) {\r\n        layout = 'XYZ';\r\n      } else if (dimInfo === M) {\r\n        layout = 'XYM';\r\n      } else if (dimInfo === ZM) {\r\n        layout = 'XYZM';\r\n      }\r\n      if (layout !== 'XY') {\r\n        this.consume_();\r\n      }\r\n    }\r\n    return layout;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<import(\"../geom/Geometry.js\").default>} A collection of geometries.\r\n   * @private\r\n   */\r\n  parseGeometryCollectionText_() {\r\n    if (this.match(TokenType.LEFT_PAREN)) {\r\n      const geometries = [];\r\n      do {\r\n        geometries.push(this.parseGeometry_());\r\n      } while (this.match(TokenType.COMMA));\r\n      if (this.match(TokenType.RIGHT_PAREN)) {\r\n        return geometries;\r\n      }\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} All values in a point.\r\n   * @private\r\n   */\r\n  parsePointText_() {\r\n    if (this.match(TokenType.LEFT_PAREN)) {\r\n      const coordinates = this.parsePoint_();\r\n      if (this.match(TokenType.RIGHT_PAREN)) {\r\n        return coordinates;\r\n      }\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<number>>} All points in a linestring.\r\n   * @private\r\n   */\r\n  parseLineStringText_() {\r\n    if (this.match(TokenType.LEFT_PAREN)) {\r\n      const coordinates = this.parsePointList_();\r\n      if (this.match(TokenType.RIGHT_PAREN)) {\r\n        return coordinates;\r\n      }\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<Array<number>>>} All points in a polygon.\r\n   * @private\r\n   */\r\n  parsePolygonText_() {\r\n    if (this.match(TokenType.LEFT_PAREN)) {\r\n      const coordinates = this.parseLineStringTextList_();\r\n      if (this.match(TokenType.RIGHT_PAREN)) {\r\n        return coordinates;\r\n      }\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<number>>} All points in a multipoint.\r\n   * @private\r\n   */\r\n  parseMultiPointText_() {\r\n    if (this.match(TokenType.LEFT_PAREN)) {\r\n      let coordinates;\r\n      if (this.token_.type == TokenType.LEFT_PAREN) {\r\n        coordinates = this.parsePointTextList_();\r\n      } else {\r\n        coordinates = this.parsePointList_();\r\n      }\r\n      if (this.match(TokenType.RIGHT_PAREN)) {\r\n        return coordinates;\r\n      }\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<Array<number>>>} All linestring points\r\n   *                                          in a multilinestring.\r\n   * @private\r\n   */\r\n  parseMultiLineStringText_() {\r\n    if (this.match(TokenType.LEFT_PAREN)) {\r\n      const coordinates = this.parseLineStringTextList_();\r\n      if (this.match(TokenType.RIGHT_PAREN)) {\r\n        return coordinates;\r\n      }\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<Array<Array<number>>>>} All polygon points in a multipolygon.\r\n   * @private\r\n   */\r\n  parseMultiPolygonText_() {\r\n    if (this.match(TokenType.LEFT_PAREN)) {\r\n      const coordinates = this.parsePolygonTextList_();\r\n      if (this.match(TokenType.RIGHT_PAREN)) {\r\n        return coordinates;\r\n      }\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} A point.\r\n   * @private\r\n   */\r\n  parsePoint_() {\r\n    const coordinates = [];\r\n    const dimensions = this.layout_.length;\r\n    for (let i = 0; i < dimensions; ++i) {\r\n      const token = this.token_;\r\n      if (this.match(TokenType.NUMBER)) {\r\n        coordinates.push(/** @type {number} */ (token.value));\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    if (coordinates.length == dimensions) {\r\n      return coordinates;\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<number>>} An array of points.\r\n   * @private\r\n   */\r\n  parsePointList_() {\r\n    const coordinates = [this.parsePoint_()];\r\n    while (this.match(TokenType.COMMA)) {\r\n      coordinates.push(this.parsePoint_());\r\n    }\r\n    return coordinates;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<number>>} An array of points.\r\n   * @private\r\n   */\r\n  parsePointTextList_() {\r\n    const coordinates = [this.parsePointText_()];\r\n    while (this.match(TokenType.COMMA)) {\r\n      coordinates.push(this.parsePointText_());\r\n    }\r\n    return coordinates;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<Array<number>>>} An array of points.\r\n   * @private\r\n   */\r\n  parseLineStringTextList_() {\r\n    const coordinates = [this.parseLineStringText_()];\r\n    while (this.match(TokenType.COMMA)) {\r\n      coordinates.push(this.parseLineStringText_());\r\n    }\r\n    return coordinates;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<Array<Array<number>>>>} An array of points.\r\n   * @private\r\n   */\r\n  parsePolygonTextList_() {\r\n    const coordinates = [this.parsePolygonText_()];\r\n    while (this.match(TokenType.COMMA)) {\r\n      coordinates.push(this.parsePolygonText_());\r\n    }\r\n    return coordinates;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Whether the token implies an empty geometry.\r\n   * @private\r\n   */\r\n  isEmptyGeometry_() {\r\n    const isEmpty =\r\n      this.isTokenType(TokenType.TEXT) && this.token_.value == EMPTY;\r\n    if (isEmpty) {\r\n      this.consume_();\r\n    }\r\n    return isEmpty;\r\n  }\r\n\r\n  /**\r\n   * Create an error message for an unexpected token error.\r\n   * @return {string} Error message.\r\n   * @private\r\n   */\r\n  formatErrorMessage_() {\r\n    return (\r\n      'Unexpected `' +\r\n      this.token_.value +\r\n      '` at position ' +\r\n      this.token_.position +\r\n      ' in `' +\r\n      this.lexer_.wkt +\r\n      '`'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../geom/Geometry.js\").default} The geometry.\r\n   * @private\r\n   */\r\n  parseGeometry_() {\r\n    const token = this.token_;\r\n    if (this.match(TokenType.TEXT)) {\r\n      const geomType = /** @type {string} */ (token.value);\r\n      this.layout_ = this.parseGeometryLayout_();\r\n      const isEmpty = this.isEmptyGeometry_();\r\n      if (geomType == 'GEOMETRYCOLLECTION') {\r\n        if (isEmpty) {\r\n          return new GeometryCollection([]);\r\n        }\r\n        const geometries = this.parseGeometryCollectionText_();\r\n        return new GeometryCollection(geometries);\r\n      } else {\r\n        const ctor = GeometryConstructor[geomType];\r\n        if (!ctor) {\r\n          throw new Error('Invalid geometry type: ' + geomType);\r\n        }\r\n\r\n        let coordinates;\r\n\r\n        if (isEmpty) {\r\n          if (geomType == 'POINT') {\r\n            coordinates = [NaN, NaN];\r\n          } else {\r\n            coordinates = [];\r\n          }\r\n        } else {\r\n          switch (geomType) {\r\n            case 'POINT': {\r\n              coordinates = this.parsePointText_();\r\n              break;\r\n            }\r\n            case 'LINESTRING': {\r\n              coordinates = this.parseLineStringText_();\r\n              break;\r\n            }\r\n            case 'POLYGON': {\r\n              coordinates = this.parsePolygonText_();\r\n              break;\r\n            }\r\n            case 'MULTIPOINT': {\r\n              coordinates = this.parseMultiPointText_();\r\n              break;\r\n            }\r\n            case 'MULTILINESTRING': {\r\n              coordinates = this.parseMultiLineStringText_();\r\n              break;\r\n            }\r\n            case 'MULTIPOLYGON': {\r\n              coordinates = this.parseMultiPolygonText_();\r\n              break;\r\n            }\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n\r\n        return new ctor(coordinates, this.layout_);\r\n      }\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n}\r\n\r\n/**\r\n * @classdesc\r\n * Geometry format for reading and writing data in the `WellKnownText` (WKT)\r\n * format.\r\n *\r\n * @api\r\n */\r\nclass WKT extends TextFeature {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * Split GeometryCollection into multiple features.\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.splitCollection_ =\r\n      options.splitCollection !== undefined ? options.splitCollection : false;\r\n  }\r\n\r\n  /**\r\n   * Parse a WKT string.\r\n   * @param {string} wkt WKT string.\r\n   * @return {import(\"../geom/Geometry.js\").default}\r\n   *     The geometry created.\r\n   * @private\r\n   */\r\n  parse_(wkt) {\r\n    const lexer = new Lexer(wkt);\r\n    const parser = new Parser(lexer);\r\n    return parser.parse();\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../Feature.js\").default} Feature.\r\n   */\r\n  readFeatureFromText(text, options) {\r\n    const geom = this.readGeometryFromText(text, options);\r\n    const feature = new Feature();\r\n    feature.setGeometry(geom);\r\n    return feature;\r\n  }\r\n\r\n  /**\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<Feature>} Features.\r\n   */\r\n  readFeaturesFromText(text, options) {\r\n    let geometries = [];\r\n    const geometry = this.readGeometryFromText(text, options);\r\n    if (this.splitCollection_ && geometry.getType() == 'GeometryCollection') {\r\n      geometries = /** @type {GeometryCollection} */ (\r\n        geometry\r\n      ).getGeometriesArray();\r\n    } else {\r\n      geometries = [geometry];\r\n    }\r\n    const features = [];\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      const feature = new Feature();\r\n      feature.setGeometry(geometries[i]);\r\n      features.push(feature);\r\n    }\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * @param {string} text Text.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometryFromText(text, options) {\r\n    const geometry = this.parse_(text);\r\n    return transformGeometryWithOptions(geometry, false, options);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../Feature.js\").default} feature Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   */\r\n  writeFeatureText(feature, options) {\r\n    const geometry = feature.getGeometry();\r\n    if (geometry) {\r\n      return this.writeGeometryText(geometry, options);\r\n    }\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   */\r\n  writeFeaturesText(features, options) {\r\n    if (features.length == 1) {\r\n      return this.writeFeatureText(features[0], options);\r\n    }\r\n    const geometries = [];\r\n    for (let i = 0, ii = features.length; i < ii; ++i) {\r\n      geometries.push(features[i].getGeometry());\r\n    }\r\n    const collection = new GeometryCollection(geometries);\r\n    return this.writeGeometryText(collection, options);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @protected\r\n   * @return {string} Text.\r\n   */\r\n  writeGeometryText(geometry, options) {\r\n    return encode(transformGeometryWithOptions(geometry, true, options));\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Point} geom Point geometry.\r\n * @return {string} Coordinates part of Point as WKT.\r\n */\r\nfunction encodePointGeometry(geom) {\r\n  const coordinates = geom.getCoordinates();\r\n  if (coordinates.length === 0) {\r\n    return '';\r\n  }\r\n  return coordinates.join(' ');\r\n}\r\n\r\n/**\r\n * @param {MultiPoint} geom MultiPoint geometry.\r\n * @return {string} Coordinates part of MultiPoint as WKT.\r\n */\r\nfunction encodeMultiPointGeometry(geom) {\r\n  const array = [];\r\n  const components = geom.getPoints();\r\n  for (let i = 0, ii = components.length; i < ii; ++i) {\r\n    array.push('(' + encodePointGeometry(components[i]) + ')');\r\n  }\r\n  return array.join(',');\r\n}\r\n\r\n/**\r\n * @param {GeometryCollection} geom GeometryCollection geometry.\r\n * @return {string} Coordinates part of GeometryCollection as WKT.\r\n */\r\nfunction encodeGeometryCollectionGeometry(geom) {\r\n  const array = [];\r\n  const geoms = geom.getGeometries();\r\n  for (let i = 0, ii = geoms.length; i < ii; ++i) {\r\n    array.push(encode(geoms[i]));\r\n  }\r\n  return array.join(',');\r\n}\r\n\r\n/**\r\n * @param {LineString|import(\"../geom/LinearRing.js\").default} geom LineString geometry.\r\n * @return {string} Coordinates part of LineString as WKT.\r\n */\r\nfunction encodeLineStringGeometry(geom) {\r\n  const coordinates = geom.getCoordinates();\r\n  const array = [];\r\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n    array.push(coordinates[i].join(' '));\r\n  }\r\n  return array.join(',');\r\n}\r\n\r\n/**\r\n * @param {MultiLineString} geom MultiLineString geometry.\r\n * @return {string} Coordinates part of MultiLineString as WKT.\r\n */\r\nfunction encodeMultiLineStringGeometry(geom) {\r\n  const array = [];\r\n  const components = geom.getLineStrings();\r\n  for (let i = 0, ii = components.length; i < ii; ++i) {\r\n    array.push('(' + encodeLineStringGeometry(components[i]) + ')');\r\n  }\r\n  return array.join(',');\r\n}\r\n\r\n/**\r\n * @param {Polygon} geom Polygon geometry.\r\n * @return {string} Coordinates part of Polygon as WKT.\r\n */\r\nfunction encodePolygonGeometry(geom) {\r\n  const array = [];\r\n  const rings = geom.getLinearRings();\r\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\r\n    array.push('(' + encodeLineStringGeometry(rings[i]) + ')');\r\n  }\r\n  return array.join(',');\r\n}\r\n\r\n/**\r\n * @param {MultiPolygon} geom MultiPolygon geometry.\r\n * @return {string} Coordinates part of MultiPolygon as WKT.\r\n */\r\nfunction encodeMultiPolygonGeometry(geom) {\r\n  const array = [];\r\n  const components = geom.getPolygons();\r\n  for (let i = 0, ii = components.length; i < ii; ++i) {\r\n    array.push('(' + encodePolygonGeometry(components[i]) + ')');\r\n  }\r\n  return array.join(',');\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/SimpleGeometry.js\").default} geom SimpleGeometry geometry.\r\n * @return {string} Potential dimensional information for WKT type.\r\n */\r\nfunction encodeGeometryLayout(geom) {\r\n  const layout = geom.getLayout();\r\n  let dimInfo = '';\r\n  if (layout === 'XYZ' || layout === 'XYZM') {\r\n    dimInfo += Z;\r\n  }\r\n  if (layout === 'XYM' || layout === 'XYZM') {\r\n    dimInfo += M;\r\n  }\r\n  return dimInfo;\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, function(import(\"../geom/Geometry.js\").default): string>}\r\n */\r\nconst GeometryEncoder = {\r\n  'Point': encodePointGeometry,\r\n  'LineString': encodeLineStringGeometry,\r\n  'Polygon': encodePolygonGeometry,\r\n  'MultiPoint': encodeMultiPointGeometry,\r\n  'MultiLineString': encodeMultiLineStringGeometry,\r\n  'MultiPolygon': encodeMultiPolygonGeometry,\r\n  'GeometryCollection': encodeGeometryCollectionGeometry,\r\n};\r\n\r\n/**\r\n * Encode a geometry as WKT.\r\n * @param {import(\"../geom/Geometry.js\").default} geom The geometry to encode.\r\n * @return {string} WKT string for the geometry.\r\n */\r\nfunction encode(geom) {\r\n  const type = geom.getType();\r\n  const geometryEncoder = GeometryEncoder[type];\r\n  const enc = geometryEncoder(geom);\r\n  let wktType = wktTypeLookup[type];\r\n  if (typeof (/** @type {?} */ (geom).getFlatCoordinates) === 'function') {\r\n    const dimInfo = encodeGeometryLayout(\r\n      /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (geom)\r\n    );\r\n    if (dimInfo.length > 0) {\r\n      wktType += ' ' + dimInfo;\r\n    }\r\n  }\r\n  if (enc.length === 0) {\r\n    return wktType + ' ' + EMPTY;\r\n  }\r\n  return wktType + '(' + enc + ')';\r\n}\r\n\r\nexport default WKT;\r\n", "/**\r\n * @module ol/format/WMSCapabilities\r\n */\r\nimport XML from './XML.js';\r\nimport {\r\n  makeArrayPusher,\r\n  makeObjectPropertyPusher,\r\n  makeObjectPropertySetter,\r\n  makeStructureNS,\r\n  pushParseAndPop,\r\n} from '../xml.js';\r\nimport {\r\n  readBooleanString,\r\n  readDecimal,\r\n  readDecimalString,\r\n  readNonNegativeIntegerString,\r\n  readPositiveInteger,\r\n  readString,\r\n} from './xsd.js';\r\nimport {readHref} from './xlink.js';\r\n\r\n/**\r\n * @const\r\n * @type {Array<null|string>}\r\n */\r\nconst NAMESPACE_URIS = [null, 'http://www.opengis.net/wms'];\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Service': makeObjectPropertySetter(readService),\r\n  'Capability': makeObjectPropertySetter(readCapability),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst CAPABILITY_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Request': makeObjectPropertySetter(readRequest),\r\n  'Exception': makeObjectPropertySetter(readException),\r\n  'Layer': makeObjectPropertySetter(readCapabilityLayer),\r\n});\r\n\r\n/**\r\n * @classdesc\r\n * Format for reading WMS capabilities data\r\n *\r\n * @api\r\n */\r\nclass WMSCapabilities extends XML {\r\n  constructor() {\r\n    super();\r\n\r\n    /**\r\n     * @type {string|undefined}\r\n     */\r\n    this.version = undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @return {Object} Object\r\n   */\r\n  readFromNode(node) {\r\n    this.version = node.getAttribute('version').trim();\r\n    const wmsCapabilityObject = pushParseAndPop(\r\n      {\r\n        'version': this.version,\r\n      },\r\n      PARSERS,\r\n      node,\r\n      []\r\n    );\r\n    return wmsCapabilityObject ? wmsCapabilityObject : null;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst SERVICE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Name': makeObjectPropertySetter(readString),\r\n  'Title': makeObjectPropertySetter(readString),\r\n  'Abstract': makeObjectPropertySetter(readString),\r\n  'KeywordList': makeObjectPropertySetter(readKeywordList),\r\n  'OnlineResource': makeObjectPropertySetter(readHref),\r\n  'ContactInformation': makeObjectPropertySetter(readContactInformation),\r\n  'Fees': makeObjectPropertySetter(readString),\r\n  'AccessConstraints': makeObjectPropertySetter(readString),\r\n  'LayerLimit': makeObjectPropertySetter(readPositiveInteger),\r\n  'MaxWidth': makeObjectPropertySetter(readPositiveInteger),\r\n  'MaxHeight': makeObjectPropertySetter(readPositiveInteger),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst CONTACT_INFORMATION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'ContactPersonPrimary': makeObjectPropertySetter(readContactPersonPrimary),\r\n  'ContactPosition': makeObjectPropertySetter(readString),\r\n  'ContactAddress': makeObjectPropertySetter(readContactAddress),\r\n  'ContactVoiceTelephone': makeObjectPropertySetter(readString),\r\n  'ContactFacsimileTelephone': makeObjectPropertySetter(readString),\r\n  'ContactElectronicMailAddress': makeObjectPropertySetter(readString),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst CONTACT_PERSON_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'ContactPerson': makeObjectPropertySetter(readString),\r\n  'ContactOrganization': makeObjectPropertySetter(readString),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst CONTACT_ADDRESS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'AddressType': makeObjectPropertySetter(readString),\r\n  'Address': makeObjectPropertySetter(readString),\r\n  'City': makeObjectPropertySetter(readString),\r\n  'StateOrProvince': makeObjectPropertySetter(readString),\r\n  'PostCode': makeObjectPropertySetter(readString),\r\n  'Country': makeObjectPropertySetter(readString),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst EXCEPTION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Format': makeArrayPusher(readString),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst LAYER_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Name': makeObjectPropertySetter(readString),\r\n  'Title': makeObjectPropertySetter(readString),\r\n  'Abstract': makeObjectPropertySetter(readString),\r\n  'KeywordList': makeObjectPropertySetter(readKeywordList),\r\n  'CRS': makeObjectPropertyPusher(readString),\r\n  'EX_GeographicBoundingBox': makeObjectPropertySetter(\r\n    readEXGeographicBoundingBox\r\n  ),\r\n  'BoundingBox': makeObjectPropertyPusher(readBoundingBox),\r\n  'Dimension': makeObjectPropertyPusher(readDimension),\r\n  'Attribution': makeObjectPropertySetter(readAttribution),\r\n  'AuthorityURL': makeObjectPropertyPusher(readAuthorityURL),\r\n  'Identifier': makeObjectPropertyPusher(readString),\r\n  'MetadataURL': makeObjectPropertyPusher(readMetadataURL),\r\n  'DataURL': makeObjectPropertyPusher(readFormatOnlineresource),\r\n  'FeatureListURL': makeObjectPropertyPusher(readFormatOnlineresource),\r\n  'Style': makeObjectPropertyPusher(readStyle),\r\n  'MinScaleDenominator': makeObjectPropertySetter(readDecimal),\r\n  'MaxScaleDenominator': makeObjectPropertySetter(readDecimal),\r\n  'Layer': makeObjectPropertyPusher(readLayer),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst ATTRIBUTION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Title': makeObjectPropertySetter(readString),\r\n  'OnlineResource': makeObjectPropertySetter(readHref),\r\n  'LogoURL': makeObjectPropertySetter(readSizedFormatOnlineresource),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst EX_GEOGRAPHIC_BOUNDING_BOX_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'westBoundLongitude': makeObjectPropertySetter(readDecimal),\r\n  'eastBoundLongitude': makeObjectPropertySetter(readDecimal),\r\n  'southBoundLatitude': makeObjectPropertySetter(readDecimal),\r\n  'northBoundLatitude': makeObjectPropertySetter(readDecimal),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst REQUEST_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'GetCapabilities': makeObjectPropertySetter(readOperationType),\r\n  'GetMap': makeObjectPropertySetter(readOperationType),\r\n  'GetFeatureInfo': makeObjectPropertySetter(readOperationType),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst OPERATIONTYPE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Format': makeObjectPropertyPusher(readString),\r\n  'DCPType': makeObjectPropertyPusher(readDCPType),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst DCPTYPE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'HTTP': makeObjectPropertySetter(readHTTP),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst HTTP_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Get': makeObjectPropertySetter(readFormatOnlineresource),\r\n  'Post': makeObjectPropertySetter(readFormatOnlineresource),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Name': makeObjectPropertySetter(readString),\r\n  'Title': makeObjectPropertySetter(readString),\r\n  'Abstract': makeObjectPropertySetter(readString),\r\n  'LegendURL': makeObjectPropertyPusher(readSizedFormatOnlineresource),\r\n  'StyleSheetURL': makeObjectPropertySetter(readFormatOnlineresource),\r\n  'StyleURL': makeObjectPropertySetter(readFormatOnlineresource),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst FORMAT_ONLINERESOURCE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Format': makeObjectPropertySetter(readString),\r\n  'OnlineResource': makeObjectPropertySetter(readHref),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst KEYWORDLIST_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Keyword': makeArrayPusher(readString),\r\n});\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Attribution object.\r\n */\r\nfunction readAttribution(node, objectStack) {\r\n  return pushParseAndPop({}, ATTRIBUTION_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object} Bounding box object.\r\n */\r\nfunction readBoundingBox(node, objectStack) {\r\n  const extent = [\r\n    readDecimalString(node.getAttribute('minx')),\r\n    readDecimalString(node.getAttribute('miny')),\r\n    readDecimalString(node.getAttribute('maxx')),\r\n    readDecimalString(node.getAttribute('maxy')),\r\n  ];\r\n\r\n  const resolutions = [\r\n    readDecimalString(node.getAttribute('resx')),\r\n    readDecimalString(node.getAttribute('resy')),\r\n  ];\r\n\r\n  return {\r\n    'crs': node.getAttribute('CRS'),\r\n    'extent': extent,\r\n    'res': resolutions,\r\n  };\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {import(\"../extent.js\").Extent|undefined} Bounding box object.\r\n */\r\nfunction readEXGeographicBoundingBox(node, objectStack) {\r\n  const geographicBoundingBox = pushParseAndPop(\r\n    {},\r\n    EX_GEOGRAPHIC_BOUNDING_BOX_PARSERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (!geographicBoundingBox) {\r\n    return undefined;\r\n  }\r\n  const westBoundLongitude =\r\n    /** @type {number|undefined} */\r\n    (geographicBoundingBox['westBoundLongitude']);\r\n  const southBoundLatitude =\r\n    /** @type {number|undefined} */\r\n    (geographicBoundingBox['southBoundLatitude']);\r\n  const eastBoundLongitude =\r\n    /** @type {number|undefined} */\r\n    (geographicBoundingBox['eastBoundLongitude']);\r\n  const northBoundLatitude =\r\n    /** @type {number|undefined} */\r\n    (geographicBoundingBox['northBoundLatitude']);\r\n  if (\r\n    westBoundLongitude === undefined ||\r\n    southBoundLatitude === undefined ||\r\n    eastBoundLongitude === undefined ||\r\n    northBoundLatitude === undefined\r\n  ) {\r\n    return undefined;\r\n  }\r\n  return [\r\n    westBoundLongitude,\r\n    southBoundLatitude,\r\n    eastBoundLongitude,\r\n    northBoundLatitude,\r\n  ];\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Capability object.\r\n */\r\nfunction readCapability(node, objectStack) {\r\n  return pushParseAndPop({}, CAPABILITY_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Service object.\r\n */\r\nfunction readService(node, objectStack) {\r\n  return pushParseAndPop({}, SERVICE_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Contact information object.\r\n */\r\nfunction readContactInformation(node, objectStack) {\r\n  return pushParseAndPop({}, CONTACT_INFORMATION_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Contact person object.\r\n */\r\nfunction readContactPersonPrimary(node, objectStack) {\r\n  return pushParseAndPop({}, CONTACT_PERSON_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Contact address object.\r\n */\r\nfunction readContactAddress(node, objectStack) {\r\n  return pushParseAndPop({}, CONTACT_ADDRESS_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Array<string>|undefined} Format array.\r\n */\r\nfunction readException(node, objectStack) {\r\n  return pushParseAndPop([], EXCEPTION_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Layer object.\r\n */\r\nfunction readCapabilityLayer(node, objectStack) {\r\n  const layerObject = pushParseAndPop({}, LAYER_PARSERS, node, objectStack);\r\n\r\n  if (layerObject['Layer'] === undefined) {\r\n    return Object.assign(layerObject, readLayer(node, objectStack));\r\n  }\r\n\r\n  return layerObject;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Layer object.\r\n */\r\nfunction readLayer(node, objectStack) {\r\n  const parentLayerObject = /**  @type {!Object<string,*>} */ (\r\n    objectStack[objectStack.length - 1]\r\n  );\r\n\r\n  const layerObject = pushParseAndPop({}, LAYER_PARSERS, node, objectStack);\r\n\r\n  if (!layerObject) {\r\n    return undefined;\r\n  }\r\n  let queryable = readBooleanString(node.getAttribute('queryable'));\r\n  if (queryable === undefined) {\r\n    queryable = parentLayerObject['queryable'];\r\n  }\r\n  layerObject['queryable'] = queryable !== undefined ? queryable : false;\r\n\r\n  let cascaded = readNonNegativeIntegerString(node.getAttribute('cascaded'));\r\n  if (cascaded === undefined) {\r\n    cascaded = parentLayerObject['cascaded'];\r\n  }\r\n  layerObject['cascaded'] = cascaded;\r\n\r\n  let opaque = readBooleanString(node.getAttribute('opaque'));\r\n  if (opaque === undefined) {\r\n    opaque = parentLayerObject['opaque'];\r\n  }\r\n  layerObject['opaque'] = opaque !== undefined ? opaque : false;\r\n\r\n  let noSubsets = readBooleanString(node.getAttribute('noSubsets'));\r\n  if (noSubsets === undefined) {\r\n    noSubsets = parentLayerObject['noSubsets'];\r\n  }\r\n  layerObject['noSubsets'] = noSubsets !== undefined ? noSubsets : false;\r\n\r\n  let fixedWidth = readDecimalString(node.getAttribute('fixedWidth'));\r\n  if (!fixedWidth) {\r\n    fixedWidth = parentLayerObject['fixedWidth'];\r\n  }\r\n  layerObject['fixedWidth'] = fixedWidth;\r\n\r\n  let fixedHeight = readDecimalString(node.getAttribute('fixedHeight'));\r\n  if (!fixedHeight) {\r\n    fixedHeight = parentLayerObject['fixedHeight'];\r\n  }\r\n  layerObject['fixedHeight'] = fixedHeight;\r\n\r\n  // See 7.2.4.8\r\n  const addKeys = ['Style', 'CRS', 'AuthorityURL'];\r\n  addKeys.forEach(function (key) {\r\n    if (key in parentLayerObject) {\r\n      const childValue = layerObject[key] || [];\r\n      layerObject[key] = childValue.concat(parentLayerObject[key]);\r\n    }\r\n  });\r\n\r\n  const replaceKeys = [\r\n    'EX_GeographicBoundingBox',\r\n    'BoundingBox',\r\n    'Dimension',\r\n    'Attribution',\r\n    'MinScaleDenominator',\r\n    'MaxScaleDenominator',\r\n  ];\r\n  replaceKeys.forEach(function (key) {\r\n    if (!(key in layerObject)) {\r\n      const parentValue = parentLayerObject[key];\r\n      layerObject[key] = parentValue;\r\n    }\r\n  });\r\n\r\n  return layerObject;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object} Dimension object.\r\n */\r\nfunction readDimension(node, objectStack) {\r\n  const dimensionObject = {\r\n    'name': node.getAttribute('name'),\r\n    'units': node.getAttribute('units'),\r\n    'unitSymbol': node.getAttribute('unitSymbol'),\r\n    'default': node.getAttribute('default'),\r\n    'multipleValues': readBooleanString(node.getAttribute('multipleValues')),\r\n    'nearestValue': readBooleanString(node.getAttribute('nearestValue')),\r\n    'current': readBooleanString(node.getAttribute('current')),\r\n    'values': readString(node),\r\n  };\r\n  return dimensionObject;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Online resource object.\r\n */\r\nfunction readFormatOnlineresource(node, objectStack) {\r\n  return pushParseAndPop({}, FORMAT_ONLINERESOURCE_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Request object.\r\n */\r\nfunction readRequest(node, objectStack) {\r\n  return pushParseAndPop({}, REQUEST_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} DCP type object.\r\n */\r\nfunction readDCPType(node, objectStack) {\r\n  return pushParseAndPop({}, DCPTYPE_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} HTTP object.\r\n */\r\nfunction readHTTP(node, objectStack) {\r\n  return pushParseAndPop({}, HTTP_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Operation type object.\r\n */\r\nfunction readOperationType(node, objectStack) {\r\n  return pushParseAndPop({}, OPERATIONTYPE_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Online resource object.\r\n */\r\nfunction readSizedFormatOnlineresource(node, objectStack) {\r\n  const formatOnlineresource = readFormatOnlineresource(node, objectStack);\r\n  if (formatOnlineresource) {\r\n    const size = [\r\n      readNonNegativeIntegerString(node.getAttribute('width')),\r\n      readNonNegativeIntegerString(node.getAttribute('height')),\r\n    ];\r\n    formatOnlineresource['size'] = size;\r\n    return formatOnlineresource;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Authority URL object.\r\n */\r\nfunction readAuthorityURL(node, objectStack) {\r\n  const authorityObject = readFormatOnlineresource(node, objectStack);\r\n  if (authorityObject) {\r\n    authorityObject['name'] = node.getAttribute('name');\r\n    return authorityObject;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Metadata URL object.\r\n */\r\nfunction readMetadataURL(node, objectStack) {\r\n  const metadataObject = readFormatOnlineresource(node, objectStack);\r\n  if (metadataObject) {\r\n    metadataObject['type'] = node.getAttribute('type');\r\n    return metadataObject;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Style object.\r\n */\r\nfunction readStyle(node, objectStack) {\r\n  return pushParseAndPop({}, STYLE_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Array<string>|undefined} Keyword list.\r\n */\r\nfunction readKeywordList(node, objectStack) {\r\n  return pushParseAndPop([], KEYWORDLIST_PARSERS, node, objectStack);\r\n}\r\n\r\nexport default WMSCapabilities;\r\n", "/**\r\n * @module ol/format/WMSGetFeatureInfo\r\n */\r\nimport GML2 from './GML2.js';\r\nimport XMLFeature from './XMLFeature.js';\r\nimport {extend} from '../array.js';\r\nimport {makeArrayPusher, makeStructureNS, pushParseAndPop} from '../xml.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Array<string>} [layers] If set, only features of the given layers will be returned by the format when read.\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst featureIdentifier = '_feature';\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst layerIdentifier = '_layer';\r\n\r\n/**\r\n * @classdesc\r\n * Format for reading WMSGetFeatureInfo format. It uses\r\n * {@link module:ol/format/GML2~GML2} to read features.\r\n *\r\n * @api\r\n */\r\nclass WMSGetFeatureInfo extends XMLFeature {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.featureNS_ = 'http://mapserver.gis.umn.edu/mapserver';\r\n\r\n    /**\r\n     * @private\r\n     * @type {GML2}\r\n     */\r\n    this.gmlFormat_ = new GML2();\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<string>|null}\r\n     */\r\n    this.layers_ = options.layers ? options.layers : null;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<string>|null} layers\r\n   */\r\n  getLayers() {\r\n    return this.layers_;\r\n  }\r\n\r\n  /**\r\n   * @param {Array<string>|null} layers Layers to parse.\r\n   */\r\n  setLayers(layers) {\r\n    this.layers_ = layers;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @param {Array<*>} objectStack Object stack.\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   * @private\r\n   */\r\n  readFeatures_(node, objectStack) {\r\n    node.setAttribute('namespaceURI', this.featureNS_);\r\n    const localName = node.localName;\r\n    /** @type {Array<import(\"../Feature.js\").default>} */\r\n    let features = [];\r\n    if (node.childNodes.length === 0) {\r\n      return features;\r\n    }\r\n    if (localName == 'msGMLOutput') {\r\n      for (let i = 0, ii = node.childNodes.length; i < ii; i++) {\r\n        const layer = node.childNodes[i];\r\n        if (layer.nodeType !== Node.ELEMENT_NODE) {\r\n          continue;\r\n        }\r\n\r\n        const layerElement = /** @type {Element} */ (layer);\r\n        const context = objectStack[0];\r\n\r\n        const toRemove = layerIdentifier;\r\n        const layerName = layerElement.localName.replace(toRemove, '');\r\n\r\n        if (this.layers_ && !this.layers_.includes(layerName)) {\r\n          continue;\r\n        }\r\n\r\n        const featureType = layerName + featureIdentifier;\r\n\r\n        context['featureType'] = featureType;\r\n        context['featureNS'] = this.featureNS_;\r\n\r\n        /** @type {Object<string, import(\"../xml.js\").Parser>} */\r\n        const parsers = {};\r\n        parsers[featureType] = makeArrayPusher(\r\n          this.gmlFormat_.readFeatureElement,\r\n          this.gmlFormat_\r\n        );\r\n        const parsersNS = makeStructureNS(\r\n          [context['featureNS'], null],\r\n          parsers\r\n        );\r\n        layerElement.setAttribute('namespaceURI', this.featureNS_);\r\n        const layerFeatures = pushParseAndPop(\r\n          [],\r\n          // @ts-ignore\r\n          parsersNS,\r\n          layerElement,\r\n          objectStack,\r\n          this.gmlFormat_\r\n        );\r\n        if (layerFeatures) {\r\n          extend(features, layerFeatures);\r\n        }\r\n      }\r\n    }\r\n    if (localName == 'FeatureCollection') {\r\n      const gmlFeatures = pushParseAndPop(\r\n        [],\r\n        this.gmlFormat_.FEATURE_COLLECTION_PARSERS,\r\n        node,\r\n        [{}],\r\n        this.gmlFormat_\r\n      );\r\n      if (gmlFeatures) {\r\n        features = gmlFeatures;\r\n      }\r\n    }\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {Element} node Node.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\r\n   * @return {Array<import(\"../Feature.js\").default>} Features.\r\n   */\r\n  readFeaturesFromNode(node, options) {\r\n    const internalOptions = {};\r\n    if (options) {\r\n      Object.assign(internalOptions, this.getReadOptions(node, options));\r\n    }\r\n    return this.readFeatures_(node, [internalOptions]);\r\n  }\r\n}\r\n\r\nexport default WMSGetFeatureInfo;\r\n", "/**\r\n * @module ol/format/WMTSCapabilities\r\n */\r\nimport OWS from './OWS.js';\r\nimport XML from './XML.js';\r\nimport {boundingExtent} from '../extent.js';\r\nimport {\r\n  makeArrayPusher,\r\n  makeObjectPropertyPusher,\r\n  makeObjectPropertySetter,\r\n  makeStructureNS,\r\n  pushParseAndPop,\r\n} from '../xml.js';\r\nimport {readDecimal, readPositiveInteger, readString} from './xsd.js';\r\nimport {readHref} from './xlink.js';\r\n\r\n/**\r\n * @const\r\n * @type {Array<null|string>}\r\n */\r\nconst NAMESPACE_URIS = [null, 'http://www.opengis.net/wmts/1.0'];\r\n\r\n/**\r\n * @const\r\n * @type {Array<null|string>}\r\n */\r\nconst OWS_NAMESPACE_URIS = [null, 'http://www.opengis.net/ows/1.1'];\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Contents': makeObjectPropertySetter(readContents),\r\n});\r\n\r\n/**\r\n * @classdesc\r\n * Format for reading WMTS capabilities data.\r\n *\r\n * @api\r\n */\r\nclass WMTSCapabilities extends XML {\r\n  constructor() {\r\n    super();\r\n\r\n    /**\r\n     * @type {OWS}\r\n     * @private\r\n     */\r\n    this.owsParser_ = new OWS();\r\n  }\r\n\r\n  /**\r\n   * @param {Element} node Node.\r\n   * @return {Object} Object\r\n   */\r\n  readFromNode(node) {\r\n    let version = node.getAttribute('version');\r\n    if (version) {\r\n      version = version.trim();\r\n    }\r\n    let WMTSCapabilityObject = this.owsParser_.readFromNode(node);\r\n    if (!WMTSCapabilityObject) {\r\n      return null;\r\n    }\r\n    WMTSCapabilityObject['version'] = version;\r\n    WMTSCapabilityObject = pushParseAndPop(\r\n      WMTSCapabilityObject,\r\n      PARSERS,\r\n      node,\r\n      []\r\n    );\r\n    return WMTSCapabilityObject ? WMTSCapabilityObject : null;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst CONTENTS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'Layer': makeObjectPropertyPusher(readLayer),\r\n  'TileMatrixSet': makeObjectPropertyPusher(readTileMatrixSet),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst LAYER_PARSERS = makeStructureNS(\r\n  NAMESPACE_URIS,\r\n  {\r\n    'Style': makeObjectPropertyPusher(readStyle),\r\n    'Format': makeObjectPropertyPusher(readString),\r\n    'TileMatrixSetLink': makeObjectPropertyPusher(readTileMatrixSetLink),\r\n    'Dimension': makeObjectPropertyPusher(readDimensions),\r\n    'ResourceURL': makeObjectPropertyPusher(readResourceUrl),\r\n  },\r\n  makeStructureNS(OWS_NAMESPACE_URIS, {\r\n    'Title': makeObjectPropertySetter(readString),\r\n    'Abstract': makeObjectPropertySetter(readString),\r\n    'WGS84BoundingBox': makeObjectPropertySetter(readBoundingBox),\r\n    'Identifier': makeObjectPropertySetter(readString),\r\n  })\r\n);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst STYLE_PARSERS = makeStructureNS(\r\n  NAMESPACE_URIS,\r\n  {\r\n    'LegendURL': makeObjectPropertyPusher(readLegendUrl),\r\n  },\r\n  makeStructureNS(OWS_NAMESPACE_URIS, {\r\n    'Title': makeObjectPropertySetter(readString),\r\n    'Identifier': makeObjectPropertySetter(readString),\r\n  })\r\n);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst TMS_LINKS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'TileMatrixSet': makeObjectPropertySetter(readString),\r\n  'TileMatrixSetLimits': makeObjectPropertySetter(readTileMatrixLimitsList),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst TMS_LIMITS_LIST_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'TileMatrixLimits': makeArrayPusher(readTileMatrixLimits),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst TMS_LIMITS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\r\n  'TileMatrix': makeObjectPropertySetter(readString),\r\n  'MinTileRow': makeObjectPropertySetter(readPositiveInteger),\r\n  'MaxTileRow': makeObjectPropertySetter(readPositiveInteger),\r\n  'MinTileCol': makeObjectPropertySetter(readPositiveInteger),\r\n  'MaxTileCol': makeObjectPropertySetter(readPositiveInteger),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst DIMENSION_PARSERS = makeStructureNS(\r\n  NAMESPACE_URIS,\r\n  {\r\n    'Default': makeObjectPropertySetter(readString),\r\n    'Value': makeObjectPropertyPusher(readString),\r\n  },\r\n  makeStructureNS(OWS_NAMESPACE_URIS, {\r\n    'Identifier': makeObjectPropertySetter(readString),\r\n  })\r\n);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst WGS84_BBOX_READERS = makeStructureNS(OWS_NAMESPACE_URIS, {\r\n  'LowerCorner': makeArrayPusher(readCoordinates),\r\n  'UpperCorner': makeArrayPusher(readCoordinates),\r\n});\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst TMS_PARSERS = makeStructureNS(\r\n  NAMESPACE_URIS,\r\n  {\r\n    'WellKnownScaleSet': makeObjectPropertySetter(readString),\r\n    'TileMatrix': makeObjectPropertyPusher(readTileMatrix),\r\n  },\r\n  makeStructureNS(OWS_NAMESPACE_URIS, {\r\n    'SupportedCRS': makeObjectPropertySetter(readString),\r\n    'Identifier': makeObjectPropertySetter(readString),\r\n    'BoundingBox': makeObjectPropertySetter(readBoundingBox),\r\n  })\r\n);\r\n\r\n/**\r\n * @const\r\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n */\r\n// @ts-ignore\r\nconst TM_PARSERS = makeStructureNS(\r\n  NAMESPACE_URIS,\r\n  {\r\n    'TopLeftCorner': makeObjectPropertySetter(readCoordinates),\r\n    'ScaleDenominator': makeObjectPropertySetter(readDecimal),\r\n    'TileWidth': makeObjectPropertySetter(readPositiveInteger),\r\n    'TileHeight': makeObjectPropertySetter(readPositiveInteger),\r\n    'MatrixWidth': makeObjectPropertySetter(readPositiveInteger),\r\n    'MatrixHeight': makeObjectPropertySetter(readPositiveInteger),\r\n  },\r\n  makeStructureNS(OWS_NAMESPACE_URIS, {\r\n    'Identifier': makeObjectPropertySetter(readString),\r\n  })\r\n);\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Attribution object.\r\n */\r\nfunction readContents(node, objectStack) {\r\n  return pushParseAndPop({}, CONTENTS_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Layers object.\r\n */\r\nfunction readLayer(node, objectStack) {\r\n  return pushParseAndPop({}, LAYER_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Tile Matrix Set object.\r\n */\r\nfunction readTileMatrixSet(node, objectStack) {\r\n  return pushParseAndPop({}, TMS_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Style object.\r\n */\r\nfunction readStyle(node, objectStack) {\r\n  const style = pushParseAndPop({}, STYLE_PARSERS, node, objectStack);\r\n  if (!style) {\r\n    return undefined;\r\n  }\r\n  const isDefault = node.getAttribute('isDefault') === 'true';\r\n  style['isDefault'] = isDefault;\r\n  return style;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Tile Matrix Set Link object.\r\n */\r\nfunction readTileMatrixSetLink(node, objectStack) {\r\n  return pushParseAndPop({}, TMS_LINKS_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Dimension object.\r\n */\r\nfunction readDimensions(node, objectStack) {\r\n  return pushParseAndPop({}, DIMENSION_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Resource URL object.\r\n */\r\nfunction readResourceUrl(node, objectStack) {\r\n  const format = node.getAttribute('format');\r\n  const template = node.getAttribute('template');\r\n  const resourceType = node.getAttribute('resourceType');\r\n  const resource = {};\r\n  if (format) {\r\n    resource['format'] = format;\r\n  }\r\n  if (template) {\r\n    resource['template'] = template;\r\n  }\r\n  if (resourceType) {\r\n    resource['resourceType'] = resourceType;\r\n  }\r\n  return resource;\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} BBox object.\r\n */\r\nfunction readBoundingBox(node, objectStack) {\r\n  const coordinates = pushParseAndPop(\r\n    [],\r\n    WGS84_BBOX_READERS,\r\n    node,\r\n    objectStack\r\n  );\r\n  if (coordinates.length != 2) {\r\n    return undefined;\r\n  }\r\n  return boundingExtent(coordinates);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Legend object.\r\n */\r\nfunction readLegendUrl(node, objectStack) {\r\n  const legend = {};\r\n  legend['format'] = node.getAttribute('format');\r\n  legend['href'] = readHref(node);\r\n  return legend;\r\n}\r\n\r\n/**\r\n * @param {Node} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} Coordinates object.\r\n */\r\nfunction readCoordinates(node, objectStack) {\r\n  const coordinates = readString(node).split(/\\s+/);\r\n  if (!coordinates || coordinates.length != 2) {\r\n    return undefined;\r\n  }\r\n  const x = +coordinates[0];\r\n  const y = +coordinates[1];\r\n  if (isNaN(x) || isNaN(y)) {\r\n    return undefined;\r\n  }\r\n  return [x, y];\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} TileMatrix object.\r\n */\r\nfunction readTileMatrix(node, objectStack) {\r\n  return pushParseAndPop({}, TM_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} TileMatrixSetLimits Object.\r\n */\r\nfunction readTileMatrixLimitsList(node, objectStack) {\r\n  return pushParseAndPop([], TMS_LIMITS_LIST_PARSERS, node, objectStack);\r\n}\r\n\r\n/**\r\n * @param {Element} node Node.\r\n * @param {Array<*>} objectStack Object stack.\r\n * @return {Object|undefined} TileMatrixLimits Array.\r\n */\r\nfunction readTileMatrixLimits(node, objectStack) {\r\n  return pushParseAndPop({}, TMS_LIMITS_PARSERS, node, objectStack);\r\n}\r\n\r\nexport default WMTSCapabilities;\r\n"],
  "mappings": "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",
  "names": ["Feature_default", "schemaLocation", "MULTIGEOMETRY_TO_MEMBER_NODENAME", "nodeName", "Feature_default", "NAMESPACE_URIS", "SCHEMA_LOCATION", "LINK_PARSERS", "NAMESPACE_URIS", "SCHEMA_LOCATION", "geometry", "imageState", "imageSize", "type", "LINK_PARSERS", "GEOMETRY_TYPE_TO_NODENAME", "NAMESPACE_URIS", "GEOMETRY_READERS", "readPointGeometry", "readLineStringGeometry", "readPolygonGeometry", "readMultiPointGeometry", "readMultiLineStringGeometry", "readMultiPolygonGeometry", "Feature_default", "geometry", "isEmpty", "NAMESPACE_URIS", "PARSERS", "readStyle", "HTTP_PARSERS", "STYLE_PARSERS", "NAMESPACE_URIS", "PARSERS", "readLayer", "LAYER_PARSERS", "readStyle", "readBoundingBox", "STYLE_PARSERS"]
}
