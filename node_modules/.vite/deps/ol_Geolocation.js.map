{
  "version": 3,
  "sources": ["../../ol/Geolocation.js", "dep:ol_Geolocation"],
  "sourcesContent": ["/**\r\n * @module ol/Geolocation\r\n */\r\nimport BaseEvent from './events/Event.js';\r\nimport BaseObject from './Object.js';\r\nimport EventType from './events/EventType.js';\r\nimport {circular as circularPolygon} from './geom/Polygon.js';\r\nimport {\r\n  get as getProjection,\r\n  getTransformFromProjections,\r\n  identityTransform,\r\n} from './proj.js';\r\nimport {toRadians} from './math.js';\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nconst Property = {\r\n  ACCURACY: 'accuracy',\r\n  ACCURACY_GEOMETRY: 'accuracyGeometry',\r\n  ALTITUDE: 'altitude',\r\n  ALTITUDE_ACCURACY: 'altitudeAccuracy',\r\n  HEADING: 'heading',\r\n  POSITION: 'position',\r\n  PROJECTION: 'projection',\r\n  SPEED: 'speed',\r\n  TRACKING: 'tracking',\r\n  TRACKING_OPTIONS: 'trackingOptions',\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted on Geolocation error.\r\n */\r\nclass GeolocationError extends BaseEvent {\r\n  /**\r\n   * @param {GeolocationPositionError} error error object.\r\n   */\r\n  constructor(error) {\r\n    super(EventType.ERROR);\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.code = error.code;\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    this.message = error.message;\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {boolean} [tracking=false] Start Tracking right after\r\n * instantiation.\r\n * @property {PositionOptions} [trackingOptions] Tracking options.\r\n * See https://www.w3.org/TR/geolocation-API/#position_options_interface.\r\n * @property {import(\"./proj.js\").ProjectionLike} [projection] The projection the position\r\n * is reported in.\r\n */\r\n\r\n/**\r\n * @typedef {import(\"./ObjectEventType\").Types|'change:accuracy'|'change:accuracyGeometry'|'change:altitude'|\r\n *    'change:altitudeAccuracy'|'change:heading'|'change:position'|'change:projection'|'change:speed'|'change:tracking'|\r\n *    'change:trackingOptions'} GeolocationObjectEventTypes\r\n */\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *   import(\"./Observable\").OnSignature<GeolocationObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\r\n *   import(\"./Observable\").OnSignature<'error', GeolocationError, Return> &\r\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|GeolocationObjectEventTypes|\r\n *     'error', Return>} GeolocationOnSignature\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Helper class for providing HTML5 Geolocation capabilities.\r\n * The [Geolocation API](https://www.w3.org/TR/geolocation-API/)\r\n * is used to locate a user's position.\r\n *\r\n * To get notified of position changes, register a listener for the generic\r\n * `change` event on your instance of {@link module:ol/Geolocation~Geolocation}.\r\n *\r\n * Example:\r\n *\r\n *     const geolocation = new Geolocation({\r\n *       // take the projection to use from the map's view\r\n *       projection: view.getProjection()\r\n *     });\r\n *     // listen to changes in position\r\n *     geolocation.on('change', function(evt) {\r\n *       window.console.log(geolocation.getPosition());\r\n *     });\r\n *\r\n * @fires module:ol/events/Event~BaseEvent#event:error\r\n * @api\r\n */\r\nclass Geolocation extends BaseObject {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    /***\r\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {GeolocationOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    options = options || {};\r\n\r\n    /**\r\n     * The unprojected (EPSG:4326) device position.\r\n     * @private\r\n     * @type {?import(\"./coordinate.js\").Coordinate}\r\n     */\r\n    this.position_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./proj.js\").TransformFunction}\r\n     */\r\n    this.transform_ = identityTransform;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.watchId_ = undefined;\r\n\r\n    this.addChangeListener(Property.PROJECTION, this.handleProjectionChanged_);\r\n    this.addChangeListener(Property.TRACKING, this.handleTrackingChanged_);\r\n\r\n    if (options.projection !== undefined) {\r\n      this.setProjection(options.projection);\r\n    }\r\n    if (options.trackingOptions !== undefined) {\r\n      this.setTrackingOptions(options.trackingOptions);\r\n    }\r\n\r\n    this.setTracking(options.tracking !== undefined ? options.tracking : false);\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   */\r\n  disposeInternal() {\r\n    this.setTracking(false);\r\n    super.disposeInternal();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleProjectionChanged_() {\r\n    const projection = this.getProjection();\r\n    if (projection) {\r\n      this.transform_ = getTransformFromProjections(\r\n        getProjection('EPSG:4326'),\r\n        projection\r\n      );\r\n      if (this.position_) {\r\n        this.set(Property.POSITION, this.transform_(this.position_));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleTrackingChanged_() {\r\n    if ('geolocation' in navigator) {\r\n      const tracking = this.getTracking();\r\n      if (tracking && this.watchId_ === undefined) {\r\n        this.watchId_ = navigator.geolocation.watchPosition(\r\n          this.positionChange_.bind(this),\r\n          this.positionError_.bind(this),\r\n          this.getTrackingOptions()\r\n        );\r\n      } else if (!tracking && this.watchId_ !== undefined) {\r\n        navigator.geolocation.clearWatch(this.watchId_);\r\n        this.watchId_ = undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {GeolocationPosition} position position event.\r\n   */\r\n  positionChange_(position) {\r\n    const coords = position.coords;\r\n    this.set(Property.ACCURACY, coords.accuracy);\r\n    this.set(\r\n      Property.ALTITUDE,\r\n      coords.altitude === null ? undefined : coords.altitude\r\n    );\r\n    this.set(\r\n      Property.ALTITUDE_ACCURACY,\r\n      coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy\r\n    );\r\n    this.set(\r\n      Property.HEADING,\r\n      coords.heading === null ? undefined : toRadians(coords.heading)\r\n    );\r\n    if (!this.position_) {\r\n      this.position_ = [coords.longitude, coords.latitude];\r\n    } else {\r\n      this.position_[0] = coords.longitude;\r\n      this.position_[1] = coords.latitude;\r\n    }\r\n    const projectedPosition = this.transform_(this.position_);\r\n    this.set(Property.POSITION, projectedPosition);\r\n    this.set(Property.SPEED, coords.speed === null ? undefined : coords.speed);\r\n    const geometry = circularPolygon(this.position_, coords.accuracy);\r\n    geometry.applyTransform(this.transform_);\r\n    this.set(Property.ACCURACY_GEOMETRY, geometry);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {GeolocationPositionError} error error object.\r\n   */\r\n  positionError_(error) {\r\n    this.dispatchEvent(new GeolocationError(error));\r\n  }\r\n\r\n  /**\r\n   * Get the accuracy of the position in meters.\r\n   * @return {number|undefined} The accuracy of the position measurement in\r\n   *     meters.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getAccuracy() {\r\n    return /** @type {number|undefined} */ (this.get(Property.ACCURACY));\r\n  }\r\n\r\n  /**\r\n   * Get a geometry of the position accuracy.\r\n   * @return {?import(\"./geom/Polygon.js\").default} A geometry of the position accuracy.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getAccuracyGeometry() {\r\n    return /** @type {?import(\"./geom/Polygon.js\").default} */ (\r\n      this.get(Property.ACCURACY_GEOMETRY) || null\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the altitude associated with the position.\r\n   * @return {number|undefined} The altitude of the position in meters above mean\r\n   *     sea level.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getAltitude() {\r\n    return /** @type {number|undefined} */ (this.get(Property.ALTITUDE));\r\n  }\r\n\r\n  /**\r\n   * Get the altitude accuracy of the position.\r\n   * @return {number|undefined} The accuracy of the altitude measurement in\r\n   *     meters.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getAltitudeAccuracy() {\r\n    return /** @type {number|undefined} */ (\r\n      this.get(Property.ALTITUDE_ACCURACY)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the heading as radians clockwise from North.\r\n   * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`\r\n   * is set to `true` in the tracking options.\r\n   * @return {number|undefined} The heading of the device in radians from north.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getHeading() {\r\n    return /** @type {number|undefined} */ (this.get(Property.HEADING));\r\n  }\r\n\r\n  /**\r\n   * Get the position of the device.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The current position of the device reported\r\n   *     in the current projection.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getPosition() {\r\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\r\n      this.get(Property.POSITION)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the projection associated with the position.\r\n   * @return {import(\"./proj/Projection.js\").default|undefined} The projection the position is\r\n   *     reported in.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getProjection() {\r\n    return /** @type {import(\"./proj/Projection.js\").default|undefined} */ (\r\n      this.get(Property.PROJECTION)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the speed in meters per second.\r\n   * @return {number|undefined} The instantaneous speed of the device in meters\r\n   *     per second.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getSpeed() {\r\n    return /** @type {number|undefined} */ (this.get(Property.SPEED));\r\n  }\r\n\r\n  /**\r\n   * Determine if the device location is being tracked.\r\n   * @return {boolean} The device location is being tracked.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getTracking() {\r\n    return /** @type {boolean} */ (this.get(Property.TRACKING));\r\n  }\r\n\r\n  /**\r\n   * Get the tracking options.\r\n   * See https://www.w3.org/TR/geolocation-API/#position-options.\r\n   * @return {PositionOptions|undefined} PositionOptions as defined by\r\n   *     the [HTML5 Geolocation spec\r\n   *     ](https://www.w3.org/TR/geolocation-API/#position_options_interface).\r\n   * @observable\r\n   * @api\r\n   */\r\n  getTrackingOptions() {\r\n    return /** @type {PositionOptions|undefined} */ (\r\n      this.get(Property.TRACKING_OPTIONS)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set the projection to use for transforming the coordinates.\r\n   * @param {import(\"./proj.js\").ProjectionLike} projection The projection the position is\r\n   *     reported in.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setProjection(projection) {\r\n    this.set(Property.PROJECTION, getProjection(projection));\r\n  }\r\n\r\n  /**\r\n   * Enable or disable tracking.\r\n   * @param {boolean} tracking Enable tracking.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setTracking(tracking) {\r\n    this.set(Property.TRACKING, tracking);\r\n  }\r\n\r\n  /**\r\n   * Set the tracking options.\r\n   * See http://www.w3.org/TR/geolocation-API/#position-options.\r\n   * @param {PositionOptions} options PositionOptions as defined by the\r\n   *     [HTML5 Geolocation spec\r\n   *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\r\n   * @observable\r\n   * @api\r\n   */\r\n  setTrackingOptions(options) {\r\n    this.set(Property.TRACKING_OPTIONS, options);\r\n  }\r\n}\r\n\r\nexport default Geolocation;\r\n", "import d from \"./node_modules/ol/Geolocation.js\";export default d;"],
  "mappings": "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",
  "names": []
}
