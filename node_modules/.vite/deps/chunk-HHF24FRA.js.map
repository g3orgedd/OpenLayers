{
  "version": 3,
  "sources": ["../../ol/source/BingMaps.js"],
  "sourcesContent": ["/**\r\n * @module ol/source/BingMaps\r\n */\r\n\r\nimport TileImage from './TileImage.js';\r\nimport {applyTransform, intersects} from '../extent.js';\r\nimport {createFromTileUrlFunctions} from '../tileurlfunction.js';\r\nimport {createOrUpdate} from '../tilecoord.js';\r\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\r\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\r\nimport {jsonp as requestJSONP} from '../net.js';\r\n\r\n/**\r\n * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coord.\r\n * @return {string} Quad key.\r\n */\r\nexport function quadKey(tileCoord) {\r\n  const z = tileCoord[0];\r\n  const digits = new Array(z);\r\n  let mask = 1 << (z - 1);\r\n  let i, charCode;\r\n  for (i = 0; i < z; ++i) {\r\n    // 48 is charCode for 0 - '0'.charCodeAt(0)\r\n    charCode = 48;\r\n    if (tileCoord[1] & mask) {\r\n      charCode += 1;\r\n    }\r\n    if (tileCoord[2] & mask) {\r\n      charCode += 2;\r\n    }\r\n    digits[i] = String.fromCharCode(charCode);\r\n    mask >>= 1;\r\n  }\r\n  return digits.join('');\r\n}\r\n\r\n/**\r\n * The attribution containing a link to the Microsoft\u00AE Bing\u2122 Maps Platform APIs\u2019\r\n * Terms Of Use.\r\n * @const\r\n * @type {string}\r\n */\r\nconst TOS_ATTRIBUTION =\r\n  '<a class=\"ol-attribution-bing-tos\" ' +\r\n  'href=\"https://www.microsoft.com/maps/product/terms.html\" target=\"_blank\">' +\r\n  'Terms of Use</a>';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\r\n * @property {boolean} [hidpi=false] If `true` hidpi tiles will be requested.\r\n * @property {string} [culture='en-us'] Culture code.\r\n * @property {string} key Bing Maps API key. Get yours at https://www.bingmapsportal.com/.\r\n * @property {string} imagerySet Type of imagery.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {number} [maxZoom=21] Max zoom. Default is what's advertized by the BingMaps service.\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * @property {number} [transition] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */\r\n\r\n/**\r\n * @typedef {Object} BingMapsImageryMetadataResponse\r\n * @property {number} statusCode The response status code\r\n * @property {string} statusDescription The response status description\r\n * @property {string} authenticationResultCode The authentication result code\r\n * @property {Array<ResourceSet>} resourceSets The array of resource sets\r\n */\r\n\r\n/**\r\n * @typedef {Object} ResourceSet\r\n * @property {Array<Resource>} resources Resources.\r\n */\r\n\r\n/**\r\n * @typedef {Object} Resource\r\n * @property {number} imageHeight The image height\r\n * @property {number} imageWidth The image width\r\n * @property {number} zoomMin The minimum zoom level\r\n * @property {number} zoomMax The maximum zoom level\r\n * @property {string} imageUrl The image URL\r\n * @property {Array<string>} imageUrlSubdomains The image URL subdomains for rotation\r\n * @property {Array<ImageryProvider>} [imageryProviders] The array of ImageryProviders\r\n */\r\n\r\n/**\r\n * @typedef {Object} ImageryProvider\r\n * @property {Array<CoverageArea>} coverageAreas The coverage areas\r\n * @property {string} [attribution] The attribution\r\n */\r\n\r\n/**\r\n * @typedef {Object} CoverageArea\r\n * @property {number} zoomMin The minimum zoom\r\n * @property {number} zoomMax The maximum zoom\r\n * @property {Array<number>} bbox The coverage bounding box\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Layer source for Bing Maps tile data.\r\n * @api\r\n */\r\nclass BingMaps extends TileImage {\r\n  /**\r\n   * @param {Options} options Bing Maps options.\r\n   */\r\n  constructor(options) {\r\n    const hidpi = options.hidpi !== undefined ? options.hidpi : false;\r\n\r\n    super({\r\n      cacheSize: options.cacheSize,\r\n      crossOrigin: 'anonymous',\r\n      interpolate: options.interpolate,\r\n      opaque: true,\r\n      projection: getProjection('EPSG:3857'),\r\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\r\n      state: 'loading',\r\n      tileLoadFunction: options.tileLoadFunction,\r\n      tilePixelRatio: hidpi ? 2 : 1,\r\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\r\n      transition: options.transition,\r\n      zDirection: options.zDirection,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.hidpi_ = hidpi;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.culture_ = options.culture !== undefined ? options.culture : 'en-us';\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxZoom_ = options.maxZoom !== undefined ? options.maxZoom : -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.apiKey_ = options.key;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.imagerySet_ = options.imagerySet;\r\n\r\n    const url =\r\n      'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/' +\r\n      this.imagerySet_ +\r\n      '?uriScheme=https&include=ImageryProviders&key=' +\r\n      this.apiKey_ +\r\n      '&c=' +\r\n      this.culture_;\r\n\r\n    requestJSONP(\r\n      url,\r\n      this.handleImageryMetadataResponse.bind(this),\r\n      undefined,\r\n      'jsonp'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the api key used for this source.\r\n   *\r\n   * @return {string} The api key.\r\n   * @api\r\n   */\r\n  getApiKey() {\r\n    return this.apiKey_;\r\n  }\r\n\r\n  /**\r\n   * Get the imagery set associated with this source.\r\n   *\r\n   * @return {string} The imagery set.\r\n   * @api\r\n   */\r\n  getImagerySet() {\r\n    return this.imagerySet_;\r\n  }\r\n\r\n  /**\r\n   * @param {BingMapsImageryMetadataResponse} response Response.\r\n   */\r\n  handleImageryMetadataResponse(response) {\r\n    if (\r\n      response.statusCode != 200 ||\r\n      response.statusDescription != 'OK' ||\r\n      response.authenticationResultCode != 'ValidCredentials' ||\r\n      response.resourceSets.length != 1 ||\r\n      response.resourceSets[0].resources.length != 1\r\n    ) {\r\n      this.setState('error');\r\n      return;\r\n    }\r\n\r\n    const resource = response.resourceSets[0].resources[0];\r\n    const maxZoom = this.maxZoom_ == -1 ? resource.zoomMax : this.maxZoom_;\r\n\r\n    const sourceProjection = this.getProjection();\r\n    const extent = extentFromProjection(sourceProjection);\r\n    const scale = this.hidpi_ ? 2 : 1;\r\n    const tileSize =\r\n      resource.imageWidth == resource.imageHeight\r\n        ? resource.imageWidth / scale\r\n        : [resource.imageWidth / scale, resource.imageHeight / scale];\r\n\r\n    const tileGrid = createXYZ({\r\n      extent: extent,\r\n      minZoom: resource.zoomMin,\r\n      maxZoom: maxZoom,\r\n      tileSize: tileSize,\r\n    });\r\n    this.tileGrid = tileGrid;\r\n\r\n    const culture = this.culture_;\r\n    const hidpi = this.hidpi_;\r\n    this.tileUrlFunction = createFromTileUrlFunctions(\r\n      resource.imageUrlSubdomains.map(function (subdomain) {\r\n        /** @type {import('../tilecoord.js').TileCoord} */\r\n        const quadKeyTileCoord = [0, 0, 0];\r\n        const imageUrl = resource.imageUrl\r\n          .replace('{subdomain}', subdomain)\r\n          .replace('{culture}', culture);\r\n        return (\r\n          /**\r\n           * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n           * @param {number} pixelRatio Pixel ratio.\r\n           * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n           * @return {string|undefined} Tile URL.\r\n           */\r\n          function (tileCoord, pixelRatio, projection) {\r\n            if (!tileCoord) {\r\n              return undefined;\r\n            } else {\r\n              createOrUpdate(\r\n                tileCoord[0],\r\n                tileCoord[1],\r\n                tileCoord[2],\r\n                quadKeyTileCoord\r\n              );\r\n              let url = imageUrl;\r\n              if (hidpi) {\r\n                url += '&dpi=d1&device=mobile';\r\n              }\r\n              return url.replace('{quadkey}', quadKey(quadKeyTileCoord));\r\n            }\r\n          }\r\n        );\r\n      })\r\n    );\r\n\r\n    if (resource.imageryProviders) {\r\n      const transform = getTransformFromProjections(\r\n        getProjection('EPSG:4326'),\r\n        this.getProjection()\r\n      );\r\n\r\n      this.setAttributions(\r\n        function (frameState) {\r\n          const attributions = [];\r\n          const viewState = frameState.viewState;\r\n          const tileGrid = this.getTileGrid();\r\n          const z = tileGrid.getZForResolution(\r\n            viewState.resolution,\r\n            this.zDirection\r\n          );\r\n          const tileCoord = tileGrid.getTileCoordForCoordAndZ(\r\n            viewState.center,\r\n            z\r\n          );\r\n          const zoom = tileCoord[0];\r\n          resource.imageryProviders.map(function (imageryProvider) {\r\n            let intersecting = false;\r\n            const coverageAreas = imageryProvider.coverageAreas;\r\n            for (let i = 0, ii = coverageAreas.length; i < ii; ++i) {\r\n              const coverageArea = coverageAreas[i];\r\n              if (\r\n                zoom >= coverageArea.zoomMin &&\r\n                zoom <= coverageArea.zoomMax\r\n              ) {\r\n                const bbox = coverageArea.bbox;\r\n                const epsg4326Extent = [bbox[1], bbox[0], bbox[3], bbox[2]];\r\n                const extent = applyTransform(epsg4326Extent, transform);\r\n                if (intersects(extent, frameState.extent)) {\r\n                  intersecting = true;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n            if (intersecting) {\r\n              attributions.push(imageryProvider.attribution);\r\n            }\r\n          });\r\n\r\n          attributions.push(TOS_ATTRIBUTION);\r\n          return attributions;\r\n        }.bind(this)\r\n      );\r\n    }\r\n\r\n    this.setState('ready');\r\n  }\r\n}\r\n\r\nexport default BingMaps;\r\n"],
  "mappings": "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",
  "names": ["tileGrid", "extent"]
}
