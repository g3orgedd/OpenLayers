{
  "version": 3,
  "sources": ["../../ol/transform.js", "../../ol/geom/flat/transform.js", "../../ol/geom/Geometry.js", "../../ol/geom/SimpleGeometry.js", "../../ol/geom/flat/deflate.js", "../../ol/geom/Point.js"],
  "sourcesContent": ["/**\r\n * @module ol/transform\r\n */\r\nimport {WORKER_OFFSCREEN_CANVAS} from './has.js';\r\nimport {assert} from './asserts.js';\r\n\r\n/**\r\n * An array representing an affine 2d transformation for use with\r\n * {@link module:ol/transform} functions. The array has 6 elements.\r\n * @typedef {!Array<number>} Transform\r\n * @api\r\n */\r\n\r\n/**\r\n * Collection of affine 2d transformation functions. The functions work on an\r\n * array of 6 elements. The element order is compatible with the [SVGMatrix\r\n * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is\r\n * a subset (elements a to f) of a 3\u00D73 matrix:\r\n * ```\r\n * [ a c e ]\r\n * [ b d f ]\r\n * [ 0 0 1 ]\r\n * ```\r\n */\r\n\r\n/**\r\n * @private\r\n * @type {Transform}\r\n */\r\nconst tmp_ = new Array(6);\r\n\r\n/**\r\n * Create an identity transform.\r\n * @return {!Transform} Identity transform.\r\n */\r\nexport function create() {\r\n  return [1, 0, 0, 1, 0, 0];\r\n}\r\n\r\n/**\r\n * Resets the given transform to an identity transform.\r\n * @param {!Transform} transform Transform.\r\n * @return {!Transform} Transform.\r\n */\r\nexport function reset(transform) {\r\n  return set(transform, 1, 0, 0, 1, 0, 0);\r\n}\r\n\r\n/**\r\n * Multiply the underlying matrices of two transforms and return the result in\r\n * the first transform.\r\n * @param {!Transform} transform1 Transform parameters of matrix 1.\r\n * @param {!Transform} transform2 Transform parameters of matrix 2.\r\n * @return {!Transform} transform1 multiplied with transform2.\r\n */\r\nexport function multiply(transform1, transform2) {\r\n  const a1 = transform1[0];\r\n  const b1 = transform1[1];\r\n  const c1 = transform1[2];\r\n  const d1 = transform1[3];\r\n  const e1 = transform1[4];\r\n  const f1 = transform1[5];\r\n  const a2 = transform2[0];\r\n  const b2 = transform2[1];\r\n  const c2 = transform2[2];\r\n  const d2 = transform2[3];\r\n  const e2 = transform2[4];\r\n  const f2 = transform2[5];\r\n\r\n  transform1[0] = a1 * a2 + c1 * b2;\r\n  transform1[1] = b1 * a2 + d1 * b2;\r\n  transform1[2] = a1 * c2 + c1 * d2;\r\n  transform1[3] = b1 * c2 + d1 * d2;\r\n  transform1[4] = a1 * e2 + c1 * f2 + e1;\r\n  transform1[5] = b1 * e2 + d1 * f2 + f1;\r\n\r\n  return transform1;\r\n}\r\n\r\n/**\r\n * Set the transform components a-f on a given transform.\r\n * @param {!Transform} transform Transform.\r\n * @param {number} a The a component of the transform.\r\n * @param {number} b The b component of the transform.\r\n * @param {number} c The c component of the transform.\r\n * @param {number} d The d component of the transform.\r\n * @param {number} e The e component of the transform.\r\n * @param {number} f The f component of the transform.\r\n * @return {!Transform} Matrix with transform applied.\r\n */\r\nexport function set(transform, a, b, c, d, e, f) {\r\n  transform[0] = a;\r\n  transform[1] = b;\r\n  transform[2] = c;\r\n  transform[3] = d;\r\n  transform[4] = e;\r\n  transform[5] = f;\r\n  return transform;\r\n}\r\n\r\n/**\r\n * Set transform on one matrix from another matrix.\r\n * @param {!Transform} transform1 Matrix to set transform to.\r\n * @param {!Transform} transform2 Matrix to set transform from.\r\n * @return {!Transform} transform1 with transform from transform2 applied.\r\n */\r\nexport function setFromArray(transform1, transform2) {\r\n  transform1[0] = transform2[0];\r\n  transform1[1] = transform2[1];\r\n  transform1[2] = transform2[2];\r\n  transform1[3] = transform2[3];\r\n  transform1[4] = transform2[4];\r\n  transform1[5] = transform2[5];\r\n  return transform1;\r\n}\r\n\r\n/**\r\n * Transforms the given coordinate with the given transform returning the\r\n * resulting, transformed coordinate. The coordinate will be modified in-place.\r\n *\r\n * @param {Transform} transform The transformation.\r\n * @param {import(\"./coordinate.js\").Coordinate|import(\"./pixel.js\").Pixel} coordinate The coordinate to transform.\r\n * @return {import(\"./coordinate.js\").Coordinate|import(\"./pixel.js\").Pixel} return coordinate so that operations can be\r\n *     chained together.\r\n */\r\nexport function apply(transform, coordinate) {\r\n  const x = coordinate[0];\r\n  const y = coordinate[1];\r\n  coordinate[0] = transform[0] * x + transform[2] * y + transform[4];\r\n  coordinate[1] = transform[1] * x + transform[3] * y + transform[5];\r\n  return coordinate;\r\n}\r\n\r\n/**\r\n * Applies rotation to the given transform.\r\n * @param {!Transform} transform Transform.\r\n * @param {number} angle Angle in radians.\r\n * @return {!Transform} The rotated transform.\r\n */\r\nexport function rotate(transform, angle) {\r\n  const cos = Math.cos(angle);\r\n  const sin = Math.sin(angle);\r\n  return multiply(transform, set(tmp_, cos, sin, -sin, cos, 0, 0));\r\n}\r\n\r\n/**\r\n * Applies scale to a given transform.\r\n * @param {!Transform} transform Transform.\r\n * @param {number} x Scale factor x.\r\n * @param {number} y Scale factor y.\r\n * @return {!Transform} The scaled transform.\r\n */\r\nexport function scale(transform, x, y) {\r\n  return multiply(transform, set(tmp_, x, 0, 0, y, 0, 0));\r\n}\r\n\r\n/**\r\n * Creates a scale transform.\r\n * @param {!Transform} target Transform to overwrite.\r\n * @param {number} x Scale factor x.\r\n * @param {number} y Scale factor y.\r\n * @return {!Transform} The scale transform.\r\n */\r\nexport function makeScale(target, x, y) {\r\n  return set(target, x, 0, 0, y, 0, 0);\r\n}\r\n\r\n/**\r\n * Applies translation to the given transform.\r\n * @param {!Transform} transform Transform.\r\n * @param {number} dx Translation x.\r\n * @param {number} dy Translation y.\r\n * @return {!Transform} The translated transform.\r\n */\r\nexport function translate(transform, dx, dy) {\r\n  return multiply(transform, set(tmp_, 1, 0, 0, 1, dx, dy));\r\n}\r\n\r\n/**\r\n * Creates a composite transform given an initial translation, scale, rotation, and\r\n * final translation (in that order only, not commutative).\r\n * @param {!Transform} transform The transform (will be modified in place).\r\n * @param {number} dx1 Initial translation x.\r\n * @param {number} dy1 Initial translation y.\r\n * @param {number} sx Scale factor x.\r\n * @param {number} sy Scale factor y.\r\n * @param {number} angle Rotation (in counter-clockwise radians).\r\n * @param {number} dx2 Final translation x.\r\n * @param {number} dy2 Final translation y.\r\n * @return {!Transform} The composite transform.\r\n */\r\nexport function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {\r\n  const sin = Math.sin(angle);\r\n  const cos = Math.cos(angle);\r\n  transform[0] = sx * cos;\r\n  transform[1] = sy * sin;\r\n  transform[2] = -sx * sin;\r\n  transform[3] = sy * cos;\r\n  transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;\r\n  transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;\r\n  return transform;\r\n}\r\n\r\n/**\r\n * Creates a composite transform given an initial translation, scale, rotation, and\r\n * final translation (in that order only, not commutative). The resulting transform\r\n * string can be applied as `transform` property of an HTMLElement's style.\r\n * @param {number} dx1 Initial translation x.\r\n * @param {number} dy1 Initial translation y.\r\n * @param {number} sx Scale factor x.\r\n * @param {number} sy Scale factor y.\r\n * @param {number} angle Rotation (in counter-clockwise radians).\r\n * @param {number} dx2 Final translation x.\r\n * @param {number} dy2 Final translation y.\r\n * @return {string} The composite css transform.\r\n * @api\r\n */\r\nexport function composeCssTransform(dx1, dy1, sx, sy, angle, dx2, dy2) {\r\n  return toString(compose(create(), dx1, dy1, sx, sy, angle, dx2, dy2));\r\n}\r\n\r\n/**\r\n * Invert the given transform.\r\n * @param {!Transform} source The source transform to invert.\r\n * @return {!Transform} The inverted (source) transform.\r\n */\r\nexport function invert(source) {\r\n  return makeInverse(source, source);\r\n}\r\n\r\n/**\r\n * Invert the given transform.\r\n * @param {!Transform} target Transform to be set as the inverse of\r\n *     the source transform.\r\n * @param {!Transform} source The source transform to invert.\r\n * @return {!Transform} The inverted (target) transform.\r\n */\r\nexport function makeInverse(target, source) {\r\n  const det = determinant(source);\r\n  assert(det !== 0, 32); // Transformation matrix cannot be inverted\r\n\r\n  const a = source[0];\r\n  const b = source[1];\r\n  const c = source[2];\r\n  const d = source[3];\r\n  const e = source[4];\r\n  const f = source[5];\r\n\r\n  target[0] = d / det;\r\n  target[1] = -b / det;\r\n  target[2] = -c / det;\r\n  target[3] = a / det;\r\n  target[4] = (c * f - d * e) / det;\r\n  target[5] = -(a * f - b * e) / det;\r\n\r\n  return target;\r\n}\r\n\r\n/**\r\n * Returns the determinant of the given matrix.\r\n * @param {!Transform} mat Matrix.\r\n * @return {number} Determinant.\r\n */\r\nexport function determinant(mat) {\r\n  return mat[0] * mat[3] - mat[1] * mat[2];\r\n}\r\n\r\n/**\r\n * @type {HTMLElement}\r\n * @private\r\n */\r\nlet transformStringDiv;\r\n\r\n/**\r\n * A rounded string version of the transform.  This can be used\r\n * for CSS transforms.\r\n * @param {!Transform} mat Matrix.\r\n * @return {string} The transform as a string.\r\n */\r\nexport function toString(mat) {\r\n  const transformString = 'matrix(' + mat.join(', ') + ')';\r\n  if (WORKER_OFFSCREEN_CANVAS) {\r\n    return transformString;\r\n  }\r\n  const node =\r\n    transformStringDiv || (transformStringDiv = document.createElement('div'));\r\n  node.style.transform = transformString;\r\n  return node.style.transform;\r\n}\r\n", "/**\r\n * @module ol/geom/flat/transform\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n * @param {Array<number>} [dest] Destination.\r\n * @return {Array<number>} Transformed coordinates.\r\n */\r\nexport function transform2D(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  transform,\r\n  dest\r\n) {\r\n  dest = dest ? dest : [];\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    const x = flatCoordinates[j];\r\n    const y = flatCoordinates[j + 1];\r\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\r\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\r\n  }\r\n  if (dest && dest.length != i) {\r\n    dest.length = i;\r\n  }\r\n  return dest;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} angle Angle.\r\n * @param {Array<number>} anchor Rotation anchor point.\r\n * @param {Array<number>} [dest] Destination.\r\n * @return {Array<number>} Transformed coordinates.\r\n */\r\nexport function rotate(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  angle,\r\n  anchor,\r\n  dest\r\n) {\r\n  dest = dest ? dest : [];\r\n  const cos = Math.cos(angle);\r\n  const sin = Math.sin(angle);\r\n  const anchorX = anchor[0];\r\n  const anchorY = anchor[1];\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    const deltaX = flatCoordinates[j] - anchorX;\r\n    const deltaY = flatCoordinates[j + 1] - anchorY;\r\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\r\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\r\n    for (let k = j + 2; k < j + stride; ++k) {\r\n      dest[i++] = flatCoordinates[k];\r\n    }\r\n  }\r\n  if (dest && dest.length != i) {\r\n    dest.length = i;\r\n  }\r\n  return dest;\r\n}\r\n\r\n/**\r\n * Scale the coordinates.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} sx Scale factor in the x-direction.\r\n * @param {number} sy Scale factor in the y-direction.\r\n * @param {Array<number>} anchor Scale anchor point.\r\n * @param {Array<number>} [dest] Destination.\r\n * @return {Array<number>} Transformed coordinates.\r\n */\r\nexport function scale(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  sx,\r\n  sy,\r\n  anchor,\r\n  dest\r\n) {\r\n  dest = dest ? dest : [];\r\n  const anchorX = anchor[0];\r\n  const anchorY = anchor[1];\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    const deltaX = flatCoordinates[j] - anchorX;\r\n    const deltaY = flatCoordinates[j + 1] - anchorY;\r\n    dest[i++] = anchorX + sx * deltaX;\r\n    dest[i++] = anchorY + sy * deltaY;\r\n    for (let k = j + 2; k < j + stride; ++k) {\r\n      dest[i++] = flatCoordinates[k];\r\n    }\r\n  }\r\n  if (dest && dest.length != i) {\r\n    dest.length = i;\r\n  }\r\n  return dest;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} deltaX Delta X.\r\n * @param {number} deltaY Delta Y.\r\n * @param {Array<number>} [dest] Destination.\r\n * @return {Array<number>} Transformed coordinates.\r\n */\r\nexport function translate(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  deltaX,\r\n  deltaY,\r\n  dest\r\n) {\r\n  dest = dest ? dest : [];\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    dest[i++] = flatCoordinates[j] + deltaX;\r\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\r\n    for (let k = j + 2; k < j + stride; ++k) {\r\n      dest[i++] = flatCoordinates[k];\r\n    }\r\n  }\r\n  if (dest && dest.length != i) {\r\n    dest.length = i;\r\n  }\r\n  return dest;\r\n}\r\n", "/**\r\n * @module ol/geom/Geometry\r\n */\r\nimport BaseObject from '../Object.js';\r\nimport {abstract} from '../util.js';\r\nimport {\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n} from '../transform.js';\r\nimport {\r\n  createEmpty,\r\n  createOrUpdateEmpty,\r\n  getHeight,\r\n  returnOrUpdate,\r\n} from '../extent.js';\r\nimport {get as getProjection, getTransform} from '../proj.js';\r\nimport {memoizeOne} from '../functions.js';\r\nimport {transform2D} from './flat/transform.js';\r\n\r\n/**\r\n * @typedef {'XY' | 'XYZ' | 'XYM' | 'XYZM'} GeometryLayout\r\n * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')\r\n * or measure ('M') coordinate is available.\r\n */\r\n\r\n/**\r\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type\r\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\r\n * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,\r\n * `'GeometryCollection'`, or `'Circle'`.\r\n */\r\n\r\n/**\r\n * @type {import(\"../transform.js\").Transform}\r\n */\r\nconst tmpTransform = createTransform();\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for vector geometries.\r\n *\r\n * To get notified of changes to the geometry, register a listener for the\r\n * generic `change` event on your geometry instance.\r\n *\r\n * @abstract\r\n * @api\r\n */\r\nclass Geometry extends BaseObject {\r\n  constructor() {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.extent_ = createEmpty();\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.extentRevision_ = -1;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.simplifiedGeometryMaxMinSquaredTolerance = 0;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.simplifiedGeometryRevision = 0;\r\n\r\n    /**\r\n     * Get a transformed and simplified version of the geometry.\r\n     * @abstract\r\n     * @param {number} revision The geometry revision.\r\n     * @param {number} squaredTolerance Squared tolerance.\r\n     * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\r\n     * @return {Geometry} Simplified geometry.\r\n     */\r\n    this.simplifyTransformedInternal = memoizeOne(function (\r\n      revision,\r\n      squaredTolerance,\r\n      transform\r\n    ) {\r\n      if (!transform) {\r\n        return this.getSimplifiedGeometry(squaredTolerance);\r\n      }\r\n      const clone = this.clone();\r\n      clone.applyTransform(transform);\r\n      return clone.getSimplifiedGeometry(squaredTolerance);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get a transformed and simplified version of the geometry.\r\n   * @abstract\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\r\n   * @return {Geometry} Simplified geometry.\r\n   */\r\n  simplifyTransformed(squaredTolerance, transform) {\r\n    return this.simplifyTransformedInternal(\r\n      this.getRevision(),\r\n      squaredTolerance,\r\n      transform\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @abstract\r\n   * @return {!Geometry} Clone.\r\n   */\r\n  clone() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @return {boolean} Contains (x, y).\r\n   */\r\n  containsXY(x, y) {\r\n    const coord = this.getClosestPoint([x, y]);\r\n    return coord[0] === x && coord[1] === y;\r\n  }\r\n\r\n  /**\r\n   * Return the closest point of the geometry to the passed point as\r\n   * {@link module:ol/coordinate~Coordinate coordinate}.\r\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\r\n   * @param {import(\"../coordinate.js\").Coordinate} [closestPoint] Closest point.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\r\n   * @api\r\n   */\r\n  getClosestPoint(point, closestPoint) {\r\n    closestPoint = closestPoint ? closestPoint : [NaN, NaN];\r\n    this.closestPointXY(point[0], point[1], closestPoint, Infinity);\r\n    return closestPoint;\r\n  }\r\n\r\n  /**\r\n   * Returns true if this geometry includes the specified coordinate. If the\r\n   * coordinate is on the boundary of the geometry, returns false.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @return {boolean} Contains coordinate.\r\n   * @api\r\n   */\r\n  intersectsCoordinate(coordinate) {\r\n    return this.containsXY(coordinate[0], coordinate[1]);\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   */\r\n  computeExtent(extent) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the extent of the geometry.\r\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   * @api\r\n   */\r\n  getExtent(extent) {\r\n    if (this.extentRevision_ != this.getRevision()) {\r\n      const extent = this.computeExtent(this.extent_);\r\n      if (isNaN(extent[0]) || isNaN(extent[1])) {\r\n        createOrUpdateEmpty(extent);\r\n      }\r\n      this.extentRevision_ = this.getRevision();\r\n    }\r\n    return returnOrUpdate(this.extent_, extent);\r\n  }\r\n\r\n  /**\r\n   * Rotate the geometry around a given coordinate. This modifies the geometry\r\n   * coordinates in place.\r\n   * @abstract\r\n   * @param {number} angle Rotation angle in radians.\r\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\r\n   * @api\r\n   */\r\n  rotate(angle, anchor) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Scale the geometry (with an optional origin).  This modifies the geometry\r\n   * coordinates in place.\r\n   * @abstract\r\n   * @param {number} sx The scaling factor in the x-direction.\r\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\r\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\r\n   *     of the geometry extent).\r\n   * @api\r\n   */\r\n  scale(sx, sy, anchor) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Create a simplified version of this geometry.  For linestrings, this uses\r\n   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\r\n   * algorithm.  For polygons, a quantization-based\r\n   * simplification is used to preserve topology.\r\n   * @param {number} tolerance The tolerance distance for simplification.\r\n   * @return {Geometry} A new, simplified version of the original geometry.\r\n   * @api\r\n   */\r\n  simplify(tolerance) {\r\n    return this.getSimplifiedGeometry(tolerance * tolerance);\r\n  }\r\n\r\n  /**\r\n   * Create a simplified version of this geometry using the Douglas Peucker\r\n   * algorithm.\r\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\r\n   * @abstract\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {Geometry} Simplified geometry.\r\n   */\r\n  getSimplifiedGeometry(squaredTolerance) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @abstract\r\n   * @return {Type} Geometry type.\r\n   */\r\n  getType() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Apply a transform function to the coordinates of the geometry.\r\n   * The geometry is modified in place.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   * @abstract\r\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\r\n   * Called with a flat array of geometry coordinates.\r\n   */\r\n  applyTransform(transformFn) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @abstract\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   */\r\n  intersectsExtent(extent) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\r\n   * instead you want a new geometry, first `clone()` this geometry.\r\n   * @abstract\r\n   * @param {number} deltaX Delta X.\r\n   * @param {number} deltaY Delta Y.\r\n   * @api\r\n   */\r\n  translate(deltaX, deltaY) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Transform each coordinate of the geometry from one coordinate reference\r\n   * system to another. The geometry is modified in place.\r\n   * For example, a line will be transformed to a line and a circle to a circle.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   *\r\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\r\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\r\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\r\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\r\n   * @return {Geometry} This geometry.  Note that original geometry is\r\n   *     modified in place.\r\n   * @api\r\n   */\r\n  transform(source, destination) {\r\n    /** @type {import(\"../proj/Projection.js\").default} */\r\n    const sourceProj = getProjection(source);\r\n    const transformFn =\r\n      sourceProj.getUnits() == 'tile-pixels'\r\n        ? function (inCoordinates, outCoordinates, stride) {\r\n            const pixelExtent = sourceProj.getExtent();\r\n            const projectedExtent = sourceProj.getWorldExtent();\r\n            const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\r\n            composeTransform(\r\n              tmpTransform,\r\n              projectedExtent[0],\r\n              projectedExtent[3],\r\n              scale,\r\n              -scale,\r\n              0,\r\n              0,\r\n              0\r\n            );\r\n            transform2D(\r\n              inCoordinates,\r\n              0,\r\n              inCoordinates.length,\r\n              stride,\r\n              tmpTransform,\r\n              outCoordinates\r\n            );\r\n            return getTransform(sourceProj, destination)(\r\n              inCoordinates,\r\n              outCoordinates,\r\n              stride\r\n            );\r\n          }\r\n        : getTransform(sourceProj, destination);\r\n    this.applyTransform(transformFn);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default Geometry;\r\n", "/**\r\n * @module ol/geom/SimpleGeometry\r\n */\r\nimport Geometry from './Geometry.js';\r\nimport {abstract} from '../util.js';\r\nimport {createOrUpdateFromFlatCoordinates, getCenter} from '../extent.js';\r\nimport {rotate, scale, transform2D, translate} from './flat/transform.js';\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; only used for creating subclasses; do not instantiate\r\n * in apps, as cannot be rendered.\r\n *\r\n * @abstract\r\n * @api\r\n */\r\nclass SimpleGeometry extends Geometry {\r\n  constructor() {\r\n    super();\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"./Geometry.js\").GeometryLayout}\r\n     */\r\n    this.layout = 'XY';\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.stride = 2;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<number>}\r\n     */\r\n    this.flatCoordinates = null;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   */\r\n  computeExtent(extent) {\r\n    return createOrUpdateFromFlatCoordinates(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      extent\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {Array<*> | null} Coordinates.\r\n   */\r\n  getCoordinates() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Return the first coordinate of the geometry.\r\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\r\n   * @api\r\n   */\r\n  getFirstCoordinate() {\r\n    return this.flatCoordinates.slice(0, this.stride);\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat coordinates.\r\n   */\r\n  getFlatCoordinates() {\r\n    return this.flatCoordinates;\r\n  }\r\n\r\n  /**\r\n   * Return the last coordinate of the geometry.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\r\n   * @api\r\n   */\r\n  getLastCoordinate() {\r\n    return this.flatCoordinates.slice(\r\n      this.flatCoordinates.length - this.stride\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the {@link import(\"./Geometry.js\").GeometryLayout layout} of the geometry.\r\n   * @return {import(\"./Geometry.js\").GeometryLayout} Layout.\r\n   * @api\r\n   */\r\n  getLayout() {\r\n    return this.layout;\r\n  }\r\n\r\n  /**\r\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {SimpleGeometry} Simplified geometry.\r\n   */\r\n  getSimplifiedGeometry(squaredTolerance) {\r\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\r\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\r\n      this.simplifiedGeometryRevision = this.getRevision();\r\n    }\r\n    // If squaredTolerance is negative or if we know that simplification will not\r\n    // have any effect then just return this.\r\n    if (\r\n      squaredTolerance < 0 ||\r\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\r\n        squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)\r\n    ) {\r\n      return this;\r\n    }\r\n\r\n    const simplifiedGeometry =\r\n      this.getSimplifiedGeometryInternal(squaredTolerance);\r\n    const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\r\n    if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\r\n      return simplifiedGeometry;\r\n    } else {\r\n      // Simplification did not actually remove any coordinates.  We now know\r\n      // that any calls to getSimplifiedGeometry with a squaredTolerance less\r\n      // than or equal to the current squaredTolerance will also not have any\r\n      // effect.  This allows us to short circuit simplification (saving CPU\r\n      // cycles) and prevents the cache of simplified geometries from filling\r\n      // up with useless identical copies of this geometry (saving memory).\r\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {SimpleGeometry} Simplified geometry.\r\n   * @protected\r\n   */\r\n  getSimplifiedGeometryInternal(squaredTolerance) {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Stride.\r\n   */\r\n  getStride() {\r\n    return this.stride;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   */\r\n  setFlatCoordinates(layout, flatCoordinates) {\r\n    this.stride = getStrideForLayout(layout);\r\n    this.layout = layout;\r\n    this.flatCoordinates = flatCoordinates;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {!Array<*>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */\r\n  setCoordinates(coordinates, layout) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./Geometry.js\").GeometryLayout|undefined} layout Layout.\r\n   * @param {Array<*>} coordinates Coordinates.\r\n   * @param {number} nesting Nesting.\r\n   * @protected\r\n   */\r\n  setLayout(layout, coordinates, nesting) {\r\n    /** @type {number} */\r\n    let stride;\r\n    if (layout) {\r\n      stride = getStrideForLayout(layout);\r\n    } else {\r\n      for (let i = 0; i < nesting; ++i) {\r\n        if (coordinates.length === 0) {\r\n          this.layout = 'XY';\r\n          this.stride = 2;\r\n          return;\r\n        } else {\r\n          coordinates = /** @type {Array} */ (coordinates[0]);\r\n        }\r\n      }\r\n      stride = coordinates.length;\r\n      layout = getLayoutForStride(stride);\r\n    }\r\n    this.layout = layout;\r\n    this.stride = stride;\r\n  }\r\n\r\n  /**\r\n   * Apply a transform function to the coordinates of the geometry.\r\n   * The geometry is modified in place.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\r\n   * Called with a flat array of geometry coordinates.\r\n   * @api\r\n   */\r\n  applyTransform(transformFn) {\r\n    if (this.flatCoordinates) {\r\n      transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rotate the geometry around a given coordinate. This modifies the geometry\r\n   * coordinates in place.\r\n   * @param {number} angle Rotation angle in counter-clockwise radians.\r\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\r\n   * @api\r\n   */\r\n  rotate(angle, anchor) {\r\n    const flatCoordinates = this.getFlatCoordinates();\r\n    if (flatCoordinates) {\r\n      const stride = this.getStride();\r\n      rotate(\r\n        flatCoordinates,\r\n        0,\r\n        flatCoordinates.length,\r\n        stride,\r\n        angle,\r\n        anchor,\r\n        flatCoordinates\r\n      );\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scale the geometry (with an optional origin).  This modifies the geometry\r\n   * coordinates in place.\r\n   * @param {number} sx The scaling factor in the x-direction.\r\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\r\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\r\n   *     of the geometry extent).\r\n   * @api\r\n   */\r\n  scale(sx, sy, anchor) {\r\n    if (sy === undefined) {\r\n      sy = sx;\r\n    }\r\n    if (!anchor) {\r\n      anchor = getCenter(this.getExtent());\r\n    }\r\n    const flatCoordinates = this.getFlatCoordinates();\r\n    if (flatCoordinates) {\r\n      const stride = this.getStride();\r\n      scale(\r\n        flatCoordinates,\r\n        0,\r\n        flatCoordinates.length,\r\n        stride,\r\n        sx,\r\n        sy,\r\n        anchor,\r\n        flatCoordinates\r\n      );\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\r\n   * instead you want a new geometry, first `clone()` this geometry.\r\n   * @param {number} deltaX Delta X.\r\n   * @param {number} deltaY Delta Y.\r\n   * @api\r\n   */\r\n  translate(deltaX, deltaY) {\r\n    const flatCoordinates = this.getFlatCoordinates();\r\n    if (flatCoordinates) {\r\n      const stride = this.getStride();\r\n      translate(\r\n        flatCoordinates,\r\n        0,\r\n        flatCoordinates.length,\r\n        stride,\r\n        deltaX,\r\n        deltaY,\r\n        flatCoordinates\r\n      );\r\n      this.changed();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {number} stride Stride.\r\n * @return {import(\"./Geometry.js\").GeometryLayout} layout Layout.\r\n */\r\nfunction getLayoutForStride(stride) {\r\n  let layout;\r\n  if (stride == 2) {\r\n    layout = 'XY';\r\n  } else if (stride == 3) {\r\n    layout = 'XYZ';\r\n  } else if (stride == 4) {\r\n    layout = 'XYZM';\r\n  }\r\n  return /** @type {import(\"./Geometry.js\").GeometryLayout} */ (layout);\r\n}\r\n\r\n/**\r\n * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\r\n * @return {number} Stride.\r\n */\r\nexport function getStrideForLayout(layout) {\r\n  let stride;\r\n  if (layout == 'XY') {\r\n    stride = 2;\r\n  } else if (layout == 'XYZ' || layout == 'XYM') {\r\n    stride = 3;\r\n  } else if (layout == 'XYZM') {\r\n    stride = 4;\r\n  }\r\n  return /** @type {number} */ (stride);\r\n}\r\n\r\n/**\r\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\r\n * @param {import(\"../transform.js\").Transform} transform Transform.\r\n * @param {Array<number>} [dest] Destination.\r\n * @return {Array<number>} Transformed flat coordinates.\r\n */\r\nexport function transformGeom2D(simpleGeometry, transform, dest) {\r\n  const flatCoordinates = simpleGeometry.getFlatCoordinates();\r\n  if (!flatCoordinates) {\r\n    return null;\r\n  } else {\r\n    const stride = simpleGeometry.getStride();\r\n    return transform2D(\r\n      flatCoordinates,\r\n      0,\r\n      flatCoordinates.length,\r\n      stride,\r\n      transform,\r\n      dest\r\n    );\r\n  }\r\n}\r\n\r\nexport default SimpleGeometry;\r\n", "/**\r\n * @module ol/geom/flat/deflate\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @param {number} stride Stride.\r\n * @return {number} offset Offset.\r\n */\r\nexport function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {\r\n  for (let i = 0, ii = coordinate.length; i < ii; ++i) {\r\n    flatCoordinates[offset++] = coordinate[i];\r\n  }\r\n  return offset;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} coordinates Coordinates.\r\n * @param {number} stride Stride.\r\n * @return {number} offset Offset.\r\n */\r\nexport function deflateCoordinates(\r\n  flatCoordinates,\r\n  offset,\r\n  coordinates,\r\n  stride\r\n) {\r\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n    const coordinate = coordinates[i];\r\n    for (let j = 0; j < stride; ++j) {\r\n      flatCoordinates[offset++] = coordinate[j];\r\n    }\r\n  }\r\n  return offset;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} coordinatess Coordinatess.\r\n * @param {number} stride Stride.\r\n * @param {Array<number>} [ends] Ends.\r\n * @return {Array<number>} Ends.\r\n */\r\nexport function deflateCoordinatesArray(\r\n  flatCoordinates,\r\n  offset,\r\n  coordinatess,\r\n  stride,\r\n  ends\r\n) {\r\n  ends = ends ? ends : [];\r\n  let i = 0;\r\n  for (let j = 0, jj = coordinatess.length; j < jj; ++j) {\r\n    const end = deflateCoordinates(\r\n      flatCoordinates,\r\n      offset,\r\n      coordinatess[j],\r\n      stride\r\n    );\r\n    ends[i++] = end;\r\n    offset = end;\r\n  }\r\n  ends.length = i;\r\n  return ends;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} coordinatesss Coordinatesss.\r\n * @param {number} stride Stride.\r\n * @param {Array<Array<number>>} [endss] Endss.\r\n * @return {Array<Array<number>>} Endss.\r\n */\r\nexport function deflateMultiCoordinatesArray(\r\n  flatCoordinates,\r\n  offset,\r\n  coordinatesss,\r\n  stride,\r\n  endss\r\n) {\r\n  endss = endss ? endss : [];\r\n  let i = 0;\r\n  for (let j = 0, jj = coordinatesss.length; j < jj; ++j) {\r\n    const ends = deflateCoordinatesArray(\r\n      flatCoordinates,\r\n      offset,\r\n      coordinatesss[j],\r\n      stride,\r\n      endss[i]\r\n    );\r\n    if (ends.length === 0) {\r\n      ends[0] = offset;\r\n    }\r\n    endss[i++] = ends;\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  endss.length = i;\r\n  return endss;\r\n}\r\n", "/**\r\n * @module ol/geom/Point\r\n */\r\nimport SimpleGeometry from './SimpleGeometry.js';\r\nimport {containsXY, createOrUpdateFromCoordinate} from '../extent.js';\r\nimport {deflateCoordinate} from './flat/deflate.js';\r\nimport {squaredDistance as squaredDx} from '../math.js';\r\n\r\n/**\r\n * @classdesc\r\n * Point geometry.\r\n *\r\n * @api\r\n */\r\nclass Point extends SimpleGeometry {\r\n  /**\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */\r\n  constructor(coordinates, layout) {\r\n    super();\r\n    this.setCoordinates(coordinates, layout);\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!Point} Clone.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const point = new Point(this.flatCoordinates.slice(), this.layout);\r\n    point.applyProperties(this);\r\n    return point;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const squaredDistance = squaredDx(\r\n      x,\r\n      y,\r\n      flatCoordinates[0],\r\n      flatCoordinates[1]\r\n    );\r\n    if (squaredDistance < minSquaredDistance) {\r\n      const stride = this.stride;\r\n      for (let i = 0; i < stride; ++i) {\r\n        closestPoint[i] = flatCoordinates[i];\r\n      }\r\n      closestPoint.length = stride;\r\n      return squaredDistance;\r\n    } else {\r\n      return minSquaredDistance;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the coordinate of the point.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\r\n   * @api\r\n   */\r\n  getCoordinates() {\r\n    return !this.flatCoordinates ? [] : this.flatCoordinates.slice();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   */\r\n  computeExtent(extent) {\r\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   */\r\n  getType() {\r\n    return 'Point';\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   */\r\n  intersectsExtent(extent) {\r\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\r\n  }\r\n\r\n  /**\r\n   * @param {!Array<*>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   */\r\n  setCoordinates(coordinates, layout) {\r\n    this.setLayout(layout, coordinates, 0);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    this.flatCoordinates.length = deflateCoordinate(\r\n      this.flatCoordinates,\r\n      0,\r\n      coordinates,\r\n      this.stride\r\n    );\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default Point;\r\n"],
  "mappings": "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",
  "names": ["rotate", "scale", "translate", "extent", "scale", "rotate", "scale", "translate", "squaredDistance"]
}
